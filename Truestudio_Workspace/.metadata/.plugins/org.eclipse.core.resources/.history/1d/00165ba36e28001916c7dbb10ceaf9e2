
LED_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b44  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000c04  08000c04  00010c04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000c34  08000c34  00010c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000c38  08000c38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000c40  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000c40  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000069ea  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001307  00000000  00000000  00026a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000002c0  00000000  00000000  00027d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000360  00000000  00000000  00027fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001e16  00000000  00000000  00028340  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000122c  00000000  00000000  0002a156  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002b382  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000005d8  00000000  00000000  0002b400  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00000d0b  00000000  00000000  0002b9d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000bec 	.word	0x08000bec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08000bec 	.word	0x08000bec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <user_led_init>:
#include "stm32f070xb.h"
#include "stm32f0xx_hal.h"


void user_led_init()
{
 8000220:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//LED2 ==>  GPIOA - 5. pin
	GPIO_InitTypeDef gpio_init;
		
	// Enable Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 8000222:	2080      	movs	r0, #128	; 0x80
 8000224:	4a0b      	ldr	r2, [pc, #44]	; (8000254 <user_led_init+0x34>)
 8000226:	0280      	lsls	r0, r0, #10
 8000228:	6951      	ldr	r1, [r2, #20]
 800022a:	4301      	orrs	r1, r0
 800022c:	6151      	str	r1, [r2, #20]
 800022e:	6953      	ldr	r3, [r2, #20]
	gpio_init.Pin = GPIO_PIN_5;
	gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
	gpio_init.Pull = GPIO_NOPULL;
	gpio_init.Speed = GPIO_SPEED_LOW;
	
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8000230:	a901      	add	r1, sp, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 8000232:	4003      	ands	r3, r0
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	9b00      	ldr	r3, [sp, #0]
	gpio_init.Pin = GPIO_PIN_5;
 8000238:	2320      	movs	r3, #32
	HAL_GPIO_Init(GPIOA,&gpio_init);
 800023a:	2090      	movs	r0, #144	; 0x90
	gpio_init.Pin = GPIO_PIN_5;
 800023c:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800023e:	3b1f      	subs	r3, #31
 8000240:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8000244:	05c0      	lsls	r0, r0, #23
	gpio_init.Pull = GPIO_NOPULL;
 8000246:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_LOW;
 8000248:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA,&gpio_init);
 800024a:	f000 f937 	bl	80004bc <HAL_GPIO_Init>
}
 800024e:	b007      	add	sp, #28
 8000250:	bd00      	pop	{pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	40021000 	.word	0x40021000

08000258 <user_led_set>:
}


void user_led_set()
{
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000258:	2090      	movs	r0, #144	; 0x90
{
 800025a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800025c:	2201      	movs	r2, #1
 800025e:	2120      	movs	r1, #32
 8000260:	05c0      	lsls	r0, r0, #23
 8000262:	f000 f9db 	bl	800061c <HAL_GPIO_WritePin>
	
}
 8000266:	bd10      	pop	{r4, pc}

08000268 <user_led_reset>:

void user_led_reset()
{
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);	
 8000268:	2090      	movs	r0, #144	; 0x90
{
 800026a:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);	
 800026c:	2200      	movs	r2, #0
 800026e:	2120      	movs	r1, #32
 8000270:	05c0      	lsls	r0, r0, #23
 8000272:	f000 f9d3 	bl	800061c <HAL_GPIO_WritePin>
}
 8000276:	bd10      	pop	{r4, pc}

08000278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490e      	ldr	r1, [pc, #56]	; (80002b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0e      	ldr	r2, [pc, #56]	; (80002bc <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0b      	ldr	r2, [pc, #44]	; (80002c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0b      	ldr	r4, [pc, #44]	; (80002c4 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002a2:	f000 f84f 	bl	8000344 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80002a6:	f000 fc73 	bl	8000b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f000 f80e 	bl	80002ca <main>

080002ae <LoopForever>:

LoopForever:
    b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   r0, =_estack
 80002b0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002bc:	08000c3c 	.word	0x08000c3c
  ldr r2, =_sbss
 80002c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002c4:	20000024 	.word	0x20000024

080002c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_IRQHandler>

080002ca <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80002ca:	b530      	push	{r4, r5, lr}
 80002cc:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80002ce:	f000 f881 	bl	80003d4 <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* No HSE Oscillator on Nucleo, Activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue  = RCC_HSICALIBRATION_DEFAULT;  
 80002d2:	2310      	movs	r3, #16
 80002d4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d6:	2380      	movs	r3, #128	; 0x80
 80002d8:	021b      	lsls	r3, r3, #8
 80002da:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002e0:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
 80002e4:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002e6:	035b      	lsls	r3, r3, #13
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80002e8:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ea:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
 80002ec:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ee:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002f0:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80002f2:	f000 f999 	bl	8000628 <HAL_RCC_OscConfig>
 80002f6:	2800      	cmp	r0, #0
 80002f8:	d000      	beq.n	80002fc <main+0x32>
 80002fa:	e7fe      	b.n	80002fa <main+0x30>
  {
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80002fc:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000300:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 8000302:	0029      	movs	r1, r5
 8000304:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000306:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000308:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 800030a:	f000 fba5 	bl	8000a58 <HAL_RCC_ClockConfig>
 800030e:	2800      	cmp	r0, #0
 8000310:	d000      	beq.n	8000314 <main+0x4a>
 8000312:	e7fe      	b.n	8000312 <main+0x48>
			HAL_Delay(1000);
 8000314:	24fa      	movs	r4, #250	; 0xfa
	user_led_init();
 8000316:	f7ff ff83 	bl	8000220 <user_led_init>
			HAL_Delay(1000);
 800031a:	00a4      	lsls	r4, r4, #2
			user_led_set();					
 800031c:	f7ff ff9c 	bl	8000258 <user_led_set>
			HAL_Delay(1000);
 8000320:	0020      	movs	r0, r4
 8000322:	f000 f875 	bl	8000410 <HAL_Delay>
			user_led_reset();		
 8000326:	f7ff ff9f 	bl	8000268 <user_led_reset>
		    HAL_Delay(1000);
 800032a:	0020      	movs	r0, r4
 800032c:	f000 f870 	bl	8000410 <HAL_Delay>
 8000330:	e7f4      	b.n	800031c <main+0x52>

08000332 <NMI_Handler>:
 8000332:	4770      	bx	lr

08000334 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000334:	e7fe      	b.n	8000334 <HardFault_Handler>

08000336 <SVC_Handler>:
 8000336:	4770      	bx	lr

08000338 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8000338:	4770      	bx	lr

0800033a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800033a:	b510      	push	{r4, lr}
  HAL_IncTick();
 800033c:	f000 f85a 	bl	80003f4 <HAL_IncTick>
}
 8000340:	bd10      	pop	{r4, pc}
	...

08000344 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000344:	2101      	movs	r1, #1
 8000346:	4b13      	ldr	r3, [pc, #76]	; (8000394 <SystemInit+0x50>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000348:	4813      	ldr	r0, [pc, #76]	; (8000398 <SystemInit+0x54>)
  RCC->CR |= (uint32_t)0x00000001U;
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	430a      	orrs	r2, r1
 800034e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000350:	685a      	ldr	r2, [r3, #4]
 8000352:	4002      	ands	r2, r0
 8000354:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	4810      	ldr	r0, [pc, #64]	; (800039c <SystemInit+0x58>)
 800035a:	4002      	ands	r2, r0
 800035c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800035e:	681a      	ldr	r2, [r3, #0]
 8000360:	480f      	ldr	r0, [pc, #60]	; (80003a0 <SystemInit+0x5c>)
 8000362:	4002      	ands	r2, r0
 8000364:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000366:	685a      	ldr	r2, [r3, #4]
 8000368:	480e      	ldr	r0, [pc, #56]	; (80003a4 <SystemInit+0x60>)
 800036a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800036c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800036e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000372:	4382      	bics	r2, r0
 8000374:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
  /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 8000376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000378:	480b      	ldr	r0, [pc, #44]	; (80003a8 <SystemInit+0x64>)
 800037a:	4002      	ands	r2, r0
 800037c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set default USB clock to PLLCLK, since there is no HSI48 */
  RCC->CFGR3 |= (uint32_t)0x00000080U;  
 800037e:	2280      	movs	r2, #128	; 0x80
 8000380:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000382:	4302      	orrs	r2, r0
 8000384:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000388:	438a      	bics	r2, r1
 800038a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]

}
 8000390:	4770      	bx	lr
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	40021000 	.word	0x40021000
 8000398:	08ffb80c 	.word	0x08ffb80c
 800039c:	fef6ffff 	.word	0xfef6ffff
 80003a0:	fffbffff 	.word	0xfffbffff
 80003a4:	ffc0ffff 	.word	0xffc0ffff
 80003a8:	fffffe6c 	.word	0xfffffe6c

080003ac <HAL_MspInit>:
 80003ac:	4770      	bx	lr

080003ae <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003ae:	b510      	push	{r4, lr}
 80003b0:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80003b2:	f000 fbe7 	bl	8000b84 <HAL_RCC_GetHCLKFreq>
 80003b6:	21fa      	movs	r1, #250	; 0xfa
 80003b8:	0089      	lsls	r1, r1, #2
 80003ba:	f7ff fea5 	bl	8000108 <__udivsi3>
 80003be:	f000 f863 	bl	8000488 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80003c2:	2001      	movs	r0, #1
 80003c4:	2200      	movs	r2, #0
 80003c6:	0021      	movs	r1, r4
 80003c8:	4240      	negs	r0, r0
 80003ca:	f000 f82d 	bl	8000428 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80003ce:	2000      	movs	r0, #0
 80003d0:	bd10      	pop	{r4, pc}
	...

080003d4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003d4:	2310      	movs	r3, #16
 80003d6:	4a06      	ldr	r2, [pc, #24]	; (80003f0 <HAL_Init+0x1c>)
{
 80003d8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003da:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80003dc:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003de:	430b      	orrs	r3, r1
 80003e0:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80003e2:	f7ff ffe4 	bl	80003ae <HAL_InitTick>
  HAL_MspInit();
 80003e6:	f7ff ffe1 	bl	80003ac <HAL_MspInit>
}
 80003ea:	2000      	movs	r0, #0
 80003ec:	bd10      	pop	{r4, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	40022000 	.word	0x40022000

080003f4 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80003f4:	4a02      	ldr	r2, [pc, #8]	; (8000400 <HAL_IncTick+0xc>)
 80003f6:	6813      	ldr	r3, [r2, #0]
 80003f8:	3301      	adds	r3, #1
 80003fa:	6013      	str	r3, [r2, #0]
}
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	20000020 	.word	0x20000020

08000404 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000404:	4b01      	ldr	r3, [pc, #4]	; (800040c <HAL_GetTick+0x8>)
 8000406:	6818      	ldr	r0, [r3, #0]
}
 8000408:	4770      	bx	lr
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	20000020 	.word	0x20000020

08000410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000410:	b513      	push	{r0, r1, r4, lr}
 8000412:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000414:	f7ff fff6 	bl	8000404 <HAL_GetTick>
 8000418:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800041a:	f7ff fff3 	bl	8000404 <HAL_GetTick>
 800041e:	9b01      	ldr	r3, [sp, #4]
 8000420:	1b00      	subs	r0, r0, r4
 8000422:	4298      	cmp	r0, r3
 8000424:	d3f9      	bcc.n	800041a <HAL_Delay+0xa>
  {
  }
}
 8000426:	bd13      	pop	{r0, r1, r4, pc}

08000428 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800042c:	2800      	cmp	r0, #0
 800042e:	da14      	bge.n	800045a <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000430:	230f      	movs	r3, #15
 8000432:	b2c0      	uxtb	r0, r0
 8000434:	4003      	ands	r3, r0
 8000436:	3b08      	subs	r3, #8
 8000438:	4a11      	ldr	r2, [pc, #68]	; (8000480 <HAL_NVIC_SetPriority+0x58>)
 800043a:	089b      	lsrs	r3, r3, #2
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	189b      	adds	r3, r3, r2
 8000440:	2203      	movs	r2, #3
 8000442:	4010      	ands	r0, r2
 8000444:	4090      	lsls	r0, r2
 8000446:	32fc      	adds	r2, #252	; 0xfc
 8000448:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800044a:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800044c:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800044e:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000450:	69dc      	ldr	r4, [r3, #28]
 8000452:	43ac      	bics	r4, r5
 8000454:	4321      	orrs	r1, r4
 8000456:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000458:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800045a:	2503      	movs	r5, #3
 800045c:	0883      	lsrs	r3, r0, #2
 800045e:	4028      	ands	r0, r5
 8000460:	40a8      	lsls	r0, r5
 8000462:	35fc      	adds	r5, #252	; 0xfc
 8000464:	002e      	movs	r6, r5
 8000466:	4a07      	ldr	r2, [pc, #28]	; (8000484 <HAL_NVIC_SetPriority+0x5c>)
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	189b      	adds	r3, r3, r2
 800046c:	22c0      	movs	r2, #192	; 0xc0
 800046e:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000470:	4029      	ands	r1, r5
 8000472:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000474:	0092      	lsls	r2, r2, #2
 8000476:	589c      	ldr	r4, [r3, r2]
 8000478:	43b4      	bics	r4, r6
 800047a:	4321      	orrs	r1, r4
 800047c:	5099      	str	r1, [r3, r2]
 800047e:	e7eb      	b.n	8000458 <HAL_NVIC_SetPriority+0x30>
 8000480:	e000ed00 	.word	0xe000ed00
 8000484:	e000e100 	.word	0xe000e100

08000488 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000488:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <HAL_SYSTICK_Config+0x28>)
 800048a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 800048c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800048e:	4293      	cmp	r3, r2
 8000490:	d80d      	bhi.n	80004ae <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000492:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000496:	4808      	ldr	r0, [pc, #32]	; (80004b8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000498:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800049a:	6a03      	ldr	r3, [r0, #32]
 800049c:	0609      	lsls	r1, r1, #24
 800049e:	021b      	lsls	r3, r3, #8
 80004a0:	0a1b      	lsrs	r3, r3, #8
 80004a2:	430b      	orrs	r3, r1
 80004a4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004a6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004a8:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004aa:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ac:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004ae:	4770      	bx	lr
 80004b0:	00ffffff 	.word	0x00ffffff
 80004b4:	e000e010 	.word	0xe000e010
 80004b8:	e000ed00 	.word	0xe000ed00

080004bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004be:	680b      	ldr	r3, [r1, #0]
{ 
 80004c0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004c2:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80004c4:	2300      	movs	r3, #0
{ 
 80004c6:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004c8:	9a02      	ldr	r2, [sp, #8]
 80004ca:	40da      	lsrs	r2, r3
 80004cc:	d101      	bne.n	80004d2 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80004ce:	b007      	add	sp, #28
 80004d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004d2:	2201      	movs	r2, #1
 80004d4:	409a      	lsls	r2, r3
 80004d6:	9203      	str	r2, [sp, #12]
 80004d8:	9903      	ldr	r1, [sp, #12]
 80004da:	9a02      	ldr	r2, [sp, #8]
 80004dc:	400a      	ands	r2, r1
 80004de:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80004e0:	d100      	bne.n	80004e4 <HAL_GPIO_Init+0x28>
 80004e2:	e08c      	b.n	80005fe <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80004e4:	9a01      	ldr	r2, [sp, #4]
 80004e6:	2110      	movs	r1, #16
 80004e8:	6852      	ldr	r2, [r2, #4]
 80004ea:	0016      	movs	r6, r2
 80004ec:	438e      	bics	r6, r1
 80004ee:	2e02      	cmp	r6, #2
 80004f0:	d10e      	bne.n	8000510 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80004f2:	2507      	movs	r5, #7
 80004f4:	401d      	ands	r5, r3
 80004f6:	00ad      	lsls	r5, r5, #2
 80004f8:	3901      	subs	r1, #1
 80004fa:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 80004fc:	08dc      	lsrs	r4, r3, #3
 80004fe:	00a4      	lsls	r4, r4, #2
 8000500:	1904      	adds	r4, r0, r4
 8000502:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000504:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000506:	9901      	ldr	r1, [sp, #4]
 8000508:	6909      	ldr	r1, [r1, #16]
 800050a:	40a9      	lsls	r1, r5
 800050c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800050e:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000510:	2403      	movs	r4, #3
 8000512:	005f      	lsls	r7, r3, #1
 8000514:	40bc      	lsls	r4, r7
 8000516:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000518:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051a:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800051c:	4025      	ands	r5, r4
 800051e:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000520:	2503      	movs	r5, #3
 8000522:	4015      	ands	r5, r2
 8000524:	40bd      	lsls	r5, r7
 8000526:	4661      	mov	r1, ip
 8000528:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800052a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800052c:	2e01      	cmp	r6, #1
 800052e:	d80f      	bhi.n	8000550 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000530:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000532:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000534:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000536:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000538:	40bd      	lsls	r5, r7
 800053a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800053c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800053e:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000540:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000542:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000544:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000546:	2101      	movs	r1, #1
 8000548:	400d      	ands	r5, r1
 800054a:	409d      	lsls	r5, r3
 800054c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800054e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000550:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000552:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000554:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000556:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000558:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800055a:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800055c:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800055e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000560:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000562:	420a      	tst	r2, r1
 8000564:	d04b      	beq.n	80005fe <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000566:	2101      	movs	r1, #1
 8000568:	4c26      	ldr	r4, [pc, #152]	; (8000604 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800056a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800056e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000570:	430d      	orrs	r5, r1
 8000572:	61a5      	str	r5, [r4, #24]
 8000574:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000576:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000578:	400c      	ands	r4, r1
 800057a:	9405      	str	r4, [sp, #20]
 800057c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800057e:	240f      	movs	r4, #15
 8000580:	4921      	ldr	r1, [pc, #132]	; (8000608 <HAL_GPIO_Init+0x14c>)
 8000582:	00ad      	lsls	r5, r5, #2
 8000584:	00b6      	lsls	r6, r6, #2
 8000586:	186d      	adds	r5, r5, r1
 8000588:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800058a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800058c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800058e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000590:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000592:	2400      	movs	r4, #0
 8000594:	4288      	cmp	r0, r1
 8000596:	d00c      	beq.n	80005b2 <HAL_GPIO_Init+0xf6>
 8000598:	491c      	ldr	r1, [pc, #112]	; (800060c <HAL_GPIO_Init+0x150>)
 800059a:	3401      	adds	r4, #1
 800059c:	4288      	cmp	r0, r1
 800059e:	d008      	beq.n	80005b2 <HAL_GPIO_Init+0xf6>
 80005a0:	491b      	ldr	r1, [pc, #108]	; (8000610 <HAL_GPIO_Init+0x154>)
 80005a2:	3401      	adds	r4, #1
 80005a4:	4288      	cmp	r0, r1
 80005a6:	d004      	beq.n	80005b2 <HAL_GPIO_Init+0xf6>
 80005a8:	491a      	ldr	r1, [pc, #104]	; (8000614 <HAL_GPIO_Init+0x158>)
 80005aa:	3403      	adds	r4, #3
 80005ac:	4288      	cmp	r0, r1
 80005ae:	d100      	bne.n	80005b2 <HAL_GPIO_Init+0xf6>
 80005b0:	3c02      	subs	r4, #2
 80005b2:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80005b4:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005b6:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80005b8:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80005ba:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80005bc:	4c16      	ldr	r4, [pc, #88]	; (8000618 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80005be:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80005c0:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80005c2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005c4:	03d1      	lsls	r1, r2, #15
 80005c6:	d401      	bmi.n	80005cc <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80005c8:	003e      	movs	r6, r7
 80005ca:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80005cc:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80005ce:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80005d0:	9e00      	ldr	r6, [sp, #0]
 80005d2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005d4:	0391      	lsls	r1, r2, #14
 80005d6:	d401      	bmi.n	80005dc <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80005d8:	003e      	movs	r6, r7
 80005da:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80005dc:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80005de:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80005e0:	9e00      	ldr	r6, [sp, #0]
 80005e2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005e4:	02d1      	lsls	r1, r2, #11
 80005e6:	d401      	bmi.n	80005ec <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80005e8:	003e      	movs	r6, r7
 80005ea:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80005ec:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80005ee:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80005f0:	9f00      	ldr	r7, [sp, #0]
 80005f2:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005f4:	0292      	lsls	r2, r2, #10
 80005f6:	d401      	bmi.n	80005fc <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80005f8:	402e      	ands	r6, r5
 80005fa:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80005fc:	60e7      	str	r7, [r4, #12]
    position++;
 80005fe:	3301      	adds	r3, #1
 8000600:	e762      	b.n	80004c8 <HAL_GPIO_Init+0xc>
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	40021000 	.word	0x40021000
 8000608:	40010000 	.word	0x40010000
 800060c:	48000400 	.word	0x48000400
 8000610:	48000800 	.word	0x48000800
 8000614:	48000c00 	.word	0x48000c00
 8000618:	40010400 	.word	0x40010400

0800061c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800061c:	2a00      	cmp	r2, #0
 800061e:	d001      	beq.n	8000624 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000620:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000622:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000624:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000626:	e7fc      	b.n	8000622 <HAL_GPIO_WritePin+0x6>

08000628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000628:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800062a:	6803      	ldr	r3, [r0, #0]
{
 800062c:	b085      	sub	sp, #20
 800062e:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000630:	07db      	lsls	r3, r3, #31
 8000632:	d42f      	bmi.n	8000694 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000634:	682b      	ldr	r3, [r5, #0]
 8000636:	079b      	lsls	r3, r3, #30
 8000638:	d500      	bpl.n	800063c <HAL_RCC_OscConfig+0x14>
 800063a:	e086      	b.n	800074a <HAL_RCC_OscConfig+0x122>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800063c:	682b      	ldr	r3, [r5, #0]
 800063e:	071b      	lsls	r3, r3, #28
 8000640:	d500      	bpl.n	8000644 <HAL_RCC_OscConfig+0x1c>
 8000642:	e0c6      	b.n	80007d2 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000644:	682b      	ldr	r3, [r5, #0]
 8000646:	075b      	lsls	r3, r3, #29
 8000648:	d500      	bpl.n	800064c <HAL_RCC_OscConfig+0x24>
 800064a:	e0e9      	b.n	8000820 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800064c:	682b      	ldr	r3, [r5, #0]
 800064e:	06db      	lsls	r3, r3, #27
 8000650:	d51a      	bpl.n	8000688 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000652:	696a      	ldr	r2, [r5, #20]
 8000654:	4cba      	ldr	r4, [pc, #744]	; (8000940 <HAL_RCC_OscConfig+0x318>)
 8000656:	2304      	movs	r3, #4
 8000658:	2a01      	cmp	r2, #1
 800065a:	d000      	beq.n	800065e <HAL_RCC_OscConfig+0x36>
 800065c:	e155      	b.n	800090a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800065e:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000660:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000662:	430b      	orrs	r3, r1
 8000664:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000666:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000668:	431a      	orrs	r2, r3
 800066a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800066c:	f7ff feca 	bl	8000404 <HAL_GetTick>
 8000670:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000672:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000674:	4233      	tst	r3, r6
 8000676:	d100      	bne.n	800067a <HAL_RCC_OscConfig+0x52>
 8000678:	e140      	b.n	80008fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800067a:	21f8      	movs	r1, #248	; 0xf8
 800067c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800067e:	69ab      	ldr	r3, [r5, #24]
 8000680:	438a      	bics	r2, r1
 8000682:	00db      	lsls	r3, r3, #3
 8000684:	4313      	orrs	r3, r2
 8000686:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000688:	6a29      	ldr	r1, [r5, #32]
 800068a:	2900      	cmp	r1, #0
 800068c:	d000      	beq.n	8000690 <HAL_RCC_OscConfig+0x68>
 800068e:	e163      	b.n	8000958 <HAL_RCC_OscConfig+0x330>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000690:	2000      	movs	r0, #0
 8000692:	e018      	b.n	80006c6 <HAL_RCC_OscConfig+0x9e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000694:	210c      	movs	r1, #12
 8000696:	4caa      	ldr	r4, [pc, #680]	; (8000940 <HAL_RCC_OscConfig+0x318>)
 8000698:	6862      	ldr	r2, [r4, #4]
 800069a:	400a      	ands	r2, r1
 800069c:	2a04      	cmp	r2, #4
 800069e:	d00b      	beq.n	80006b8 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006a0:	6863      	ldr	r3, [r4, #4]
 80006a2:	400b      	ands	r3, r1
 80006a4:	2b08      	cmp	r3, #8
 80006a6:	d110      	bne.n	80006ca <HAL_RCC_OscConfig+0xa2>
 80006a8:	22c0      	movs	r2, #192	; 0xc0
 80006aa:	6863      	ldr	r3, [r4, #4]
 80006ac:	0252      	lsls	r2, r2, #9
 80006ae:	4013      	ands	r3, r2
 80006b0:	2280      	movs	r2, #128	; 0x80
 80006b2:	0252      	lsls	r2, r2, #9
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d108      	bne.n	80006ca <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80006b8:	6823      	ldr	r3, [r4, #0]
 80006ba:	039b      	lsls	r3, r3, #14
 80006bc:	d5ba      	bpl.n	8000634 <HAL_RCC_OscConfig+0xc>
 80006be:	686b      	ldr	r3, [r5, #4]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1b7      	bne.n	8000634 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80006c4:	2001      	movs	r0, #1
}
 80006c6:	b005      	add	sp, #20
 80006c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006ca:	686b      	ldr	r3, [r5, #4]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d113      	bne.n	80006f8 <HAL_RCC_OscConfig+0xd0>
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	6822      	ldr	r2, [r4, #0]
 80006d4:	025b      	lsls	r3, r3, #9
 80006d6:	4313      	orrs	r3, r2
 80006d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80006da:	f7ff fe93 	bl	8000404 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006de:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80006e0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006e2:	02b6      	lsls	r6, r6, #10
 80006e4:	6823      	ldr	r3, [r4, #0]
 80006e6:	4233      	tst	r3, r6
 80006e8:	d1a4      	bne.n	8000634 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ea:	f7ff fe8b 	bl	8000404 <HAL_GetTick>
 80006ee:	1bc0      	subs	r0, r0, r7
 80006f0:	2864      	cmp	r0, #100	; 0x64
 80006f2:	d9f7      	bls.n	80006e4 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 80006f4:	2003      	movs	r0, #3
 80006f6:	e7e6      	b.n	80006c6 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d116      	bne.n	800072a <HAL_RCC_OscConfig+0x102>
 80006fc:	6823      	ldr	r3, [r4, #0]
 80006fe:	4a91      	ldr	r2, [pc, #580]	; (8000944 <HAL_RCC_OscConfig+0x31c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000700:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000702:	4013      	ands	r3, r2
 8000704:	6023      	str	r3, [r4, #0]
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	4a8f      	ldr	r2, [pc, #572]	; (8000948 <HAL_RCC_OscConfig+0x320>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800070a:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800070c:	4013      	ands	r3, r2
 800070e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000710:	f7ff fe78 	bl	8000404 <HAL_GetTick>
 8000714:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000716:	6823      	ldr	r3, [r4, #0]
 8000718:	4233      	tst	r3, r6
 800071a:	d100      	bne.n	800071e <HAL_RCC_OscConfig+0xf6>
 800071c:	e78a      	b.n	8000634 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800071e:	f7ff fe71 	bl	8000404 <HAL_GetTick>
 8000722:	1bc0      	subs	r0, r0, r7
 8000724:	2864      	cmp	r0, #100	; 0x64
 8000726:	d9f6      	bls.n	8000716 <HAL_RCC_OscConfig+0xee>
 8000728:	e7e4      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800072a:	2b05      	cmp	r3, #5
 800072c:	d105      	bne.n	800073a <HAL_RCC_OscConfig+0x112>
 800072e:	2380      	movs	r3, #128	; 0x80
 8000730:	6822      	ldr	r2, [r4, #0]
 8000732:	02db      	lsls	r3, r3, #11
 8000734:	4313      	orrs	r3, r2
 8000736:	6023      	str	r3, [r4, #0]
 8000738:	e7ca      	b.n	80006d0 <HAL_RCC_OscConfig+0xa8>
 800073a:	6823      	ldr	r3, [r4, #0]
 800073c:	4a81      	ldr	r2, [pc, #516]	; (8000944 <HAL_RCC_OscConfig+0x31c>)
 800073e:	4013      	ands	r3, r2
 8000740:	6023      	str	r3, [r4, #0]
 8000742:	6823      	ldr	r3, [r4, #0]
 8000744:	4a80      	ldr	r2, [pc, #512]	; (8000948 <HAL_RCC_OscConfig+0x320>)
 8000746:	4013      	ands	r3, r2
 8000748:	e7c6      	b.n	80006d8 <HAL_RCC_OscConfig+0xb0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800074a:	220c      	movs	r2, #12
 800074c:	4c7c      	ldr	r4, [pc, #496]	; (8000940 <HAL_RCC_OscConfig+0x318>)
 800074e:	6863      	ldr	r3, [r4, #4]
 8000750:	4213      	tst	r3, r2
 8000752:	d00b      	beq.n	800076c <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000754:	6863      	ldr	r3, [r4, #4]
 8000756:	4013      	ands	r3, r2
 8000758:	2b08      	cmp	r3, #8
 800075a:	d115      	bne.n	8000788 <HAL_RCC_OscConfig+0x160>
 800075c:	22c0      	movs	r2, #192	; 0xc0
 800075e:	6863      	ldr	r3, [r4, #4]
 8000760:	0252      	lsls	r2, r2, #9
 8000762:	4013      	ands	r3, r2
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	0212      	lsls	r2, r2, #8
 8000768:	4293      	cmp	r3, r2
 800076a:	d10d      	bne.n	8000788 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	079b      	lsls	r3, r3, #30
 8000770:	d502      	bpl.n	8000778 <HAL_RCC_OscConfig+0x150>
 8000772:	68eb      	ldr	r3, [r5, #12]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d1a5      	bne.n	80006c4 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000778:	21f8      	movs	r1, #248	; 0xf8
 800077a:	6822      	ldr	r2, [r4, #0]
 800077c:	692b      	ldr	r3, [r5, #16]
 800077e:	438a      	bics	r2, r1
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	4313      	orrs	r3, r2
 8000784:	6023      	str	r3, [r4, #0]
 8000786:	e759      	b.n	800063c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000788:	68ea      	ldr	r2, [r5, #12]
 800078a:	2301      	movs	r3, #1
 800078c:	2a00      	cmp	r2, #0
 800078e:	d00f      	beq.n	80007b0 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_ENABLE();
 8000790:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000792:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000794:	4313      	orrs	r3, r2
 8000796:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000798:	f7ff fe34 	bl	8000404 <HAL_GetTick>
 800079c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800079e:	6823      	ldr	r3, [r4, #0]
 80007a0:	4233      	tst	r3, r6
 80007a2:	d1e9      	bne.n	8000778 <HAL_RCC_OscConfig+0x150>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007a4:	f7ff fe2e 	bl	8000404 <HAL_GetTick>
 80007a8:	1bc0      	subs	r0, r0, r7
 80007aa:	2802      	cmp	r0, #2
 80007ac:	d9f7      	bls.n	800079e <HAL_RCC_OscConfig+0x176>
 80007ae:	e7a1      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_DISABLE();
 80007b0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007b2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80007b4:	439a      	bics	r2, r3
 80007b6:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80007b8:	f7ff fe24 	bl	8000404 <HAL_GetTick>
 80007bc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	4233      	tst	r3, r6
 80007c2:	d100      	bne.n	80007c6 <HAL_RCC_OscConfig+0x19e>
 80007c4:	e73a      	b.n	800063c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007c6:	f7ff fe1d 	bl	8000404 <HAL_GetTick>
 80007ca:	1bc0      	subs	r0, r0, r7
 80007cc:	2802      	cmp	r0, #2
 80007ce:	d9f6      	bls.n	80007be <HAL_RCC_OscConfig+0x196>
 80007d0:	e790      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007d2:	69ea      	ldr	r2, [r5, #28]
 80007d4:	2301      	movs	r3, #1
 80007d6:	4c5a      	ldr	r4, [pc, #360]	; (8000940 <HAL_RCC_OscConfig+0x318>)
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d010      	beq.n	80007fe <HAL_RCC_OscConfig+0x1d6>
      __HAL_RCC_LSI_ENABLE();
 80007dc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007de:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80007e0:	4313      	orrs	r3, r2
 80007e2:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80007e4:	f7ff fe0e 	bl	8000404 <HAL_GetTick>
 80007e8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80007ec:	4233      	tst	r3, r6
 80007ee:	d000      	beq.n	80007f2 <HAL_RCC_OscConfig+0x1ca>
 80007f0:	e728      	b.n	8000644 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007f2:	f7ff fe07 	bl	8000404 <HAL_GetTick>
 80007f6:	1bc0      	subs	r0, r0, r7
 80007f8:	2802      	cmp	r0, #2
 80007fa:	d9f6      	bls.n	80007ea <HAL_RCC_OscConfig+0x1c2>
 80007fc:	e77a      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_LSI_DISABLE();
 80007fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000800:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000802:	439a      	bics	r2, r3
 8000804:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000806:	f7ff fdfd 	bl	8000404 <HAL_GetTick>
 800080a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800080c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800080e:	4233      	tst	r3, r6
 8000810:	d100      	bne.n	8000814 <HAL_RCC_OscConfig+0x1ec>
 8000812:	e717      	b.n	8000644 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000814:	f7ff fdf6 	bl	8000404 <HAL_GetTick>
 8000818:	1bc0      	subs	r0, r0, r7
 800081a:	2802      	cmp	r0, #2
 800081c:	d9f6      	bls.n	800080c <HAL_RCC_OscConfig+0x1e4>
 800081e:	e769      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000820:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000822:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000824:	4c46      	ldr	r4, [pc, #280]	; (8000940 <HAL_RCC_OscConfig+0x318>)
 8000826:	0552      	lsls	r2, r2, #21
 8000828:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800082a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800082c:	4213      	tst	r3, r2
 800082e:	d108      	bne.n	8000842 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000830:	69e3      	ldr	r3, [r4, #28]
 8000832:	4313      	orrs	r3, r2
 8000834:	61e3      	str	r3, [r4, #28]
 8000836:	69e3      	ldr	r3, [r4, #28]
 8000838:	4013      	ands	r3, r2
 800083a:	9303      	str	r3, [sp, #12]
 800083c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800083e:	2301      	movs	r3, #1
 8000840:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000842:	2780      	movs	r7, #128	; 0x80
 8000844:	4e41      	ldr	r6, [pc, #260]	; (800094c <HAL_RCC_OscConfig+0x324>)
 8000846:	007f      	lsls	r7, r7, #1
 8000848:	6833      	ldr	r3, [r6, #0]
 800084a:	423b      	tst	r3, r7
 800084c:	d006      	beq.n	800085c <HAL_RCC_OscConfig+0x234>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800084e:	68ab      	ldr	r3, [r5, #8]
 8000850:	2b01      	cmp	r3, #1
 8000852:	d113      	bne.n	800087c <HAL_RCC_OscConfig+0x254>
 8000854:	6a22      	ldr	r2, [r4, #32]
 8000856:	4313      	orrs	r3, r2
 8000858:	6223      	str	r3, [r4, #32]
 800085a:	e030      	b.n	80008be <HAL_RCC_OscConfig+0x296>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800085c:	6833      	ldr	r3, [r6, #0]
 800085e:	433b      	orrs	r3, r7
 8000860:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000862:	f7ff fdcf 	bl	8000404 <HAL_GetTick>
 8000866:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000868:	6833      	ldr	r3, [r6, #0]
 800086a:	423b      	tst	r3, r7
 800086c:	d1ef      	bne.n	800084e <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800086e:	f7ff fdc9 	bl	8000404 <HAL_GetTick>
 8000872:	9b01      	ldr	r3, [sp, #4]
 8000874:	1ac0      	subs	r0, r0, r3
 8000876:	2864      	cmp	r0, #100	; 0x64
 8000878:	d9f6      	bls.n	8000868 <HAL_RCC_OscConfig+0x240>
 800087a:	e73b      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
 800087c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800087e:	2b00      	cmp	r3, #0
 8000880:	d114      	bne.n	80008ac <HAL_RCC_OscConfig+0x284>
 8000882:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000884:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000886:	4393      	bics	r3, r2
 8000888:	6223      	str	r3, [r4, #32]
 800088a:	6a23      	ldr	r3, [r4, #32]
 800088c:	3203      	adds	r2, #3
 800088e:	4393      	bics	r3, r2
 8000890:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000892:	f7ff fdb7 	bl	8000404 <HAL_GetTick>
 8000896:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000898:	6a23      	ldr	r3, [r4, #32]
 800089a:	423b      	tst	r3, r7
 800089c:	d025      	beq.n	80008ea <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800089e:	f7ff fdb1 	bl	8000404 <HAL_GetTick>
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <HAL_RCC_OscConfig+0x328>)
 80008a4:	1b80      	subs	r0, r0, r6
 80008a6:	4298      	cmp	r0, r3
 80008a8:	d9f6      	bls.n	8000898 <HAL_RCC_OscConfig+0x270>
 80008aa:	e723      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008ac:	2b05      	cmp	r3, #5
 80008ae:	d10b      	bne.n	80008c8 <HAL_RCC_OscConfig+0x2a0>
 80008b0:	6a21      	ldr	r1, [r4, #32]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	430b      	orrs	r3, r1
 80008b6:	6223      	str	r3, [r4, #32]
 80008b8:	6a23      	ldr	r3, [r4, #32]
 80008ba:	431a      	orrs	r2, r3
 80008bc:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80008be:	f7ff fda1 	bl	8000404 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008c2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80008c4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008c6:	e00d      	b.n	80008e4 <HAL_RCC_OscConfig+0x2bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008c8:	6a23      	ldr	r3, [r4, #32]
 80008ca:	4393      	bics	r3, r2
 80008cc:	2204      	movs	r2, #4
 80008ce:	6223      	str	r3, [r4, #32]
 80008d0:	6a23      	ldr	r3, [r4, #32]
 80008d2:	4393      	bics	r3, r2
 80008d4:	e7c0      	b.n	8000858 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008d6:	f7ff fd95 	bl	8000404 <HAL_GetTick>
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <HAL_RCC_OscConfig+0x328>)
 80008dc:	1b80      	subs	r0, r0, r6
 80008de:	4298      	cmp	r0, r3
 80008e0:	d900      	bls.n	80008e4 <HAL_RCC_OscConfig+0x2bc>
 80008e2:	e707      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008e4:	6a23      	ldr	r3, [r4, #32]
 80008e6:	423b      	tst	r3, r7
 80008e8:	d0f5      	beq.n	80008d6 <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 80008ea:	9b00      	ldr	r3, [sp, #0]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d000      	beq.n	80008f2 <HAL_RCC_OscConfig+0x2ca>
 80008f0:	e6ac      	b.n	800064c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008f2:	69e3      	ldr	r3, [r4, #28]
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_RCC_OscConfig+0x32c>)
 80008f6:	4013      	ands	r3, r2
 80008f8:	61e3      	str	r3, [r4, #28]
 80008fa:	e6a7      	b.n	800064c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80008fc:	f7ff fd82 	bl	8000404 <HAL_GetTick>
 8000900:	1bc0      	subs	r0, r0, r7
 8000902:	2802      	cmp	r0, #2
 8000904:	d800      	bhi.n	8000908 <HAL_RCC_OscConfig+0x2e0>
 8000906:	e6b4      	b.n	8000672 <HAL_RCC_OscConfig+0x4a>
 8000908:	e6f4      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800090a:	3205      	adds	r2, #5
 800090c:	d103      	bne.n	8000916 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_HSI14ADC_ENABLE();
 800090e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000910:	439a      	bics	r2, r3
 8000912:	6362      	str	r2, [r4, #52]	; 0x34
 8000914:	e6b1      	b.n	800067a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000916:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000918:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800091a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800091c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800091e:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000920:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000922:	4393      	bics	r3, r2
 8000924:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000926:	f7ff fd6d 	bl	8000404 <HAL_GetTick>
 800092a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800092c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800092e:	4233      	tst	r3, r6
 8000930:	d100      	bne.n	8000934 <HAL_RCC_OscConfig+0x30c>
 8000932:	e6a9      	b.n	8000688 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000934:	f7ff fd66 	bl	8000404 <HAL_GetTick>
 8000938:	1bc0      	subs	r0, r0, r7
 800093a:	2802      	cmp	r0, #2
 800093c:	d9f6      	bls.n	800092c <HAL_RCC_OscConfig+0x304>
 800093e:	e6d9      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
 8000940:	40021000 	.word	0x40021000
 8000944:	fffeffff 	.word	0xfffeffff
 8000948:	fffbffff 	.word	0xfffbffff
 800094c:	40007000 	.word	0x40007000
 8000950:	00001388 	.word	0x00001388
 8000954:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000958:	220c      	movs	r2, #12
 800095a:	4c26      	ldr	r4, [pc, #152]	; (80009f4 <HAL_RCC_OscConfig+0x3cc>)
      return HAL_ERROR;
 800095c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800095e:	6863      	ldr	r3, [r4, #4]
 8000960:	4013      	ands	r3, r2
 8000962:	2b08      	cmp	r3, #8
 8000964:	d100      	bne.n	8000968 <HAL_RCC_OscConfig+0x340>
 8000966:	e6ae      	b.n	80006c6 <HAL_RCC_OscConfig+0x9e>
        __HAL_RCC_PLL_DISABLE();
 8000968:	6823      	ldr	r3, [r4, #0]
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <HAL_RCC_OscConfig+0x3d0>)
 800096c:	4013      	ands	r3, r2
 800096e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000970:	2902      	cmp	r1, #2
 8000972:	d12f      	bne.n	80009d4 <HAL_RCC_OscConfig+0x3ac>
        tickstart = HAL_GetTick();
 8000974:	f7ff fd46 	bl	8000404 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000978:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800097a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800097c:	04b6      	lsls	r6, r6, #18
 800097e:	6823      	ldr	r3, [r4, #0]
 8000980:	4233      	tst	r3, r6
 8000982:	d121      	bne.n	80009c8 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000984:	220f      	movs	r2, #15
 8000986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000988:	4393      	bics	r3, r2
 800098a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800098c:	4313      	orrs	r3, r2
 800098e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000990:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000992:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000994:	6862      	ldr	r2, [r4, #4]
 8000996:	430b      	orrs	r3, r1
 8000998:	4918      	ldr	r1, [pc, #96]	; (80009fc <HAL_RCC_OscConfig+0x3d4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800099a:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800099c:	400a      	ands	r2, r1
 800099e:	4313      	orrs	r3, r2
 80009a0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	6822      	ldr	r2, [r4, #0]
 80009a6:	045b      	lsls	r3, r3, #17
 80009a8:	4313      	orrs	r3, r2
 80009aa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009ac:	f7ff fd2a 	bl	8000404 <HAL_GetTick>
 80009b0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80009b2:	04ad      	lsls	r5, r5, #18
 80009b4:	6823      	ldr	r3, [r4, #0]
 80009b6:	422b      	tst	r3, r5
 80009b8:	d000      	beq.n	80009bc <HAL_RCC_OscConfig+0x394>
 80009ba:	e669      	b.n	8000690 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009bc:	f7ff fd22 	bl	8000404 <HAL_GetTick>
 80009c0:	1b80      	subs	r0, r0, r6
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9f6      	bls.n	80009b4 <HAL_RCC_OscConfig+0x38c>
 80009c6:	e695      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009c8:	f7ff fd1c 	bl	8000404 <HAL_GetTick>
 80009cc:	1bc0      	subs	r0, r0, r7
 80009ce:	2802      	cmp	r0, #2
 80009d0:	d9d5      	bls.n	800097e <HAL_RCC_OscConfig+0x356>
 80009d2:	e68f      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 80009d4:	f7ff fd16 	bl	8000404 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009d8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80009da:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009dc:	04ad      	lsls	r5, r5, #18
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	422b      	tst	r3, r5
 80009e2:	d100      	bne.n	80009e6 <HAL_RCC_OscConfig+0x3be>
 80009e4:	e654      	b.n	8000690 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009e6:	f7ff fd0d 	bl	8000404 <HAL_GetTick>
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	2802      	cmp	r0, #2
 80009ee:	d9f6      	bls.n	80009de <HAL_RCC_OscConfig+0x3b6>
 80009f0:	e680      	b.n	80006f4 <HAL_RCC_OscConfig+0xcc>
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	40021000 	.word	0x40021000
 80009f8:	feffffff 	.word	0xfeffffff
 80009fc:	ffc27fff 	.word	0xffc27fff

08000a00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a00:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000a02:	4d12      	ldr	r5, [pc, #72]	; (8000a4c <HAL_RCC_GetSysClockFreq+0x4c>)
{
 8000a04:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000a06:	2210      	movs	r2, #16
 8000a08:	0029      	movs	r1, r5
 8000a0a:	4668      	mov	r0, sp
 8000a0c:	f000 f8e4 	bl	8000bd8 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000a10:	0029      	movs	r1, r5
 8000a12:	ac04      	add	r4, sp, #16
 8000a14:	3110      	adds	r1, #16
 8000a16:	2210      	movs	r2, #16
 8000a18:	0020      	movs	r0, r4
 8000a1a:	f000 f8dd 	bl	8000bd8 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a1e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000a20:	490b      	ldr	r1, [pc, #44]	; (8000a50 <HAL_RCC_GetSysClockFreq+0x50>)
 8000a22:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000a24:	401a      	ands	r2, r3
 8000a26:	2a08      	cmp	r2, #8
 8000a28:	d10d      	bne.n	8000a46 <HAL_RCC_GetSysClockFreq+0x46>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000a2a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000a2c:	210f      	movs	r1, #15
 8000a2e:	4668      	mov	r0, sp
 8000a30:	0c9b      	lsrs	r3, r3, #18
 8000a32:	400b      	ands	r3, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000a34:	400a      	ands	r2, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000a36:	5cc5      	ldrb	r5, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000a38:	5ca1      	ldrb	r1, [r4, r2]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000a3a:	4806      	ldr	r0, [pc, #24]	; (8000a54 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a3c:	f7ff fb64 	bl	8000108 <__udivsi3>
 8000a40:	4368      	muls	r0, r5
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a42:	b009      	add	sp, #36	; 0x24
 8000a44:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8000a46:	4803      	ldr	r0, [pc, #12]	; (8000a54 <HAL_RCC_GetSysClockFreq+0x54>)
  return sysclockfreq;
 8000a48:	e7fb      	b.n	8000a42 <HAL_RCC_GetSysClockFreq+0x42>
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	08000c04 	.word	0x08000c04
 8000a50:	40021000 	.word	0x40021000
 8000a54:	007a1200 	.word	0x007a1200

08000a58 <HAL_RCC_ClockConfig>:
{
 8000a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	4c43      	ldr	r4, [pc, #268]	; (8000b6c <HAL_RCC_ClockConfig+0x114>)
{
 8000a5e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a60:	6823      	ldr	r3, [r4, #0]
{
 8000a62:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a64:	4013      	ands	r3, r2
 8000a66:	428b      	cmp	r3, r1
 8000a68:	d31c      	bcc.n	8000aa4 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a6a:	6832      	ldr	r2, [r6, #0]
 8000a6c:	0793      	lsls	r3, r2, #30
 8000a6e:	d423      	bmi.n	8000ab8 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a70:	07d3      	lsls	r3, r2, #31
 8000a72:	d429      	bmi.n	8000ac8 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a74:	2301      	movs	r3, #1
 8000a76:	6822      	ldr	r2, [r4, #0]
 8000a78:	401a      	ands	r2, r3
 8000a7a:	4297      	cmp	r7, r2
 8000a7c:	d367      	bcc.n	8000b4e <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a7e:	6833      	ldr	r3, [r6, #0]
 8000a80:	4c3b      	ldr	r4, [pc, #236]	; (8000b70 <HAL_RCC_ClockConfig+0x118>)
 8000a82:	075b      	lsls	r3, r3, #29
 8000a84:	d46a      	bmi.n	8000b5c <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a86:	f7ff ffbb 	bl	8000a00 <HAL_RCC_GetSysClockFreq>
 8000a8a:	6863      	ldr	r3, [r4, #4]
 8000a8c:	4a39      	ldr	r2, [pc, #228]	; (8000b74 <HAL_RCC_ClockConfig+0x11c>)
 8000a8e:	061b      	lsls	r3, r3, #24
 8000a90:	0f1b      	lsrs	r3, r3, #28
 8000a92:	5cd3      	ldrb	r3, [r2, r3]
 8000a94:	40d8      	lsrs	r0, r3
 8000a96:	4b38      	ldr	r3, [pc, #224]	; (8000b78 <HAL_RCC_ClockConfig+0x120>)
 8000a98:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f7ff fc87 	bl	80003ae <HAL_InitTick>
  return HAL_OK;
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e008      	b.n	8000ab6 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000aa4:	6823      	ldr	r3, [r4, #0]
 8000aa6:	4393      	bics	r3, r2
 8000aa8:	430b      	orrs	r3, r1
 8000aaa:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	4013      	ands	r3, r2
 8000ab0:	4299      	cmp	r1, r3
 8000ab2:	d0da      	beq.n	8000a6a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000ab4:	2001      	movs	r0, #1
}
 8000ab6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ab8:	20f0      	movs	r0, #240	; 0xf0
 8000aba:	492d      	ldr	r1, [pc, #180]	; (8000b70 <HAL_RCC_ClockConfig+0x118>)
 8000abc:	684b      	ldr	r3, [r1, #4]
 8000abe:	4383      	bics	r3, r0
 8000ac0:	68b0      	ldr	r0, [r6, #8]
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	604b      	str	r3, [r1, #4]
 8000ac6:	e7d3      	b.n	8000a70 <HAL_RCC_ClockConfig+0x18>
 8000ac8:	4d29      	ldr	r5, [pc, #164]	; (8000b70 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aca:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000acc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ace:	2a01      	cmp	r2, #1
 8000ad0:	d11a      	bne.n	8000b08 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad2:	039b      	lsls	r3, r3, #14
 8000ad4:	d5ee      	bpl.n	8000ab4 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ad6:	2103      	movs	r1, #3
 8000ad8:	686b      	ldr	r3, [r5, #4]
 8000ada:	438b      	bics	r3, r1
 8000adc:	4313      	orrs	r3, r2
 8000ade:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000ae0:	f7ff fc90 	bl	8000404 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000ae6:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d115      	bne.n	8000b18 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000aec:	220c      	movs	r2, #12
 8000aee:	686b      	ldr	r3, [r5, #4]
 8000af0:	4013      	ands	r3, r2
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	d0be      	beq.n	8000a74 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af6:	f7ff fc85 	bl	8000404 <HAL_GetTick>
 8000afa:	9b01      	ldr	r3, [sp, #4]
 8000afc:	1ac0      	subs	r0, r0, r3
 8000afe:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <HAL_RCC_ClockConfig+0x124>)
 8000b00:	4298      	cmp	r0, r3
 8000b02:	d9f3      	bls.n	8000aec <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000b04:	2003      	movs	r0, #3
 8000b06:	e7d6      	b.n	8000ab6 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b08:	2a02      	cmp	r2, #2
 8000b0a:	d102      	bne.n	8000b12 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	d4e2      	bmi.n	8000ad6 <HAL_RCC_ClockConfig+0x7e>
 8000b10:	e7d0      	b.n	8000ab4 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b12:	079b      	lsls	r3, r3, #30
 8000b14:	d4df      	bmi.n	8000ad6 <HAL_RCC_ClockConfig+0x7e>
 8000b16:	e7cd      	b.n	8000ab4 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d012      	beq.n	8000b42 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	686b      	ldr	r3, [r5, #4]
 8000b20:	4213      	tst	r3, r2
 8000b22:	d0a7      	beq.n	8000a74 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b24:	f7ff fc6e 	bl	8000404 <HAL_GetTick>
 8000b28:	9b01      	ldr	r3, [sp, #4]
 8000b2a:	1ac0      	subs	r0, r0, r3
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <HAL_RCC_ClockConfig+0x124>)
 8000b2e:	4298      	cmp	r0, r3
 8000b30:	d9f4      	bls.n	8000b1c <HAL_RCC_ClockConfig+0xc4>
 8000b32:	e7e7      	b.n	8000b04 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b34:	f7ff fc66 	bl	8000404 <HAL_GetTick>
 8000b38:	9b01      	ldr	r3, [sp, #4]
 8000b3a:	1ac0      	subs	r0, r0, r3
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_RCC_ClockConfig+0x124>)
 8000b3e:	4298      	cmp	r0, r3
 8000b40:	d8e0      	bhi.n	8000b04 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b42:	220c      	movs	r2, #12
 8000b44:	686b      	ldr	r3, [r5, #4]
 8000b46:	4013      	ands	r3, r2
 8000b48:	2b08      	cmp	r3, #8
 8000b4a:	d1f3      	bne.n	8000b34 <HAL_RCC_ClockConfig+0xdc>
 8000b4c:	e792      	b.n	8000a74 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b4e:	6822      	ldr	r2, [r4, #0]
 8000b50:	439a      	bics	r2, r3
 8000b52:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b54:	6822      	ldr	r2, [r4, #0]
 8000b56:	421a      	tst	r2, r3
 8000b58:	d1ac      	bne.n	8000ab4 <HAL_RCC_ClockConfig+0x5c>
 8000b5a:	e790      	b.n	8000a7e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000b5c:	6863      	ldr	r3, [r4, #4]
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_RCC_ClockConfig+0x128>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	68f2      	ldr	r2, [r6, #12]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	6063      	str	r3, [r4, #4]
 8000b68:	e78d      	b.n	8000a86 <HAL_RCC_ClockConfig+0x2e>
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	40022000 	.word	0x40022000
 8000b70:	40021000 	.word	0x40021000
 8000b74:	08000c24 	.word	0x08000c24
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	00001388 	.word	0x00001388
 8000b80:	fffff8ff 	.word	0xfffff8ff

08000b84 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000b84:	4b01      	ldr	r3, [pc, #4]	; (8000b8c <HAL_RCC_GetHCLKFreq+0x8>)
 8000b86:	6818      	ldr	r0, [r3, #0]
}
 8000b88:	4770      	bx	lr
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	20000000 	.word	0x20000000

08000b90 <__libc_init_array>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	2600      	movs	r6, #0
 8000b94:	4d0c      	ldr	r5, [pc, #48]	; (8000bc8 <__libc_init_array+0x38>)
 8000b96:	4c0d      	ldr	r4, [pc, #52]	; (8000bcc <__libc_init_array+0x3c>)
 8000b98:	1b64      	subs	r4, r4, r5
 8000b9a:	10a4      	asrs	r4, r4, #2
 8000b9c:	42a6      	cmp	r6, r4
 8000b9e:	d109      	bne.n	8000bb4 <__libc_init_array+0x24>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	f000 f823 	bl	8000bec <_init>
 8000ba6:	4d0a      	ldr	r5, [pc, #40]	; (8000bd0 <__libc_init_array+0x40>)
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <__libc_init_array+0x44>)
 8000baa:	1b64      	subs	r4, r4, r5
 8000bac:	10a4      	asrs	r4, r4, #2
 8000bae:	42a6      	cmp	r6, r4
 8000bb0:	d105      	bne.n	8000bbe <__libc_init_array+0x2e>
 8000bb2:	bd70      	pop	{r4, r5, r6, pc}
 8000bb4:	00b3      	lsls	r3, r6, #2
 8000bb6:	58eb      	ldr	r3, [r5, r3]
 8000bb8:	4798      	blx	r3
 8000bba:	3601      	adds	r6, #1
 8000bbc:	e7ee      	b.n	8000b9c <__libc_init_array+0xc>
 8000bbe:	00b3      	lsls	r3, r6, #2
 8000bc0:	58eb      	ldr	r3, [r5, r3]
 8000bc2:	4798      	blx	r3
 8000bc4:	3601      	adds	r6, #1
 8000bc6:	e7f2      	b.n	8000bae <__libc_init_array+0x1e>
 8000bc8:	08000c34 	.word	0x08000c34
 8000bcc:	08000c34 	.word	0x08000c34
 8000bd0:	08000c34 	.word	0x08000c34
 8000bd4:	08000c38 	.word	0x08000c38

08000bd8 <memcpy>:
 8000bd8:	2300      	movs	r3, #0
 8000bda:	b510      	push	{r4, lr}
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d100      	bne.n	8000be2 <memcpy+0xa>
 8000be0:	bd10      	pop	{r4, pc}
 8000be2:	5ccc      	ldrb	r4, [r1, r3]
 8000be4:	54c4      	strb	r4, [r0, r3]
 8000be6:	3301      	adds	r3, #1
 8000be8:	e7f8      	b.n	8000bdc <memcpy+0x4>
	...

08000bec <_init>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf2:	bc08      	pop	{r3}
 8000bf4:	469e      	mov	lr, r3
 8000bf6:	4770      	bx	lr

08000bf8 <_fini>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfe:	bc08      	pop	{r3}
 8000c00:	469e      	mov	lr, r3
 8000c02:	4770      	bx	lr
