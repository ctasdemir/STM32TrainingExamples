
ADC_Single_Conv_Int.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025fc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080027a0  080027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080027a4  080027a4  000127a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  080027a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000910  20000068  08002810  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000978  08002810  00020978  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_line   0000473e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000f61b  00000000  00000000  000247ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002624  00000000  00000000  00033de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000006a0  00000000  00000000  00036410  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000808  00000000  00000000  00036ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000341c  00000000  00000000  000372b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000025fb  00000000  00000000  0003a6d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003cccf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001838  00000000  00000000  0003cd4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080026a4 	.word	0x080026a4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080026a4 	.word	0x080026a4

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000234:	480d      	ldr	r0, [pc, #52]	; (800026c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000236:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000238:	480d      	ldr	r0, [pc, #52]	; (8000270 <LoopForever+0x6>)
  ldr r1, =_edata
 800023a:	490e      	ldr	r1, [pc, #56]	; (8000274 <LoopForever+0xa>)
  ldr r2, =_sidata
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <LoopForever+0xe>)
  movs r3, #0
 800023e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024e:	4a0b      	ldr	r2, [pc, #44]	; (800027c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000250:	4c0b      	ldr	r4, [pc, #44]	; (8000280 <LoopForever+0x16>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025e:	f000 f95f 	bl	8000520 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000262:	f001 fab7 	bl	80017d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000266:	f000 f8f7 	bl	8000458 <main>

0800026a <LoopForever>:

LoopForever:
    b LoopForever
 800026a:	e7fe      	b.n	800026a <LoopForever>
  ldr   r0, =_estack
 800026c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000274:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000278:	080027a8 	.word	0x080027a8
  ldr r2, =_sbss
 800027c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000280:	20000978 	.word	0x20000978

08000284 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000284:	e7fe      	b.n	8000284 <DMA1_Channel1_IRQHandler>

08000286 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8000286:	b570      	push	{r4, r5, r6, lr}
 8000288:	000e      	movs	r6, r1
 800028a:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800028c:	000c      	movs	r4, r1
 800028e:	1ba3      	subs	r3, r4, r6
 8000290:	429d      	cmp	r5, r3
 8000292:	dc01      	bgt.n	8000298 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8000294:	0028      	movs	r0, r5
 8000296:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8000298:	e000      	b.n	800029c <_read+0x16>
 800029a:	bf00      	nop
 800029c:	7020      	strb	r0, [r4, #0]
 800029e:	3401      	adds	r4, #1
 80002a0:	e7f5      	b.n	800028e <_read+0x8>

080002a2 <_write>:

int _write(int file, char *ptr, int len)
{
 80002a2:	b570      	push	{r4, r5, r6, lr}
 80002a4:	000e      	movs	r6, r1
 80002a6:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002a8:	000c      	movs	r4, r1
 80002aa:	1ba3      	subs	r3, r4, r6
 80002ac:	429d      	cmp	r5, r3
 80002ae:	dc01      	bgt.n	80002b4 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80002b0:	0028      	movs	r0, r5
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80002b4:	7820      	ldrb	r0, [r4, #0]
 80002b6:	e000      	b.n	80002ba <_write+0x18>
 80002b8:	bf00      	nop
 80002ba:	3401      	adds	r4, #1
 80002bc:	e7f5      	b.n	80002aa <_write+0x8>
	...

080002c0 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80002c0:	4b0a      	ldr	r3, [pc, #40]	; (80002ec <_sbrk+0x2c>)
{
 80002c2:	b510      	push	{r4, lr}
	if (heap_end == 0)
 80002c4:	6819      	ldr	r1, [r3, #0]
{
 80002c6:	0002      	movs	r2, r0
	if (heap_end == 0)
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d101      	bne.n	80002d0 <_sbrk+0x10>
		heap_end = &end;
 80002cc:	4908      	ldr	r1, [pc, #32]	; (80002f0 <_sbrk+0x30>)
 80002ce:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 80002d0:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 80002d2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80002d4:	1882      	adds	r2, r0, r2
 80002d6:	428a      	cmp	r2, r1
 80002d8:	d906      	bls.n	80002e8 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80002da:	f001 fa75 	bl	80017c8 <__errno>
 80002de:	230c      	movs	r3, #12
 80002e0:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80002e2:	2001      	movs	r0, #1
 80002e4:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80002e6:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80002e8:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80002ea:	e7fc      	b.n	80002e6 <_sbrk+0x26>
 80002ec:	20000084 	.word	0x20000084
 80002f0:	20000978 	.word	0x20000978

080002f4 <_close>:

int _close(int file)
{
	return -1;
}
 80002f4:	2001      	movs	r0, #1
 80002f6:	4240      	negs	r0, r0
 80002f8:	4770      	bx	lr

080002fa <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80002fa:	2380      	movs	r3, #128	; 0x80
 80002fc:	019b      	lsls	r3, r3, #6
	return 0;
}
 80002fe:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8000300:	604b      	str	r3, [r1, #4]
}
 8000302:	4770      	bx	lr

08000304 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000304:	2001      	movs	r0, #1
 8000306:	4770      	bx	lr

08000308 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000308:	2000      	movs	r0, #0
 800030a:	4770      	bx	lr

0800030c <adc_driver_init>:
	
	//ADC INPUT PIN A0 ==>  GPIOA - 0. pin
	
	// Enable GPIOA Clock

	__HAL_RCC_GPIOA_CLK_ENABLE();	
 800030c:	2080      	movs	r0, #128	; 0x80
 800030e:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <adc_driver_init+0xa8>)
 8000310:	0280      	lsls	r0, r0, #10
 8000312:	6959      	ldr	r1, [r3, #20]
{
 8000314:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 8000316:	4301      	orrs	r1, r0
 8000318:	6159      	str	r1, [r3, #20]
 800031a:	695a      	ldr	r2, [r3, #20]

	__HAL_RCC_ADC1_CLK_ENABLE();
	
	// Enable HSI14 Mhz ADC Clock
	
 __HAL_RCC_HSI14ADC_ENABLE();
 800031c:	2604      	movs	r6, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 800031e:	4002      	ands	r2, r0
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000320:	2080      	movs	r0, #128	; 0x80
{
 8000322:	b089      	sub	sp, #36	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 8000324:	9201      	str	r2, [sp, #4]
 8000326:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000328:	6999      	ldr	r1, [r3, #24]
 800032a:	0080      	lsls	r0, r0, #2
 800032c:	4301      	orrs	r1, r0
 800032e:	6199      	str	r1, [r3, #24]
 8000330:	699a      	ldr	r2, [r3, #24]

	// GPIOA - PA0: Select Mode: Analog mode 
	gpio_init.Pin = GPIO_PIN_0;
 8000332:	2701      	movs	r7, #1
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000334:	4002      	ands	r2, r0
 8000336:	9202      	str	r2, [sp, #8]
 8000338:	9a02      	ldr	r2, [sp, #8]
 __HAL_RCC_HSI14ADC_ENABLE();
 800033a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	gpio_init.Mode = GPIO_MODE_ANALOG;
	HAL_GPIO_Init(GPIOA,&gpio_init);
 800033c:	2090      	movs	r0, #144	; 0x90
 __HAL_RCC_HSI14ADC_ENABLE();
 800033e:	43b2      	bics	r2, r6
 8000340:	635a      	str	r2, [r3, #52]	; 0x34
	gpio_init.Mode = GPIO_MODE_ANALOG;
 8000342:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8000344:	a903      	add	r1, sp, #12
 8000346:	05c0      	lsls	r0, r0, #23
	gpio_init.Mode = GPIO_MODE_ANALOG;
 8000348:	9304      	str	r3, [sp, #16]
	gpio_init.Pin = GPIO_PIN_0;
 800034a:	9703      	str	r7, [sp, #12]
	HAL_GPIO_Init(GPIOA,&gpio_init);
 800034c:	f000 fa46 	bl	80007dc <HAL_GPIO_Init>
	
	
	AdcHandle.Instance          = ADC1;
 8000350:	4c19      	ldr	r4, [pc, #100]	; (80003b8 <adc_driver_init+0xac>)
 8000352:	4b1a      	ldr	r3, [pc, #104]	; (80003bc <adc_driver_init+0xb0>)
  
	if (HAL_ADC_DeInit(&AdcHandle) != HAL_OK)
 8000354:	0020      	movs	r0, r4
	AdcHandle.Instance          = ADC1;
 8000356:	6023      	str	r3, [r4, #0]
	if (HAL_ADC_DeInit(&AdcHandle) != HAL_OK)
 8000358:	f001 f878 	bl	800144c <HAL_ADC_DeInit>
  AdcHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;           /* EOC flag picked-up to indicate conversion end */
  AdcHandle.Init.LowPowerAutoPowerOff  = DISABLE;
  AdcHandle.Init.LowPowerAutoWait      = DISABLE;                       /* Auto-delayed conversion feature disabled */
  AdcHandle.Init.ContinuousConvMode    = DISABLE;                        /* Continuous mode enabled (automatic conversion restart after each conversion) */
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
  AdcHandle.Init.ExternalTrigConv      = ADC_SOFTWARE_START;            /* Software start to trig the 1st conversion manually, without external event */
 800035c:	23c2      	movs	r3, #194	; 0xc2
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV1;      		/* Synchronous clock mode, input ADC clock with prscaler 2 */
 800035e:	2500      	movs	r5, #0
  AdcHandle.Init.ExternalTrigConv      = ADC_SOFTWARE_START;            /* Software start to trig the 1st conversion manually, without external event */
 8000360:	33ff      	adds	r3, #255	; 0xff
 8000362:	62a3      	str	r3, [r4, #40]	; 0x28
  AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE; /* Parameter discarded because software trigger chosen */
  AdcHandle.Init.DMAContinuousRequests = DISABLE;                       /* ADC DMA continuous request to match with DMA circular mode */
  AdcHandle.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;      /* DR register is overwritten with the last conversion result in case of overrun */
  AdcHandle.Init.SamplingTimeCommon    = ADC_SAMPLETIME_71CYCLES_5;
 8000364:	3bbc      	subs	r3, #188	; 0xbc
 8000366:	3bff      	subs	r3, #255	; 0xff

  /* 1-  Init ADC */
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8000368:	0020      	movs	r0, r4
  AdcHandle.Init.SamplingTimeCommon    = ADC_SAMPLETIME_71CYCLES_5;
 800036a:	63a3      	str	r3, [r4, #56]	; 0x38
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV1;      		/* Synchronous clock mode, input ADC clock with prscaler 2 */
 800036c:	6065      	str	r5, [r4, #4]
  AdcHandle.Init.Resolution            = ADC_RESOLUTION_12B;            /* 12-bit resolution for converted data */
 800036e:	60a5      	str	r5, [r4, #8]
  AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;           /* Right-alignment for converted data */
 8000370:	60e5      	str	r5, [r4, #12]
  AdcHandle.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;    /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 8000372:	6127      	str	r7, [r4, #16]
  AdcHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;           /* EOC flag picked-up to indicate conversion end */
 8000374:	6166      	str	r6, [r4, #20]
  AdcHandle.Init.LowPowerAutoPowerOff  = DISABLE;
 8000376:	61e5      	str	r5, [r4, #28]
  AdcHandle.Init.LowPowerAutoWait      = DISABLE;                       /* Auto-delayed conversion feature disabled */
 8000378:	61a5      	str	r5, [r4, #24]
  AdcHandle.Init.ContinuousConvMode    = DISABLE;                        /* Continuous mode enabled (automatic conversion restart after each conversion) */
 800037a:	6225      	str	r5, [r4, #32]
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
 800037c:	6265      	str	r5, [r4, #36]	; 0x24
  AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE; /* Parameter discarded because software trigger chosen */
 800037e:	62e5      	str	r5, [r4, #44]	; 0x2c
  AdcHandle.Init.DMAContinuousRequests = DISABLE;                       /* ADC DMA continuous request to match with DMA circular mode */
 8000380:	6325      	str	r5, [r4, #48]	; 0x30
  AdcHandle.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;      /* DR register is overwritten with the last conversion result in case of overrun */
 8000382:	6365      	str	r5, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8000384:	f000 ffba 	bl	80012fc <HAL_ADC_Init>
    //Error_Handler();
  }
  
  
  /* ### - 2 - Start calibration ############################################ */
  if (HAL_ADCEx_Calibration_Start(&AdcHandle) != HAL_OK)
 8000388:	0020      	movs	r0, r4
 800038a:	f001 f9d1 	bl	8001730 <HAL_ADCEx_Calibration_Start>
    //Error_Handler();
  }
  
  /* ### - 3 - Channel configuration ######################################## */
  sConfig.Channel      = ADC_CHANNEL_0;               /* Channel to be converted */
  sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 800038e:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel      = ADC_CHANNEL_0;               /* Channel to be converted */
 8000390:	490b      	ldr	r1, [pc, #44]	; (80003c0 <adc_driver_init+0xb4>)
  sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 8000392:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8000394:	0020      	movs	r0, r4
  sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 8000396:	604b      	str	r3, [r1, #4]
  sConfig.Channel      = ADC_CHANNEL_0;               /* Channel to be converted */
 8000398:	600d      	str	r5, [r1, #0]
  if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 800039a:	f001 f953 	bl	8001644 <HAL_ADC_ConfigChannel>
  {
    //Error_Handler();
  }
	
	    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 800039e:	002a      	movs	r2, r5
 80003a0:	0039      	movs	r1, r7
 80003a2:	200c      	movs	r0, #12
 80003a4:	f000 f9c6 	bl	8000734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80003a8:	200c      	movs	r0, #12
 80003aa:	f000 f9f3 	bl	8000794 <HAL_NVIC_EnableIRQ>
 }
 80003ae:	b009      	add	sp, #36	; 0x24
 80003b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	40021000 	.word	0x40021000
 80003b8:	20000090 	.word	0x20000090
 80003bc:	40012400 	.word	0x40012400
 80003c0:	200000dc 	.word	0x200000dc

080003c4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80003c4:	b510      	push	{r4, lr}
  HAL_ADC_IRQHandler(&AdcHandle);
 80003c6:	4802      	ldr	r0, [pc, #8]	; (80003d0 <ADC1_IRQHandler+0xc>)
 80003c8:	f001 f8cc 	bl	8001564 <HAL_ADC_IRQHandler>
 80003cc:	bd10      	pop	{r4, pc}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	20000090 	.word	0x20000090

080003d4 <button_init>:
#include "stm32f070xb.h"
#include "stm32f0xx_hal.h"


void button_init()
{
 80003d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//BUTTON ==>  GPIOC - 13. pin
	GPIO_InitTypeDef gpio_init;
	
	// Enable Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();	
 80003d6:	2080      	movs	r0, #128	; 0x80
 80003d8:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <button_init+0x34>)
 80003da:	0300      	lsls	r0, r0, #12
 80003dc:	6951      	ldr	r1, [r2, #20]
 80003de:	4301      	orrs	r1, r0
 80003e0:	6151      	str	r1, [r2, #20]
 80003e2:	6953      	ldr	r3, [r2, #20]
	
	gpio_init.Mode = GPIO_MODE_INPUT;
	gpio_init.Pin = GPIO_PIN_13;
 80003e4:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();	
 80003e6:	4003      	ands	r3, r0
 80003e8:	9300      	str	r3, [sp, #0]
 80003ea:	9b00      	ldr	r3, [sp, #0]
	gpio_init.Mode = GPIO_MODE_INPUT;
 80003ec:	2300      	movs	r3, #0
	gpio_init.Pin = GPIO_PIN_13;
 80003ee:	0192      	lsls	r2, r2, #6
	gpio_init.Mode = GPIO_MODE_INPUT;
 80003f0:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_NOPULL;
 80003f2:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_MEDIUM;

  HAL_GPIO_Init(GPIOC,&gpio_init);	
 80003f4:	a901      	add	r1, sp, #4
	gpio_init.Speed = GPIO_SPEED_MEDIUM;
 80003f6:	3301      	adds	r3, #1
  HAL_GPIO_Init(GPIOC,&gpio_init);	
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <button_init+0x38>)
	gpio_init.Pin = GPIO_PIN_13;
 80003fa:	9201      	str	r2, [sp, #4]
	gpio_init.Speed = GPIO_SPEED_MEDIUM;
 80003fc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOC,&gpio_init);	
 80003fe:	f000 f9ed 	bl	80007dc <HAL_GPIO_Init>
	
}
 8000402:	b007      	add	sp, #28
 8000404:	bd00      	pop	{pc}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	40021000 	.word	0x40021000
 800040c:	48000800 	.word	0x48000800

08000410 <user_led_init>:
#include "stm32f070xb.h"
#include "stm32f0xx_hal.h"


void user_led_init()
{
 8000410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//LED2 ==>  GPIOA - 5. pin
	GPIO_InitTypeDef gpio_init;
		
	// Enable Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 8000412:	2080      	movs	r0, #128	; 0x80
 8000414:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <user_led_init+0x34>)
 8000416:	0280      	lsls	r0, r0, #10
 8000418:	6951      	ldr	r1, [r2, #20]
 800041a:	4301      	orrs	r1, r0
 800041c:	6151      	str	r1, [r2, #20]
 800041e:	6953      	ldr	r3, [r2, #20]
	gpio_init.Pin = GPIO_PIN_5;
	gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
	gpio_init.Pull = GPIO_NOPULL;
	gpio_init.Speed = GPIO_SPEED_LOW;
	
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8000420:	a901      	add	r1, sp, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 8000422:	4003      	ands	r3, r0
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	9b00      	ldr	r3, [sp, #0]
	gpio_init.Pin = GPIO_PIN_5;
 8000428:	2320      	movs	r3, #32
	HAL_GPIO_Init(GPIOA,&gpio_init);
 800042a:	2090      	movs	r0, #144	; 0x90
	gpio_init.Pin = GPIO_PIN_5;
 800042c:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800042e:	3b1f      	subs	r3, #31
 8000430:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_NOPULL;
 8000432:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8000434:	05c0      	lsls	r0, r0, #23
	gpio_init.Pull = GPIO_NOPULL;
 8000436:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_LOW;
 8000438:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA,&gpio_init);
 800043a:	f000 f9cf 	bl	80007dc <HAL_GPIO_Init>
}
 800043e:	b007      	add	sp, #28
 8000440:	bd00      	pop	{pc}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	40021000 	.word	0x40021000

08000448 <user_led_toggle>:


void user_led_toggle()
{
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);	
 8000448:	2090      	movs	r0, #144	; 0x90
{
 800044a:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);	
 800044c:	2120      	movs	r1, #32
 800044e:	05c0      	lsls	r0, r0, #23
 8000450:	f000 fa74 	bl	800093c <HAL_GPIO_TogglePin>
}
 8000454:	bd10      	pop	{r4, pc}
	...

08000458 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000458:	b530      	push	{r4, r5, lr}
 800045a:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 800045c:	f000 f940 	bl	80006e0 <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* No HSE Oscillator on Nucleo, Activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue  = RCC_HSICALIBRATION_DEFAULT;  
 8000460:	2310      	movs	r3, #16
 8000462:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000464:	2380      	movs	r3, #128	; 0x80
 8000466:	021b      	lsls	r3, r3, #8
 8000468:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800046e:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000470:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
 8000472:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000474:	035b      	lsls	r3, r3, #13
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8000476:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000478:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
 800047a:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800047e:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8000480:	f000 fa60 	bl	8000944 <HAL_RCC_OscConfig>
 8000484:	2800      	cmp	r0, #0
 8000486:	d000      	beq.n	800048a <main+0x32>
 8000488:	e7fe      	b.n	8000488 <main+0x30>
  {
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800048a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800048c:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800048e:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 8000490:	0029      	movs	r1, r5
 8000492:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000494:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000496:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 8000498:	f000 fc6c 	bl	8000d74 <HAL_RCC_ClockConfig>
 800049c:	2800      	cmp	r0, #0
 800049e:	d000      	beq.n	80004a2 <main+0x4a>
 80004a0:	e7fe      	b.n	80004a0 <main+0x48>
	UART_Init();	
 80004a2:	f000 f871 	bl	8000588 <UART_Init>
	user_led_init();
 80004a6:	f7ff ffb3 	bl	8000410 <user_led_init>
  button_init();
 80004aa:	f7ff ff93 	bl	80003d4 <button_init>
	adc_driver_init();
 80004ae:	f7ff ff2d 	bl	800030c <adc_driver_init>
	HAL_ADC_Start_IT(&AdcHandle);
 80004b2:	480a      	ldr	r0, [pc, #40]	; (80004dc <main+0x84>)
 80004b4:	f001 f816 	bl	80014e4 <HAL_ADC_Start_IT>
			user_led_toggle();
 80004b8:	f7ff ffc6 	bl	8000448 <user_led_toggle>
		if(adc_ready == 1)
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <main+0x88>)
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	2a01      	cmp	r2, #1
 80004c2:	d106      	bne.n	80004d2 <main+0x7a>
			adc_ready = 0;
 80004c4:	2200      	movs	r2, #0
 80004c6:	601a      	str	r2, [r3, #0]
			printf("ADC val == %d\r\n", adc_value);
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <main+0x8c>)
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <main+0x90>)
 80004cc:	6819      	ldr	r1, [r3, #0]
 80004ce:	f001 f9b7 	bl	8001840 <iprintf>
			HAL_Delay(100);			
 80004d2:	2064      	movs	r0, #100	; 0x64
 80004d4:	f000 f922 	bl	800071c <HAL_Delay>
			user_led_toggle();
 80004d8:	e7ee      	b.n	80004b8 <main+0x60>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	20000090 	.word	0x20000090
 80004e0:	200000ec 	.word	0x200000ec
 80004e4:	200000e8 	.word	0x200000e8
 80004e8:	080026dc 	.word	0x080026dc

080004ec <HAL_ADC_ConvCpltCallback>:
{
 80004ec:	b510      	push	{r4, lr}
 80004ee:	0004      	movs	r4, r0
 adc_value = HAL_ADC_GetValue(hadc1);
 80004f0:	f001 f832 	bl	8001558 <HAL_ADC_GetValue>
 adc_ready = 1;
 80004f4:	2201      	movs	r2, #1
 adc_value = HAL_ADC_GetValue(hadc1);
 80004f6:	4b04      	ldr	r3, [pc, #16]	; (8000508 <HAL_ADC_ConvCpltCallback+0x1c>)
 80004f8:	6018      	str	r0, [r3, #0]
 adc_ready = 1;
 80004fa:	4b04      	ldr	r3, [pc, #16]	; (800050c <HAL_ADC_ConvCpltCallback+0x20>)
 HAL_ADC_Start_IT(hadc1); // Re-Start ADC1 under Interrupt
 80004fc:	0020      	movs	r0, r4
 adc_ready = 1;
 80004fe:	601a      	str	r2, [r3, #0]
 HAL_ADC_Start_IT(hadc1); // Re-Start ADC1 under Interrupt
 8000500:	f000 fff0 	bl	80014e4 <HAL_ADC_Start_IT>
}
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	200000e8 	.word	0x200000e8
 800050c:	200000ec 	.word	0x200000ec

08000510 <NMI_Handler>:
 8000510:	4770      	bx	lr

08000512 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000512:	e7fe      	b.n	8000512 <HardFault_Handler>

08000514 <SVC_Handler>:
 8000514:	4770      	bx	lr

08000516 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8000516:	4770      	bx	lr

08000518 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000518:	b510      	push	{r4, lr}
  HAL_IncTick();
 800051a:	f000 f8f1 	bl	8000700 <HAL_IncTick>
}
 800051e:	bd10      	pop	{r4, pc}

08000520 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000520:	2101      	movs	r1, #1
 8000522:	4b13      	ldr	r3, [pc, #76]	; (8000570 <SystemInit+0x50>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000524:	4813      	ldr	r0, [pc, #76]	; (8000574 <SystemInit+0x54>)
  RCC->CR |= (uint32_t)0x00000001U;
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	430a      	orrs	r2, r1
 800052a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800052c:	685a      	ldr	r2, [r3, #4]
 800052e:	4002      	ands	r2, r0
 8000530:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000532:	681a      	ldr	r2, [r3, #0]
 8000534:	4810      	ldr	r0, [pc, #64]	; (8000578 <SystemInit+0x58>)
 8000536:	4002      	ands	r2, r0
 8000538:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	480f      	ldr	r0, [pc, #60]	; (800057c <SystemInit+0x5c>)
 800053e:	4002      	ands	r2, r0
 8000540:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000542:	685a      	ldr	r2, [r3, #4]
 8000544:	480e      	ldr	r0, [pc, #56]	; (8000580 <SystemInit+0x60>)
 8000546:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000548:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800054a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800054c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800054e:	4382      	bics	r2, r0
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
  /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 8000552:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <SystemInit+0x64>)
 8000556:	4002      	ands	r2, r0
 8000558:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set default USB clock to PLLCLK, since there is no HSI48 */
  RCC->CFGR3 |= (uint32_t)0x00000080U;  
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800055e:	4302      	orrs	r2, r0
 8000560:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000564:	438a      	bics	r2, r1
 8000566:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]

}
 800056c:	4770      	bx	lr
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	40021000 	.word	0x40021000
 8000574:	08ffb80c 	.word	0x08ffb80c
 8000578:	fef6ffff 	.word	0xfef6ffff
 800057c:	fffbffff 	.word	0xfffbffff
 8000580:	ffc0ffff 	.word	0xffc0ffff
 8000584:	fffffe6c 	.word	0xfffffe6c

08000588 <UART_Init>:
	
GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */  
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	4b29      	ldr	r3, [pc, #164]	; (8000630 <UART_Init+0xa8>)
{
 800058c:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	6959      	ldr	r1, [r3, #20]
 8000590:	0292      	lsls	r2, r2, #10
 8000592:	4311      	orrs	r1, r2
 8000594:	6159      	str	r1, [r3, #20]
 8000596:	6959      	ldr	r1, [r3, #20]
{
 8000598:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4011      	ands	r1, r2
 800059c:	9101      	str	r1, [sp, #4]
 800059e:	9901      	ldr	r1, [sp, #4]

  /* Enable USARTx clock */
  __HAL_RCC_USART2_CLK_ENABLE(); 
 80005a0:	69d9      	ldr	r1, [r3, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
  
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_USART2_CLK_ENABLE(); 
 80005a4:	4311      	orrs	r1, r2
 80005a6:	61d9      	str	r1, [r3, #28]
 80005a8:	69db      	ldr	r3, [r3, #28]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80005aa:	2501      	movs	r5, #1
  __HAL_RCC_USART2_CLK_ENABLE(); 
 80005ac:	401a      	ands	r2, r3
 80005ae:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80005b0:	2602      	movs	r6, #2
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80005b2:	2403      	movs	r4, #3
  __HAL_RCC_USART2_CLK_ENABLE(); 
 80005b4:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin       = GPIO_PIN_2;
 80005b6:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	a903      	add	r1, sp, #12
 80005ba:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin       = GPIO_PIN_2;
 80005bc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80005be:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80005c0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80005c2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005c4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c6:	f000 f909 	bl	80007dc <HAL_GPIO_Init>
	
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ca:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005cc:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ce:	05c0      	lsls	r0, r0, #23
 80005d0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80005d2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80005d4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80005d6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80005d8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005da:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f000 f8fe 	bl	80007dc <HAL_GPIO_Init>
      - Parity = None
      - BaudRate = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USART2;
	
  UartHandle.Init.BaudRate   = 9600;
 80005e0:	2396      	movs	r3, #150	; 0x96
  UartHandle.Instance        = USART2;
 80005e2:	4c14      	ldr	r4, [pc, #80]	; (8000634 <UART_Init+0xac>)
  UartHandle.Init.BaudRate   = 9600;
 80005e4:	019b      	lsls	r3, r3, #6
 80005e6:	6063      	str	r3, [r4, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
  UartHandle.Init.Parity     = UART_PARITY_NONE;
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80005e8:	220c      	movs	r2, #12
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	2300      	movs	r3, #0
  UartHandle.Instance        = USART2;
 80005ec:	4e12      	ldr	r6, [pc, #72]	; (8000638 <UART_Init+0xb0>)
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; 
	
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80005ee:	0020      	movs	r0, r4
  UartHandle.Instance        = USART2;
 80005f0:	6026      	str	r6, [r4, #0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80005f2:	60a3      	str	r3, [r4, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80005f4:	60e3      	str	r3, [r4, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80005f6:	6123      	str	r3, [r4, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80005f8:	61a3      	str	r3, [r4, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80005fa:	6162      	str	r2, [r4, #20]
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; 
 80005fc:	6263      	str	r3, [r4, #36]	; 0x24
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80005fe:	f000 fc67 	bl	8000ed0 <HAL_UART_DeInit>
 8000602:	2800      	cmp	r0, #0
 8000604:	d000      	beq.n	8000608 <UART_Init+0x80>
 8000606:	e7fe      	b.n	8000606 <UART_Init+0x7e>
  {
    //ERROR
		UART_Error_Handler();
  }  
	
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8000608:	0020      	movs	r0, r4
 800060a:	f000 fd8b 	bl	8001124 <HAL_UART_Init>
 800060e:	1e01      	subs	r1, r0, #0
 8000610:	d000      	beq.n	8000614 <UART_Init+0x8c>
 8000612:	e7fe      	b.n	8000612 <UART_Init+0x8a>
		//ERROR
    UART_Error_Handler();
  }
	
/* 4- Enable UART Receive Data Register Not Empty */
   SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8000614:	2320      	movs	r3, #32
 8000616:	6832      	ldr	r2, [r6, #0]

	
	/* 5 - Enable UART Interrupt in NVIC */
	
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8000618:	201c      	movs	r0, #28
   SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 800061a:	4313      	orrs	r3, r2
 800061c:	6033      	str	r3, [r6, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 800061e:	002a      	movs	r2, r5
 8000620:	f000 f888 	bl	8000734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000624:	201c      	movs	r0, #28
 8000626:	f000 f8b5 	bl	8000794 <HAL_NVIC_EnableIRQ>
}
 800062a:	b008      	add	sp, #32
 800062c:	bd70      	pop	{r4, r5, r6, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40021000 	.word	0x40021000
 8000634:	200000f0 	.word	0x200000f0
 8000638:	40004400 	.word	0x40004400

0800063c <USART2_IRQHandler>:
  uint32_t control_reg1 = USART2->CR1;
  uint32_t rx_data = 0;
	
	
    /* UART in mode Receiver */
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 800063c:	2120      	movs	r1, #32
  uint32_t isrflags = USART2->ISR;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <USART2_IRQHandler+0x6c>)
{  
 8000640:	b530      	push	{r4, r5, lr}
  uint32_t isrflags = USART2->ISR;
 8000642:	69dc      	ldr	r4, [r3, #28]
 8000644:	0018      	movs	r0, r3
  uint32_t control_reg1 = USART2->CR1;
 8000646:	681a      	ldr	r2, [r3, #0]
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 8000648:	420c      	tst	r4, r1
 800064a:	d014      	beq.n	8000676 <USART2_IRQHandler+0x3a>
 800064c:	420a      	tst	r2, r1
 800064e:	d012      	beq.n	8000676 <USART2_IRQHandler+0x3a>
    {
			rx_data = (uint16_t) USART2->RDR;
			
			/* Read one byte from the receive data register */ 
			
			UART_BufferRX.buffer[UART_BufferRX.head_pointer] = rx_data;
 8000650:	2280      	movs	r2, #128	; 0x80
			rx_data = (uint16_t) USART2->RDR;
 8000652:	8c98      	ldrh	r0, [r3, #36]	; 0x24
			UART_BufferRX.buffer[UART_BufferRX.head_pointer] = rx_data;
 8000654:	4b15      	ldr	r3, [pc, #84]	; (80006ac <USART2_IRQHandler+0x70>)
 8000656:	00d2      	lsls	r2, r2, #3
 8000658:	5899      	ldr	r1, [r3, r2]
			rx_data = (uint16_t) USART2->RDR;
 800065a:	b280      	uxth	r0, r0
			UART_BufferRX.buffer[UART_BufferRX.head_pointer] = rx_data;
 800065c:	0089      	lsls	r1, r1, #2
 800065e:	50c8      	str	r0, [r1, r3]
			
			UART_BufferRX.head_pointer = UART_BufferRX.head_pointer + 1;
 8000660:	5899      	ldr	r1, [r3, r2]
 8000662:	3101      	adds	r1, #1
 8000664:	5099      	str	r1, [r3, r2]
		if(UART_BufferTX.head_pointer != UART_BufferTX.tail_pointer)
		{
			// Send one byte from Transmit buffer
			USART2->TDR = UART_BufferTX.buffer[UART_BufferTX.tail_pointer++];
			
			if(UART_BufferTX.tail_pointer == BUFFER_SIZE)
 8000666:	2180      	movs	r1, #128	; 0x80
 8000668:	5898      	ldr	r0, [r3, r2]
 800066a:	0049      	lsls	r1, r1, #1
 800066c:	4288      	cmp	r0, r1
 800066e:	d101      	bne.n	8000674 <USART2_IRQHandler+0x38>
			{
				UART_BufferTX.tail_pointer = 0;
 8000670:	2100      	movs	r1, #0
 8000672:	5099      	str	r1, [r3, r2]
		}			
		
    return;
  }
	
}
 8000674:	bd30      	pop	{r4, r5, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((control_reg1 & USART_CR1_TXEIE) != RESET))
 8000676:	2180      	movs	r1, #128	; 0x80
 8000678:	420c      	tst	r4, r1
 800067a:	d0fb      	beq.n	8000674 <USART2_IRQHandler+0x38>
 800067c:	420a      	tst	r2, r1
 800067e:	d0f9      	beq.n	8000674 <USART2_IRQHandler+0x38>
		if(UART_BufferTX.head_pointer != UART_BufferTX.tail_pointer)
 8000680:	2280      	movs	r2, #128	; 0x80
 8000682:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <USART2_IRQHandler+0x74>)
 8000684:	00d2      	lsls	r2, r2, #3
 8000686:	589d      	ldr	r5, [r3, r2]
 8000688:	4a0a      	ldr	r2, [pc, #40]	; (80006b4 <USART2_IRQHandler+0x78>)
 800068a:	589c      	ldr	r4, [r3, r2]
 800068c:	42a5      	cmp	r5, r4
 800068e:	d007      	beq.n	80006a0 <USART2_IRQHandler+0x64>
			USART2->TDR = UART_BufferTX.buffer[UART_BufferTX.tail_pointer++];
 8000690:	5899      	ldr	r1, [r3, r2]
 8000692:	1c4c      	adds	r4, r1, #1
 8000694:	509c      	str	r4, [r3, r2]
 8000696:	0089      	lsls	r1, r1, #2
 8000698:	58c9      	ldr	r1, [r1, r3]
 800069a:	b289      	uxth	r1, r1
 800069c:	8501      	strh	r1, [r0, #40]	; 0x28
 800069e:	e7e2      	b.n	8000666 <USART2_IRQHandler+0x2a>
      CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
 80006a0:	6803      	ldr	r3, [r0, #0]
 80006a2:	438b      	bics	r3, r1
 80006a4:	6003      	str	r3, [r0, #0]
 80006a6:	e7e5      	b.n	8000674 <USART2_IRQHandler+0x38>
 80006a8:	40004400 	.word	0x40004400
 80006ac:	20000160 	.word	0x20000160
 80006b0:	20000568 	.word	0x20000568
 80006b4:	00000404 	.word	0x00000404

080006b8 <HAL_MspInit>:
 80006b8:	4770      	bx	lr

080006ba <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ba:	b510      	push	{r4, lr}
 80006bc:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80006be:	f000 fbef 	bl	8000ea0 <HAL_RCC_GetHCLKFreq>
 80006c2:	21fa      	movs	r1, #250	; 0xfa
 80006c4:	0089      	lsls	r1, r1, #2
 80006c6:	f7ff fd29 	bl	800011c <__udivsi3>
 80006ca:	f000 f86d 	bl	80007a8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80006ce:	2001      	movs	r0, #1
 80006d0:	2200      	movs	r2, #0
 80006d2:	0021      	movs	r1, r4
 80006d4:	4240      	negs	r0, r0
 80006d6:	f000 f82d 	bl	8000734 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80006da:	2000      	movs	r0, #0
 80006dc:	bd10      	pop	{r4, pc}
	...

080006e0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e0:	2310      	movs	r3, #16
 80006e2:	4a06      	ldr	r2, [pc, #24]	; (80006fc <HAL_Init+0x1c>)
{
 80006e4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006e6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80006e8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006ea:	430b      	orrs	r3, r1
 80006ec:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ee:	f7ff ffe4 	bl	80006ba <HAL_InitTick>
  HAL_MspInit();
 80006f2:	f7ff ffe1 	bl	80006b8 <HAL_MspInit>
}
 80006f6:	2000      	movs	r0, #0
 80006f8:	bd10      	pop	{r4, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	40022000 	.word	0x40022000

08000700 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000700:	4a02      	ldr	r2, [pc, #8]	; (800070c <HAL_IncTick+0xc>)
 8000702:	6813      	ldr	r3, [r2, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	4770      	bx	lr
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	20000970 	.word	0x20000970

08000710 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000710:	4b01      	ldr	r3, [pc, #4]	; (8000718 <HAL_GetTick+0x8>)
 8000712:	6818      	ldr	r0, [r3, #0]
}
 8000714:	4770      	bx	lr
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	20000970 	.word	0x20000970

0800071c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800071c:	b513      	push	{r0, r1, r4, lr}
 800071e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000720:	f7ff fff6 	bl	8000710 <HAL_GetTick>
 8000724:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000726:	f7ff fff3 	bl	8000710 <HAL_GetTick>
 800072a:	9b01      	ldr	r3, [sp, #4]
 800072c:	1b00      	subs	r0, r0, r4
 800072e:	4298      	cmp	r0, r3
 8000730:	d3f9      	bcc.n	8000726 <HAL_Delay+0xa>
  {
  }
}
 8000732:	bd13      	pop	{r0, r1, r4, pc}

08000734 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000738:	2800      	cmp	r0, #0
 800073a:	da14      	bge.n	8000766 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800073c:	230f      	movs	r3, #15
 800073e:	b2c0      	uxtb	r0, r0
 8000740:	4003      	ands	r3, r0
 8000742:	3b08      	subs	r3, #8
 8000744:	4a11      	ldr	r2, [pc, #68]	; (800078c <HAL_NVIC_SetPriority+0x58>)
 8000746:	089b      	lsrs	r3, r3, #2
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	189b      	adds	r3, r3, r2
 800074c:	2203      	movs	r2, #3
 800074e:	4010      	ands	r0, r2
 8000750:	4090      	lsls	r0, r2
 8000752:	32fc      	adds	r2, #252	; 0xfc
 8000754:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000756:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000758:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800075a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800075c:	69dc      	ldr	r4, [r3, #28]
 800075e:	43ac      	bics	r4, r5
 8000760:	4321      	orrs	r1, r4
 8000762:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000764:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000766:	2503      	movs	r5, #3
 8000768:	0883      	lsrs	r3, r0, #2
 800076a:	4028      	ands	r0, r5
 800076c:	40a8      	lsls	r0, r5
 800076e:	35fc      	adds	r5, #252	; 0xfc
 8000770:	002e      	movs	r6, r5
 8000772:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_NVIC_SetPriority+0x5c>)
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	189b      	adds	r3, r3, r2
 8000778:	22c0      	movs	r2, #192	; 0xc0
 800077a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800077c:	4029      	ands	r1, r5
 800077e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000780:	0092      	lsls	r2, r2, #2
 8000782:	589c      	ldr	r4, [r3, r2]
 8000784:	43b4      	bics	r4, r6
 8000786:	4321      	orrs	r1, r4
 8000788:	5099      	str	r1, [r3, r2]
 800078a:	e7eb      	b.n	8000764 <HAL_NVIC_SetPriority+0x30>
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	e000e100 	.word	0xe000e100

08000794 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000794:	231f      	movs	r3, #31
 8000796:	4018      	ands	r0, r3
 8000798:	3b1e      	subs	r3, #30
 800079a:	4083      	lsls	r3, r0
 800079c:	4a01      	ldr	r2, [pc, #4]	; (80007a4 <HAL_NVIC_EnableIRQ+0x10>)
 800079e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80007a0:	4770      	bx	lr
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a8:	4a09      	ldr	r2, [pc, #36]	; (80007d0 <HAL_SYSTICK_Config+0x28>)
 80007aa:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ac:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d80d      	bhi.n	80007ce <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b2:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b4:	4a07      	ldr	r2, [pc, #28]	; (80007d4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007b6:	4808      	ldr	r0, [pc, #32]	; (80007d8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007b8:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ba:	6a03      	ldr	r3, [r0, #32]
 80007bc:	0609      	lsls	r1, r1, #24
 80007be:	021b      	lsls	r3, r3, #8
 80007c0:	0a1b      	lsrs	r3, r3, #8
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c8:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ca:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007cc:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007ce:	4770      	bx	lr
 80007d0:	00ffffff 	.word	0x00ffffff
 80007d4:	e000e010 	.word	0xe000e010
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007de:	680b      	ldr	r3, [r1, #0]
{ 
 80007e0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007e2:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80007e4:	2300      	movs	r3, #0
{ 
 80007e6:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007e8:	9a02      	ldr	r2, [sp, #8]
 80007ea:	40da      	lsrs	r2, r3
 80007ec:	d101      	bne.n	80007f2 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80007ee:	b007      	add	sp, #28
 80007f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007f2:	2201      	movs	r2, #1
 80007f4:	409a      	lsls	r2, r3
 80007f6:	9203      	str	r2, [sp, #12]
 80007f8:	9903      	ldr	r1, [sp, #12]
 80007fa:	9a02      	ldr	r2, [sp, #8]
 80007fc:	400a      	ands	r2, r1
 80007fe:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000800:	d100      	bne.n	8000804 <HAL_GPIO_Init+0x28>
 8000802:	e08c      	b.n	800091e <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000804:	9a01      	ldr	r2, [sp, #4]
 8000806:	2110      	movs	r1, #16
 8000808:	6852      	ldr	r2, [r2, #4]
 800080a:	0016      	movs	r6, r2
 800080c:	438e      	bics	r6, r1
 800080e:	2e02      	cmp	r6, #2
 8000810:	d10e      	bne.n	8000830 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000812:	2507      	movs	r5, #7
 8000814:	401d      	ands	r5, r3
 8000816:	00ad      	lsls	r5, r5, #2
 8000818:	3901      	subs	r1, #1
 800081a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 800081c:	08dc      	lsrs	r4, r3, #3
 800081e:	00a4      	lsls	r4, r4, #2
 8000820:	1904      	adds	r4, r0, r4
 8000822:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000824:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000826:	9901      	ldr	r1, [sp, #4]
 8000828:	6909      	ldr	r1, [r1, #16]
 800082a:	40a9      	lsls	r1, r5
 800082c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800082e:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000830:	2403      	movs	r4, #3
 8000832:	005f      	lsls	r7, r3, #1
 8000834:	40bc      	lsls	r4, r7
 8000836:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000838:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083a:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800083c:	4025      	ands	r5, r4
 800083e:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000840:	2503      	movs	r5, #3
 8000842:	4015      	ands	r5, r2
 8000844:	40bd      	lsls	r5, r7
 8000846:	4661      	mov	r1, ip
 8000848:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800084a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084c:	2e01      	cmp	r6, #1
 800084e:	d80f      	bhi.n	8000870 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000850:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000852:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000854:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000856:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000858:	40bd      	lsls	r5, r7
 800085a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800085c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800085e:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000860:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000862:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000864:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000866:	2101      	movs	r1, #1
 8000868:	400d      	ands	r5, r1
 800086a:	409d      	lsls	r5, r3
 800086c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800086e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000870:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000872:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000874:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000876:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000878:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800087a:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800087c:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800087e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000880:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000882:	420a      	tst	r2, r1
 8000884:	d04b      	beq.n	800091e <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	2101      	movs	r1, #1
 8000888:	4c26      	ldr	r4, [pc, #152]	; (8000924 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800088a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800088e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000890:	430d      	orrs	r5, r1
 8000892:	61a5      	str	r5, [r4, #24]
 8000894:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000896:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000898:	400c      	ands	r4, r1
 800089a:	9405      	str	r4, [sp, #20]
 800089c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800089e:	240f      	movs	r4, #15
 80008a0:	4921      	ldr	r1, [pc, #132]	; (8000928 <HAL_GPIO_Init+0x14c>)
 80008a2:	00ad      	lsls	r5, r5, #2
 80008a4:	00b6      	lsls	r6, r6, #2
 80008a6:	186d      	adds	r5, r5, r1
 80008a8:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008aa:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 80008ac:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ae:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80008b0:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008b2:	2400      	movs	r4, #0
 80008b4:	4288      	cmp	r0, r1
 80008b6:	d00c      	beq.n	80008d2 <HAL_GPIO_Init+0xf6>
 80008b8:	491c      	ldr	r1, [pc, #112]	; (800092c <HAL_GPIO_Init+0x150>)
 80008ba:	3401      	adds	r4, #1
 80008bc:	4288      	cmp	r0, r1
 80008be:	d008      	beq.n	80008d2 <HAL_GPIO_Init+0xf6>
 80008c0:	491b      	ldr	r1, [pc, #108]	; (8000930 <HAL_GPIO_Init+0x154>)
 80008c2:	3401      	adds	r4, #1
 80008c4:	4288      	cmp	r0, r1
 80008c6:	d004      	beq.n	80008d2 <HAL_GPIO_Init+0xf6>
 80008c8:	491a      	ldr	r1, [pc, #104]	; (8000934 <HAL_GPIO_Init+0x158>)
 80008ca:	3403      	adds	r4, #3
 80008cc:	4288      	cmp	r0, r1
 80008ce:	d100      	bne.n	80008d2 <HAL_GPIO_Init+0xf6>
 80008d0:	3c02      	subs	r4, #2
 80008d2:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008d4:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d6:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80008d8:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80008da:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80008dc:	4c16      	ldr	r4, [pc, #88]	; (8000938 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008de:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80008e0:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80008e2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008e4:	03d1      	lsls	r1, r2, #15
 80008e6:	d401      	bmi.n	80008ec <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008e8:	003e      	movs	r6, r7
 80008ea:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80008ec:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80008ee:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80008f0:	9e00      	ldr	r6, [sp, #0]
 80008f2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008f4:	0391      	lsls	r1, r2, #14
 80008f6:	d401      	bmi.n	80008fc <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80008f8:	003e      	movs	r6, r7
 80008fa:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80008fc:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80008fe:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8000900:	9e00      	ldr	r6, [sp, #0]
 8000902:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000904:	02d1      	lsls	r1, r2, #11
 8000906:	d401      	bmi.n	800090c <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000908:	003e      	movs	r6, r7
 800090a:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800090c:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800090e:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8000910:	9f00      	ldr	r7, [sp, #0]
 8000912:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000914:	0292      	lsls	r2, r2, #10
 8000916:	d401      	bmi.n	800091c <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000918:	402e      	ands	r6, r5
 800091a:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800091c:	60e7      	str	r7, [r4, #12]
    position++;
 800091e:	3301      	adds	r3, #1
 8000920:	e762      	b.n	80007e8 <HAL_GPIO_Init+0xc>
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	40021000 	.word	0x40021000
 8000928:	40010000 	.word	0x40010000
 800092c:	48000400 	.word	0x48000400
 8000930:	48000800 	.word	0x48000800
 8000934:	48000c00 	.word	0x48000c00
 8000938:	40010400 	.word	0x40010400

0800093c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800093c:	6943      	ldr	r3, [r0, #20]
 800093e:	4059      	eors	r1, r3
 8000940:	6141      	str	r1, [r0, #20]
}
 8000942:	4770      	bx	lr

08000944 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000946:	6803      	ldr	r3, [r0, #0]
{
 8000948:	b085      	sub	sp, #20
 800094a:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800094c:	07db      	lsls	r3, r3, #31
 800094e:	d42f      	bmi.n	80009b0 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	079b      	lsls	r3, r3, #30
 8000954:	d500      	bpl.n	8000958 <HAL_RCC_OscConfig+0x14>
 8000956:	e086      	b.n	8000a66 <HAL_RCC_OscConfig+0x122>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000958:	682b      	ldr	r3, [r5, #0]
 800095a:	071b      	lsls	r3, r3, #28
 800095c:	d500      	bpl.n	8000960 <HAL_RCC_OscConfig+0x1c>
 800095e:	e0c6      	b.n	8000aee <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	075b      	lsls	r3, r3, #29
 8000964:	d500      	bpl.n	8000968 <HAL_RCC_OscConfig+0x24>
 8000966:	e0e9      	b.n	8000b3c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	06db      	lsls	r3, r3, #27
 800096c:	d51a      	bpl.n	80009a4 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800096e:	696a      	ldr	r2, [r5, #20]
 8000970:	4cba      	ldr	r4, [pc, #744]	; (8000c5c <HAL_RCC_OscConfig+0x318>)
 8000972:	2304      	movs	r3, #4
 8000974:	2a01      	cmp	r2, #1
 8000976:	d000      	beq.n	800097a <HAL_RCC_OscConfig+0x36>
 8000978:	e155      	b.n	8000c26 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800097a:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800097c:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800097e:	430b      	orrs	r3, r1
 8000980:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000984:	431a      	orrs	r2, r3
 8000986:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000988:	f7ff fec2 	bl	8000710 <HAL_GetTick>
 800098c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800098e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000990:	4233      	tst	r3, r6
 8000992:	d100      	bne.n	8000996 <HAL_RCC_OscConfig+0x52>
 8000994:	e140      	b.n	8000c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000996:	21f8      	movs	r1, #248	; 0xf8
 8000998:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800099a:	69ab      	ldr	r3, [r5, #24]
 800099c:	438a      	bics	r2, r1
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009a4:	6a29      	ldr	r1, [r5, #32]
 80009a6:	2900      	cmp	r1, #0
 80009a8:	d000      	beq.n	80009ac <HAL_RCC_OscConfig+0x68>
 80009aa:	e163      	b.n	8000c74 <HAL_RCC_OscConfig+0x330>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009ac:	2000      	movs	r0, #0
 80009ae:	e018      	b.n	80009e2 <HAL_RCC_OscConfig+0x9e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009b0:	210c      	movs	r1, #12
 80009b2:	4caa      	ldr	r4, [pc, #680]	; (8000c5c <HAL_RCC_OscConfig+0x318>)
 80009b4:	6862      	ldr	r2, [r4, #4]
 80009b6:	400a      	ands	r2, r1
 80009b8:	2a04      	cmp	r2, #4
 80009ba:	d00b      	beq.n	80009d4 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009bc:	6863      	ldr	r3, [r4, #4]
 80009be:	400b      	ands	r3, r1
 80009c0:	2b08      	cmp	r3, #8
 80009c2:	d110      	bne.n	80009e6 <HAL_RCC_OscConfig+0xa2>
 80009c4:	22c0      	movs	r2, #192	; 0xc0
 80009c6:	6863      	ldr	r3, [r4, #4]
 80009c8:	0252      	lsls	r2, r2, #9
 80009ca:	4013      	ands	r3, r2
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	0252      	lsls	r2, r2, #9
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d108      	bne.n	80009e6 <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009d4:	6823      	ldr	r3, [r4, #0]
 80009d6:	039b      	lsls	r3, r3, #14
 80009d8:	d5ba      	bpl.n	8000950 <HAL_RCC_OscConfig+0xc>
 80009da:	686b      	ldr	r3, [r5, #4]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1b7      	bne.n	8000950 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009e0:	2001      	movs	r0, #1
}
 80009e2:	b005      	add	sp, #20
 80009e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e6:	686b      	ldr	r3, [r5, #4]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d113      	bne.n	8000a14 <HAL_RCC_OscConfig+0xd0>
 80009ec:	2380      	movs	r3, #128	; 0x80
 80009ee:	6822      	ldr	r2, [r4, #0]
 80009f0:	025b      	lsls	r3, r3, #9
 80009f2:	4313      	orrs	r3, r2
 80009f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009f6:	f7ff fe8b 	bl	8000710 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009fa:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80009fc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009fe:	02b6      	lsls	r6, r6, #10
 8000a00:	6823      	ldr	r3, [r4, #0]
 8000a02:	4233      	tst	r3, r6
 8000a04:	d1a4      	bne.n	8000950 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a06:	f7ff fe83 	bl	8000710 <HAL_GetTick>
 8000a0a:	1bc0      	subs	r0, r0, r7
 8000a0c:	2864      	cmp	r0, #100	; 0x64
 8000a0e:	d9f7      	bls.n	8000a00 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8000a10:	2003      	movs	r0, #3
 8000a12:	e7e6      	b.n	80009e2 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d116      	bne.n	8000a46 <HAL_RCC_OscConfig+0x102>
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	4a91      	ldr	r2, [pc, #580]	; (8000c60 <HAL_RCC_OscConfig+0x31c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a1c:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a1e:	4013      	ands	r3, r2
 8000a20:	6023      	str	r3, [r4, #0]
 8000a22:	6823      	ldr	r3, [r4, #0]
 8000a24:	4a8f      	ldr	r2, [pc, #572]	; (8000c64 <HAL_RCC_OscConfig+0x320>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a26:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a28:	4013      	ands	r3, r2
 8000a2a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a2c:	f7ff fe70 	bl	8000710 <HAL_GetTick>
 8000a30:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	4233      	tst	r3, r6
 8000a36:	d100      	bne.n	8000a3a <HAL_RCC_OscConfig+0xf6>
 8000a38:	e78a      	b.n	8000950 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a3a:	f7ff fe69 	bl	8000710 <HAL_GetTick>
 8000a3e:	1bc0      	subs	r0, r0, r7
 8000a40:	2864      	cmp	r0, #100	; 0x64
 8000a42:	d9f6      	bls.n	8000a32 <HAL_RCC_OscConfig+0xee>
 8000a44:	e7e4      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a46:	2b05      	cmp	r3, #5
 8000a48:	d105      	bne.n	8000a56 <HAL_RCC_OscConfig+0x112>
 8000a4a:	2380      	movs	r3, #128	; 0x80
 8000a4c:	6822      	ldr	r2, [r4, #0]
 8000a4e:	02db      	lsls	r3, r3, #11
 8000a50:	4313      	orrs	r3, r2
 8000a52:	6023      	str	r3, [r4, #0]
 8000a54:	e7ca      	b.n	80009ec <HAL_RCC_OscConfig+0xa8>
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	4a81      	ldr	r2, [pc, #516]	; (8000c60 <HAL_RCC_OscConfig+0x31c>)
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	6023      	str	r3, [r4, #0]
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	4a80      	ldr	r2, [pc, #512]	; (8000c64 <HAL_RCC_OscConfig+0x320>)
 8000a62:	4013      	ands	r3, r2
 8000a64:	e7c6      	b.n	80009f4 <HAL_RCC_OscConfig+0xb0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a66:	220c      	movs	r2, #12
 8000a68:	4c7c      	ldr	r4, [pc, #496]	; (8000c5c <HAL_RCC_OscConfig+0x318>)
 8000a6a:	6863      	ldr	r3, [r4, #4]
 8000a6c:	4213      	tst	r3, r2
 8000a6e:	d00b      	beq.n	8000a88 <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a70:	6863      	ldr	r3, [r4, #4]
 8000a72:	4013      	ands	r3, r2
 8000a74:	2b08      	cmp	r3, #8
 8000a76:	d115      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x160>
 8000a78:	22c0      	movs	r2, #192	; 0xc0
 8000a7a:	6863      	ldr	r3, [r4, #4]
 8000a7c:	0252      	lsls	r2, r2, #9
 8000a7e:	4013      	ands	r3, r2
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	0212      	lsls	r2, r2, #8
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d10d      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	079b      	lsls	r3, r3, #30
 8000a8c:	d502      	bpl.n	8000a94 <HAL_RCC_OscConfig+0x150>
 8000a8e:	68eb      	ldr	r3, [r5, #12]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d1a5      	bne.n	80009e0 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a94:	21f8      	movs	r1, #248	; 0xf8
 8000a96:	6822      	ldr	r2, [r4, #0]
 8000a98:	692b      	ldr	r3, [r5, #16]
 8000a9a:	438a      	bics	r2, r1
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	6023      	str	r3, [r4, #0]
 8000aa2:	e759      	b.n	8000958 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000aa4:	68ea      	ldr	r2, [r5, #12]
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	2a00      	cmp	r2, #0
 8000aaa:	d00f      	beq.n	8000acc <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_ENABLE();
 8000aac:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aae:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000ab4:	f7ff fe2c 	bl	8000710 <HAL_GetTick>
 8000ab8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000aba:	6823      	ldr	r3, [r4, #0]
 8000abc:	4233      	tst	r3, r6
 8000abe:	d1e9      	bne.n	8000a94 <HAL_RCC_OscConfig+0x150>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ac0:	f7ff fe26 	bl	8000710 <HAL_GetTick>
 8000ac4:	1bc0      	subs	r0, r0, r7
 8000ac6:	2802      	cmp	r0, #2
 8000ac8:	d9f7      	bls.n	8000aba <HAL_RCC_OscConfig+0x176>
 8000aca:	e7a1      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_DISABLE();
 8000acc:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ace:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000ad0:	439a      	bics	r2, r3
 8000ad2:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000ad4:	f7ff fe1c 	bl	8000710 <HAL_GetTick>
 8000ad8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	4233      	tst	r3, r6
 8000ade:	d100      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x19e>
 8000ae0:	e73a      	b.n	8000958 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ae2:	f7ff fe15 	bl	8000710 <HAL_GetTick>
 8000ae6:	1bc0      	subs	r0, r0, r7
 8000ae8:	2802      	cmp	r0, #2
 8000aea:	d9f6      	bls.n	8000ada <HAL_RCC_OscConfig+0x196>
 8000aec:	e790      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000aee:	69ea      	ldr	r2, [r5, #28]
 8000af0:	2301      	movs	r3, #1
 8000af2:	4c5a      	ldr	r4, [pc, #360]	; (8000c5c <HAL_RCC_OscConfig+0x318>)
 8000af4:	2a00      	cmp	r2, #0
 8000af6:	d010      	beq.n	8000b1a <HAL_RCC_OscConfig+0x1d6>
      __HAL_RCC_LSI_ENABLE();
 8000af8:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000afa:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000afc:	4313      	orrs	r3, r2
 8000afe:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b00:	f7ff fe06 	bl	8000710 <HAL_GetTick>
 8000b04:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b08:	4233      	tst	r3, r6
 8000b0a:	d000      	beq.n	8000b0e <HAL_RCC_OscConfig+0x1ca>
 8000b0c:	e728      	b.n	8000960 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b0e:	f7ff fdff 	bl	8000710 <HAL_GetTick>
 8000b12:	1bc0      	subs	r0, r0, r7
 8000b14:	2802      	cmp	r0, #2
 8000b16:	d9f6      	bls.n	8000b06 <HAL_RCC_OscConfig+0x1c2>
 8000b18:	e77a      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_LSI_DISABLE();
 8000b1a:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b1c:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000b1e:	439a      	bics	r2, r3
 8000b20:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000b22:	f7ff fdf5 	bl	8000710 <HAL_GetTick>
 8000b26:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b2a:	4233      	tst	r3, r6
 8000b2c:	d100      	bne.n	8000b30 <HAL_RCC_OscConfig+0x1ec>
 8000b2e:	e717      	b.n	8000960 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b30:	f7ff fdee 	bl	8000710 <HAL_GetTick>
 8000b34:	1bc0      	subs	r0, r0, r7
 8000b36:	2802      	cmp	r0, #2
 8000b38:	d9f6      	bls.n	8000b28 <HAL_RCC_OscConfig+0x1e4>
 8000b3a:	e769      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b3c:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000b3e:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b40:	4c46      	ldr	r4, [pc, #280]	; (8000c5c <HAL_RCC_OscConfig+0x318>)
 8000b42:	0552      	lsls	r2, r2, #21
 8000b44:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000b46:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b48:	4213      	tst	r3, r2
 8000b4a:	d108      	bne.n	8000b5e <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	69e3      	ldr	r3, [r4, #28]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61e3      	str	r3, [r4, #28]
 8000b52:	69e3      	ldr	r3, [r4, #28]
 8000b54:	4013      	ands	r3, r2
 8000b56:	9303      	str	r3, [sp, #12]
 8000b58:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b5e:	2780      	movs	r7, #128	; 0x80
 8000b60:	4e41      	ldr	r6, [pc, #260]	; (8000c68 <HAL_RCC_OscConfig+0x324>)
 8000b62:	007f      	lsls	r7, r7, #1
 8000b64:	6833      	ldr	r3, [r6, #0]
 8000b66:	423b      	tst	r3, r7
 8000b68:	d006      	beq.n	8000b78 <HAL_RCC_OscConfig+0x234>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b6a:	68ab      	ldr	r3, [r5, #8]
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d113      	bne.n	8000b98 <HAL_RCC_OscConfig+0x254>
 8000b70:	6a22      	ldr	r2, [r4, #32]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	6223      	str	r3, [r4, #32]
 8000b76:	e030      	b.n	8000bda <HAL_RCC_OscConfig+0x296>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b78:	6833      	ldr	r3, [r6, #0]
 8000b7a:	433b      	orrs	r3, r7
 8000b7c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b7e:	f7ff fdc7 	bl	8000710 <HAL_GetTick>
 8000b82:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b84:	6833      	ldr	r3, [r6, #0]
 8000b86:	423b      	tst	r3, r7
 8000b88:	d1ef      	bne.n	8000b6a <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b8a:	f7ff fdc1 	bl	8000710 <HAL_GetTick>
 8000b8e:	9b01      	ldr	r3, [sp, #4]
 8000b90:	1ac0      	subs	r0, r0, r3
 8000b92:	2864      	cmp	r0, #100	; 0x64
 8000b94:	d9f6      	bls.n	8000b84 <HAL_RCC_OscConfig+0x240>
 8000b96:	e73b      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
 8000b98:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d114      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x284>
 8000b9e:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ba0:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba2:	4393      	bics	r3, r2
 8000ba4:	6223      	str	r3, [r4, #32]
 8000ba6:	6a23      	ldr	r3, [r4, #32]
 8000ba8:	3203      	adds	r2, #3
 8000baa:	4393      	bics	r3, r2
 8000bac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000bae:	f7ff fdaf 	bl	8000710 <HAL_GetTick>
 8000bb2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb4:	6a23      	ldr	r3, [r4, #32]
 8000bb6:	423b      	tst	r3, r7
 8000bb8:	d025      	beq.n	8000c06 <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bba:	f7ff fda9 	bl	8000710 <HAL_GetTick>
 8000bbe:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_RCC_OscConfig+0x328>)
 8000bc0:	1b80      	subs	r0, r0, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d9f6      	bls.n	8000bb4 <HAL_RCC_OscConfig+0x270>
 8000bc6:	e723      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc8:	2b05      	cmp	r3, #5
 8000bca:	d10b      	bne.n	8000be4 <HAL_RCC_OscConfig+0x2a0>
 8000bcc:	6a21      	ldr	r1, [r4, #32]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6223      	str	r3, [r4, #32]
 8000bd4:	6a23      	ldr	r3, [r4, #32]
 8000bd6:	431a      	orrs	r2, r3
 8000bd8:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000bda:	f7ff fd99 	bl	8000710 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000bde:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000be0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000be2:	e00d      	b.n	8000c00 <HAL_RCC_OscConfig+0x2bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000be4:	6a23      	ldr	r3, [r4, #32]
 8000be6:	4393      	bics	r3, r2
 8000be8:	2204      	movs	r2, #4
 8000bea:	6223      	str	r3, [r4, #32]
 8000bec:	6a23      	ldr	r3, [r4, #32]
 8000bee:	4393      	bics	r3, r2
 8000bf0:	e7c0      	b.n	8000b74 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bf2:	f7ff fd8d 	bl	8000710 <HAL_GetTick>
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_RCC_OscConfig+0x328>)
 8000bf8:	1b80      	subs	r0, r0, r6
 8000bfa:	4298      	cmp	r0, r3
 8000bfc:	d900      	bls.n	8000c00 <HAL_RCC_OscConfig+0x2bc>
 8000bfe:	e707      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c00:	6a23      	ldr	r3, [r4, #32]
 8000c02:	423b      	tst	r3, r7
 8000c04:	d0f5      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 8000c06:	9b00      	ldr	r3, [sp, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d000      	beq.n	8000c0e <HAL_RCC_OscConfig+0x2ca>
 8000c0c:	e6ac      	b.n	8000968 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c0e:	69e3      	ldr	r3, [r4, #28]
 8000c10:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_RCC_OscConfig+0x32c>)
 8000c12:	4013      	ands	r3, r2
 8000c14:	61e3      	str	r3, [r4, #28]
 8000c16:	e6a7      	b.n	8000968 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c18:	f7ff fd7a 	bl	8000710 <HAL_GetTick>
 8000c1c:	1bc0      	subs	r0, r0, r7
 8000c1e:	2802      	cmp	r0, #2
 8000c20:	d800      	bhi.n	8000c24 <HAL_RCC_OscConfig+0x2e0>
 8000c22:	e6b4      	b.n	800098e <HAL_RCC_OscConfig+0x4a>
 8000c24:	e6f4      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c26:	3205      	adds	r2, #5
 8000c28:	d103      	bne.n	8000c32 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000c2c:	439a      	bics	r2, r3
 8000c2e:	6362      	str	r2, [r4, #52]	; 0x34
 8000c30:	e6b1      	b.n	8000996 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c32:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c34:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c36:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000c38:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c3a:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000c3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c3e:	4393      	bics	r3, r2
 8000c40:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000c42:	f7ff fd65 	bl	8000710 <HAL_GetTick>
 8000c46:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000c48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000c4a:	4233      	tst	r3, r6
 8000c4c:	d100      	bne.n	8000c50 <HAL_RCC_OscConfig+0x30c>
 8000c4e:	e6a9      	b.n	80009a4 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000c50:	f7ff fd5e 	bl	8000710 <HAL_GetTick>
 8000c54:	1bc0      	subs	r0, r0, r7
 8000c56:	2802      	cmp	r0, #2
 8000c58:	d9f6      	bls.n	8000c48 <HAL_RCC_OscConfig+0x304>
 8000c5a:	e6d9      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	fffeffff 	.word	0xfffeffff
 8000c64:	fffbffff 	.word	0xfffbffff
 8000c68:	40007000 	.word	0x40007000
 8000c6c:	00001388 	.word	0x00001388
 8000c70:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c74:	220c      	movs	r2, #12
 8000c76:	4c26      	ldr	r4, [pc, #152]	; (8000d10 <HAL_RCC_OscConfig+0x3cc>)
      return HAL_ERROR;
 8000c78:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c7a:	6863      	ldr	r3, [r4, #4]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2b08      	cmp	r3, #8
 8000c80:	d100      	bne.n	8000c84 <HAL_RCC_OscConfig+0x340>
 8000c82:	e6ae      	b.n	80009e2 <HAL_RCC_OscConfig+0x9e>
        __HAL_RCC_PLL_DISABLE();
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	4a23      	ldr	r2, [pc, #140]	; (8000d14 <HAL_RCC_OscConfig+0x3d0>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c8c:	2902      	cmp	r1, #2
 8000c8e:	d12f      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x3ac>
        tickstart = HAL_GetTick();
 8000c90:	f7ff fd3e 	bl	8000710 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c94:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c96:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c98:	04b6      	lsls	r6, r6, #18
 8000c9a:	6823      	ldr	r3, [r4, #0]
 8000c9c:	4233      	tst	r3, r6
 8000c9e:	d121      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ca0:	220f      	movs	r2, #15
 8000ca2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ca4:	4393      	bics	r3, r2
 8000ca6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000cac:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000cae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000cb0:	6862      	ldr	r2, [r4, #4]
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	4918      	ldr	r1, [pc, #96]	; (8000d18 <HAL_RCC_OscConfig+0x3d4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cb6:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000cb8:	400a      	ands	r2, r1
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	6822      	ldr	r2, [r4, #0]
 8000cc2:	045b      	lsls	r3, r3, #17
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fd22 	bl	8000710 <HAL_GetTick>
 8000ccc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cce:	04ad      	lsls	r5, r5, #18
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	422b      	tst	r3, r5
 8000cd4:	d000      	beq.n	8000cd8 <HAL_RCC_OscConfig+0x394>
 8000cd6:	e669      	b.n	80009ac <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cd8:	f7ff fd1a 	bl	8000710 <HAL_GetTick>
 8000cdc:	1b80      	subs	r0, r0, r6
 8000cde:	2802      	cmp	r0, #2
 8000ce0:	d9f6      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x38c>
 8000ce2:	e695      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce4:	f7ff fd14 	bl	8000710 <HAL_GetTick>
 8000ce8:	1bc0      	subs	r0, r0, r7
 8000cea:	2802      	cmp	r0, #2
 8000cec:	d9d5      	bls.n	8000c9a <HAL_RCC_OscConfig+0x356>
 8000cee:	e68f      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8000cf0:	f7ff fd0e 	bl	8000710 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cf4:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000cf6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cf8:	04ad      	lsls	r5, r5, #18
 8000cfa:	6823      	ldr	r3, [r4, #0]
 8000cfc:	422b      	tst	r3, r5
 8000cfe:	d100      	bne.n	8000d02 <HAL_RCC_OscConfig+0x3be>
 8000d00:	e654      	b.n	80009ac <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d02:	f7ff fd05 	bl	8000710 <HAL_GetTick>
 8000d06:	1b80      	subs	r0, r0, r6
 8000d08:	2802      	cmp	r0, #2
 8000d0a:	d9f6      	bls.n	8000cfa <HAL_RCC_OscConfig+0x3b6>
 8000d0c:	e680      	b.n	8000a10 <HAL_RCC_OscConfig+0xcc>
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	40021000 	.word	0x40021000
 8000d14:	feffffff 	.word	0xfeffffff
 8000d18:	ffc27fff 	.word	0xffc27fff

08000d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d1c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000d1e:	4d12      	ldr	r5, [pc, #72]	; (8000d68 <HAL_RCC_GetSysClockFreq+0x4c>)
{
 8000d20:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000d22:	2210      	movs	r2, #16
 8000d24:	0029      	movs	r1, r5
 8000d26:	4668      	mov	r0, sp
 8000d28:	f000 fd78 	bl	800181c <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000d2c:	0029      	movs	r1, r5
 8000d2e:	ac04      	add	r4, sp, #16
 8000d30:	3110      	adds	r1, #16
 8000d32:	2210      	movs	r2, #16
 8000d34:	0020      	movs	r0, r4
 8000d36:	f000 fd71 	bl	800181c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d3a:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000d3c:	490b      	ldr	r1, [pc, #44]	; (8000d6c <HAL_RCC_GetSysClockFreq+0x50>)
 8000d3e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000d40:	401a      	ands	r2, r3
 8000d42:	2a08      	cmp	r2, #8
 8000d44:	d10d      	bne.n	8000d62 <HAL_RCC_GetSysClockFreq+0x46>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d46:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000d48:	210f      	movs	r1, #15
 8000d4a:	4668      	mov	r0, sp
 8000d4c:	0c9b      	lsrs	r3, r3, #18
 8000d4e:	400b      	ands	r3, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d50:	400a      	ands	r2, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000d52:	5cc5      	ldrb	r5, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d54:	5ca1      	ldrb	r1, [r4, r2]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <HAL_RCC_GetSysClockFreq+0x54>)
 8000d58:	f7ff f9e0 	bl	800011c <__udivsi3>
 8000d5c:	4368      	muls	r0, r5
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d5e:	b009      	add	sp, #36	; 0x24
 8000d60:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <HAL_RCC_GetSysClockFreq+0x54>)
  return sysclockfreq;
 8000d64:	e7fb      	b.n	8000d5e <HAL_RCC_GetSysClockFreq+0x42>
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	080026bc 	.word	0x080026bc
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	007a1200 	.word	0x007a1200

08000d74 <HAL_RCC_ClockConfig>:
{
 8000d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d76:	2201      	movs	r2, #1
 8000d78:	4c43      	ldr	r4, [pc, #268]	; (8000e88 <HAL_RCC_ClockConfig+0x114>)
{
 8000d7a:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d7c:	6823      	ldr	r3, [r4, #0]
{
 8000d7e:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d80:	4013      	ands	r3, r2
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d31c      	bcc.n	8000dc0 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d86:	6832      	ldr	r2, [r6, #0]
 8000d88:	0793      	lsls	r3, r2, #30
 8000d8a:	d423      	bmi.n	8000dd4 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d8c:	07d3      	lsls	r3, r2, #31
 8000d8e:	d429      	bmi.n	8000de4 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d90:	2301      	movs	r3, #1
 8000d92:	6822      	ldr	r2, [r4, #0]
 8000d94:	401a      	ands	r2, r3
 8000d96:	4297      	cmp	r7, r2
 8000d98:	d367      	bcc.n	8000e6a <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d9a:	6833      	ldr	r3, [r6, #0]
 8000d9c:	4c3b      	ldr	r4, [pc, #236]	; (8000e8c <HAL_RCC_ClockConfig+0x118>)
 8000d9e:	075b      	lsls	r3, r3, #29
 8000da0:	d46a      	bmi.n	8000e78 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000da2:	f7ff ffbb 	bl	8000d1c <HAL_RCC_GetSysClockFreq>
 8000da6:	6863      	ldr	r3, [r4, #4]
 8000da8:	4a39      	ldr	r2, [pc, #228]	; (8000e90 <HAL_RCC_ClockConfig+0x11c>)
 8000daa:	061b      	lsls	r3, r3, #24
 8000dac:	0f1b      	lsrs	r3, r3, #28
 8000dae:	5cd3      	ldrb	r3, [r2, r3]
 8000db0:	40d8      	lsrs	r0, r3
 8000db2:	4b38      	ldr	r3, [pc, #224]	; (8000e94 <HAL_RCC_ClockConfig+0x120>)
 8000db4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f7ff fc7f 	bl	80006ba <HAL_InitTick>
  return HAL_OK;
 8000dbc:	2000      	movs	r0, #0
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dc0:	6823      	ldr	r3, [r4, #0]
 8000dc2:	4393      	bics	r3, r2
 8000dc4:	430b      	orrs	r3, r1
 8000dc6:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d0da      	beq.n	8000d86 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000dd0:	2001      	movs	r0, #1
}
 8000dd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dd4:	20f0      	movs	r0, #240	; 0xf0
 8000dd6:	492d      	ldr	r1, [pc, #180]	; (8000e8c <HAL_RCC_ClockConfig+0x118>)
 8000dd8:	684b      	ldr	r3, [r1, #4]
 8000dda:	4383      	bics	r3, r0
 8000ddc:	68b0      	ldr	r0, [r6, #8]
 8000dde:	4303      	orrs	r3, r0
 8000de0:	604b      	str	r3, [r1, #4]
 8000de2:	e7d3      	b.n	8000d8c <HAL_RCC_ClockConfig+0x18>
 8000de4:	4d29      	ldr	r5, [pc, #164]	; (8000e8c <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000de6:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dea:	2a01      	cmp	r2, #1
 8000dec:	d11a      	bne.n	8000e24 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dee:	039b      	lsls	r3, r3, #14
 8000df0:	d5ee      	bpl.n	8000dd0 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000df2:	2103      	movs	r1, #3
 8000df4:	686b      	ldr	r3, [r5, #4]
 8000df6:	438b      	bics	r3, r1
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000dfc:	f7ff fc88 	bl	8000710 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e00:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000e02:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d115      	bne.n	8000e34 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e08:	220c      	movs	r2, #12
 8000e0a:	686b      	ldr	r3, [r5, #4]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d0be      	beq.n	8000d90 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e12:	f7ff fc7d 	bl	8000710 <HAL_GetTick>
 8000e16:	9b01      	ldr	r3, [sp, #4]
 8000e18:	1ac0      	subs	r0, r0, r3
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <HAL_RCC_ClockConfig+0x124>)
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	d9f3      	bls.n	8000e08 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000e20:	2003      	movs	r0, #3
 8000e22:	e7d6      	b.n	8000dd2 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e24:	2a02      	cmp	r2, #2
 8000e26:	d102      	bne.n	8000e2e <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e28:	019b      	lsls	r3, r3, #6
 8000e2a:	d4e2      	bmi.n	8000df2 <HAL_RCC_ClockConfig+0x7e>
 8000e2c:	e7d0      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2e:	079b      	lsls	r3, r3, #30
 8000e30:	d4df      	bmi.n	8000df2 <HAL_RCC_ClockConfig+0x7e>
 8000e32:	e7cd      	b.n	8000dd0 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d012      	beq.n	8000e5e <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e38:	220c      	movs	r2, #12
 8000e3a:	686b      	ldr	r3, [r5, #4]
 8000e3c:	4213      	tst	r3, r2
 8000e3e:	d0a7      	beq.n	8000d90 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e40:	f7ff fc66 	bl	8000710 <HAL_GetTick>
 8000e44:	9b01      	ldr	r3, [sp, #4]
 8000e46:	1ac0      	subs	r0, r0, r3
 8000e48:	4b13      	ldr	r3, [pc, #76]	; (8000e98 <HAL_RCC_ClockConfig+0x124>)
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d9f4      	bls.n	8000e38 <HAL_RCC_ClockConfig+0xc4>
 8000e4e:	e7e7      	b.n	8000e20 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e50:	f7ff fc5e 	bl	8000710 <HAL_GetTick>
 8000e54:	9b01      	ldr	r3, [sp, #4]
 8000e56:	1ac0      	subs	r0, r0, r3
 8000e58:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <HAL_RCC_ClockConfig+0x124>)
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d8e0      	bhi.n	8000e20 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	686b      	ldr	r3, [r5, #4]
 8000e62:	4013      	ands	r3, r2
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d1f3      	bne.n	8000e50 <HAL_RCC_ClockConfig+0xdc>
 8000e68:	e792      	b.n	8000d90 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e6a:	6822      	ldr	r2, [r4, #0]
 8000e6c:	439a      	bics	r2, r3
 8000e6e:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e70:	6822      	ldr	r2, [r4, #0]
 8000e72:	421a      	tst	r2, r3
 8000e74:	d1ac      	bne.n	8000dd0 <HAL_RCC_ClockConfig+0x5c>
 8000e76:	e790      	b.n	8000d9a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000e78:	6863      	ldr	r3, [r4, #4]
 8000e7a:	4a08      	ldr	r2, [pc, #32]	; (8000e9c <HAL_RCC_ClockConfig+0x128>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	68f2      	ldr	r2, [r6, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	6063      	str	r3, [r4, #4]
 8000e84:	e78d      	b.n	8000da2 <HAL_RCC_ClockConfig+0x2e>
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	40022000 	.word	0x40022000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	080026ec 	.word	0x080026ec
 8000e94:	20000000 	.word	0x20000000
 8000e98:	00001388 	.word	0x00001388
 8000e9c:	fffff8ff 	.word	0xfffff8ff

08000ea0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000ea0:	4b01      	ldr	r3, [pc, #4]	; (8000ea8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
}
 8000ea4:	4770      	bx	lr
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	20000000 	.word	0x20000000

08000eac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	055b      	lsls	r3, r3, #21
 8000eb4:	0f5b      	lsrs	r3, r3, #29
 8000eb6:	5cd3      	ldrb	r3, [r2, r3]
 8000eb8:	4a03      	ldr	r2, [pc, #12]	; (8000ec8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000eba:	6810      	ldr	r0, [r2, #0]
 8000ebc:	40d8      	lsrs	r0, r3
}    
 8000ebe:	4770      	bx	lr
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	080026fc 	.word	0x080026fc
 8000ec8:	20000000 	.word	0x20000000

08000ecc <HAL_UART_MspInit>:
 8000ecc:	4770      	bx	lr

08000ece <HAL_UART_MspDeInit>:
 8000ece:	4770      	bx	lr

08000ed0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
 8000ed2:	0005      	movs	r5, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8000ed4:	2001      	movs	r0, #1
  if(huart == NULL)
 8000ed6:	2d00      	cmp	r5, #0
 8000ed8:	d016      	beq.n	8000f08 <HAL_UART_DeInit+0x38>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8000eda:	002e      	movs	r6, r5
 8000edc:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 8000ede:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8000ee0:	3669      	adds	r6, #105	; 0x69
 8000ee2:	7033      	strb	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 8000ee4:	682b      	ldr	r3, [r5, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4382      	bics	r2, r0
 8000eea:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
  huart->Instance->CR3 = 0x0U;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8000eec:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 8000eee:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8000ef0:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8000ef2:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8000ef4:	f7ff ffeb 	bl	8000ece <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState    = HAL_UART_STATE_RESET;
  huart->RxState   = HAL_UART_STATE_RESET;
 8000ef8:	002b      	movs	r3, r5

  /* Process Unlock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8000efa:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000efc:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->RxState   = HAL_UART_STATE_RESET;
 8000efe:	336a      	adds	r3, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8000f00:	3568      	adds	r5, #104	; 0x68
  huart->gState    = HAL_UART_STATE_RESET;
 8000f02:	7034      	strb	r4, [r6, #0]
  huart->RxState   = HAL_UART_STATE_RESET;
 8000f04:	701c      	strb	r4, [r3, #0]
  __HAL_UNLOCK(huart);
 8000f06:	702c      	strb	r4, [r5, #0]
}
 8000f08:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f0c:	b570      	push	{r4, r5, r6, lr}
 8000f0e:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f10:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f12:	69c2      	ldr	r2, [r0, #28]
 8000f14:	6883      	ldr	r3, [r0, #8]
 8000f16:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f18:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f1a:	4303      	orrs	r3, r0
 8000f1c:	6960      	ldr	r0, [r4, #20]
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f1e:	4e42      	ldr	r6, [pc, #264]	; (8001028 <UART_SetConfig+0x11c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f20:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f22:	4842      	ldr	r0, [pc, #264]	; (800102c <UART_SetConfig+0x120>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f24:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000f26:	4001      	ands	r1, r0
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f2c:	686b      	ldr	r3, [r5, #4]
 8000f2e:	4940      	ldr	r1, [pc, #256]	; (8001030 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f30:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f32:	400b      	ands	r3, r1
 8000f34:	68e1      	ldr	r1, [r4, #12]
 8000f36:	430b      	orrs	r3, r1
 8000f38:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f3a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f3c:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000f3e:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000f40:	483c      	ldr	r0, [pc, #240]	; (8001034 <UART_SetConfig+0x128>)
 8000f42:	4001      	ands	r1, r0
 8000f44:	430b      	orrs	r3, r1
 8000f46:	60ab      	str	r3, [r5, #8]
 8000f48:	2380      	movs	r3, #128	; 0x80
 8000f4a:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f4c:	42b5      	cmp	r5, r6
 8000f4e:	d110      	bne.n	8000f72 <UART_SetConfig+0x66>
 8000f50:	2003      	movs	r0, #3
 8000f52:	4939      	ldr	r1, [pc, #228]	; (8001038 <UART_SetConfig+0x12c>)
 8000f54:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8000f56:	4001      	ands	r1, r0
 8000f58:	4838      	ldr	r0, [pc, #224]	; (800103c <UART_SetConfig+0x130>)
 8000f5a:	5c40      	ldrb	r0, [r0, r1]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d137      	bne.n	8000fd0 <UART_SetConfig+0xc4>
  {
    switch (clocksource)
 8000f60:	2808      	cmp	r0, #8
 8000f62:	d832      	bhi.n	8000fca <UART_SetConfig+0xbe>
 8000f64:	f7ff f8d0 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000f68:	31163110 	.word	0x31163110
 8000f6c:	31313129 	.word	0x31313129
 8000f70:	2c          	.byte	0x2c
 8000f71:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000f72:	4933      	ldr	r1, [pc, #204]	; (8001040 <UART_SetConfig+0x134>)
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d005      	beq.n	8000f84 <UART_SetConfig+0x78>
 8000f78:	4932      	ldr	r1, [pc, #200]	; (8001044 <UART_SetConfig+0x138>)
 8000f7a:	428d      	cmp	r5, r1
 8000f7c:	d002      	beq.n	8000f84 <UART_SetConfig+0x78>
 8000f7e:	4932      	ldr	r1, [pc, #200]	; (8001048 <UART_SetConfig+0x13c>)
 8000f80:	428d      	cmp	r5, r1
 8000f82:	d14c      	bne.n	800101e <UART_SetConfig+0x112>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d12c      	bne.n	8000fe2 <UART_SetConfig+0xd6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000f88:	f7ff ff90 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f8c:	6863      	ldr	r3, [r4, #4]
 8000f8e:	0040      	lsls	r0, r0, #1
 8000f90:	085b      	lsrs	r3, r3, #1
 8000f92:	e002      	b.n	8000f9a <UART_SetConfig+0x8e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000f94:	6863      	ldr	r3, [r4, #4]
 8000f96:	0858      	lsrs	r0, r3, #1
 8000f98:	4b2c      	ldr	r3, [pc, #176]	; (800104c <UART_SetConfig+0x140>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000f9a:	18c0      	adds	r0, r0, r3
 8000f9c:	6861      	ldr	r1, [r4, #4]
 8000f9e:	f7ff f8bd 	bl	800011c <__udivsi3>
 8000fa2:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8000fa4:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8000fa6:	220f      	movs	r2, #15
 8000fa8:	0019      	movs	r1, r3
 8000faa:	4391      	bics	r1, r2
 8000fac:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000fae:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8000fb0:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000fb2:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8000fb8:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000fba:	f7ff feaf 	bl	8000d1c <HAL_RCC_GetSysClockFreq>
 8000fbe:	e7e5      	b.n	8000f8c <UART_SetConfig+0x80>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000fc0:	6863      	ldr	r3, [r4, #4]
 8000fc2:	0858      	lsrs	r0, r3, #1
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	025b      	lsls	r3, r3, #9
 8000fc8:	e7e7      	b.n	8000f9a <UART_SetConfig+0x8e>
        ret = HAL_ERROR;
 8000fca:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	e7ea      	b.n	8000fa6 <UART_SetConfig+0x9a>
    switch (clocksource)
 8000fd0:	2808      	cmp	r0, #8
 8000fd2:	d826      	bhi.n	8001022 <UART_SetConfig+0x116>
 8000fd4:	f7ff f898 	bl	8000108 <__gnu_thumb1_case_uqi>
 8000fd8:	25102505 	.word	0x25102505
 8000fdc:	25252519 	.word	0x25252519
 8000fe0:	1e          	.byte	0x1e
 8000fe1:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000fe2:	f7ff ff63 	bl	8000eac <HAL_RCC_GetPCLK1Freq>
 8000fe6:	6861      	ldr	r1, [r4, #4]
 8000fe8:	084b      	lsrs	r3, r1, #1
 8000fea:	1818      	adds	r0, r3, r0
 8000fec:	f7ff f896 	bl	800011c <__udivsi3>
 8000ff0:	b280      	uxth	r0, r0
 8000ff2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000ff4:	2000      	movs	r0, #0
        break;
 8000ff6:	e7df      	b.n	8000fb8 <UART_SetConfig+0xac>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000ff8:	6861      	ldr	r1, [r4, #4]
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <UART_SetConfig+0x144>)
 8000ffc:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000ffe:	18c0      	adds	r0, r0, r3
 8001000:	f7ff f88c 	bl	800011c <__udivsi3>
 8001004:	b280      	uxth	r0, r0
 8001006:	60f0      	str	r0, [r6, #12]
 8001008:	e7f4      	b.n	8000ff4 <UART_SetConfig+0xe8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800100a:	f7ff fe87 	bl	8000d1c <HAL_RCC_GetSysClockFreq>
 800100e:	6861      	ldr	r1, [r4, #4]
 8001010:	084b      	lsrs	r3, r1, #1
 8001012:	e7f4      	b.n	8000ffe <UART_SetConfig+0xf2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	6861      	ldr	r1, [r4, #4]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	0848      	lsrs	r0, r1, #1
 800101c:	e7ef      	b.n	8000ffe <UART_SetConfig+0xf2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800101e:	429a      	cmp	r2, r3
 8001020:	d0d3      	beq.n	8000fca <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8001022:	2001      	movs	r0, #1
  return ret;
 8001024:	e7c8      	b.n	8000fb8 <UART_SetConfig+0xac>
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	40013800 	.word	0x40013800
 800102c:	efff69f3 	.word	0xefff69f3
 8001030:	ffffcfff 	.word	0xffffcfff
 8001034:	fffff4ff 	.word	0xfffff4ff
 8001038:	40021000 	.word	0x40021000
 800103c:	08002704 	.word	0x08002704
 8001040:	40004400 	.word	0x40004400
 8001044:	40004800 	.word	0x40004800
 8001048:	40004c00 	.word	0x40004c00
 800104c:	00f42400 	.word	0x00f42400
 8001050:	007a1200 	.word	0x007a1200

08001054 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001054:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001056:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001058:	07da      	lsls	r2, r3, #31
 800105a:	d506      	bpl.n	800106a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800105c:	6801      	ldr	r1, [r0, #0]
 800105e:	4c28      	ldr	r4, [pc, #160]	; (8001100 <UART_AdvFeatureConfig+0xac>)
 8001060:	684a      	ldr	r2, [r1, #4]
 8001062:	4022      	ands	r2, r4
 8001064:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001066:	4322      	orrs	r2, r4
 8001068:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800106a:	079a      	lsls	r2, r3, #30
 800106c:	d506      	bpl.n	800107c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800106e:	6801      	ldr	r1, [r0, #0]
 8001070:	4c24      	ldr	r4, [pc, #144]	; (8001104 <UART_AdvFeatureConfig+0xb0>)
 8001072:	684a      	ldr	r2, [r1, #4]
 8001074:	4022      	ands	r2, r4
 8001076:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001078:	4322      	orrs	r2, r4
 800107a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800107c:	075a      	lsls	r2, r3, #29
 800107e:	d506      	bpl.n	800108e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001080:	6801      	ldr	r1, [r0, #0]
 8001082:	4c21      	ldr	r4, [pc, #132]	; (8001108 <UART_AdvFeatureConfig+0xb4>)
 8001084:	684a      	ldr	r2, [r1, #4]
 8001086:	4022      	ands	r2, r4
 8001088:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800108a:	4322      	orrs	r2, r4
 800108c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800108e:	071a      	lsls	r2, r3, #28
 8001090:	d506      	bpl.n	80010a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001092:	6801      	ldr	r1, [r0, #0]
 8001094:	4c1d      	ldr	r4, [pc, #116]	; (800110c <UART_AdvFeatureConfig+0xb8>)
 8001096:	684a      	ldr	r2, [r1, #4]
 8001098:	4022      	ands	r2, r4
 800109a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800109c:	4322      	orrs	r2, r4
 800109e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80010a0:	06da      	lsls	r2, r3, #27
 80010a2:	d506      	bpl.n	80010b2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80010a4:	6801      	ldr	r1, [r0, #0]
 80010a6:	4c1a      	ldr	r4, [pc, #104]	; (8001110 <UART_AdvFeatureConfig+0xbc>)
 80010a8:	688a      	ldr	r2, [r1, #8]
 80010aa:	4022      	ands	r2, r4
 80010ac:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80010ae:	4322      	orrs	r2, r4
 80010b0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80010b2:	069a      	lsls	r2, r3, #26
 80010b4:	d506      	bpl.n	80010c4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80010b6:	6801      	ldr	r1, [r0, #0]
 80010b8:	4c16      	ldr	r4, [pc, #88]	; (8001114 <UART_AdvFeatureConfig+0xc0>)
 80010ba:	688a      	ldr	r2, [r1, #8]
 80010bc:	4022      	ands	r2, r4
 80010be:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80010c0:	4322      	orrs	r2, r4
 80010c2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80010c4:	065a      	lsls	r2, r3, #25
 80010c6:	d510      	bpl.n	80010ea <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80010c8:	6801      	ldr	r1, [r0, #0]
 80010ca:	4d13      	ldr	r5, [pc, #76]	; (8001118 <UART_AdvFeatureConfig+0xc4>)
 80010cc:	684a      	ldr	r2, [r1, #4]
 80010ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80010d0:	402a      	ands	r2, r5
 80010d2:	4322      	orrs	r2, r4
 80010d4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	0352      	lsls	r2, r2, #13
 80010da:	4294      	cmp	r4, r2
 80010dc:	d105      	bne.n	80010ea <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80010de:	684a      	ldr	r2, [r1, #4]
 80010e0:	4c0e      	ldr	r4, [pc, #56]	; (800111c <UART_AdvFeatureConfig+0xc8>)
 80010e2:	4022      	ands	r2, r4
 80010e4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80010e6:	4322      	orrs	r2, r4
 80010e8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80010ea:	061b      	lsls	r3, r3, #24
 80010ec:	d506      	bpl.n	80010fc <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80010ee:	6802      	ldr	r2, [r0, #0]
 80010f0:	490b      	ldr	r1, [pc, #44]	; (8001120 <UART_AdvFeatureConfig+0xcc>)
 80010f2:	6853      	ldr	r3, [r2, #4]
 80010f4:	400b      	ands	r3, r1
 80010f6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80010f8:	430b      	orrs	r3, r1
 80010fa:	6053      	str	r3, [r2, #4]
  }
}
 80010fc:	bd30      	pop	{r4, r5, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	fffdffff 	.word	0xfffdffff
 8001104:	fffeffff 	.word	0xfffeffff
 8001108:	fffbffff 	.word	0xfffbffff
 800110c:	ffff7fff 	.word	0xffff7fff
 8001110:	ffffefff 	.word	0xffffefff
 8001114:	ffffdfff 	.word	0xffffdfff
 8001118:	ffefffff 	.word	0xffefffff
 800111c:	ff9fffff 	.word	0xff9fffff
 8001120:	fff7ffff 	.word	0xfff7ffff

08001124 <HAL_UART_Init>:
{
 8001124:	b570      	push	{r4, r5, r6, lr}
 8001126:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001128:	d101      	bne.n	800112e <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800112a:	2001      	movs	r0, #1
}
 800112c:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 800112e:	0005      	movs	r5, r0
 8001130:	3569      	adds	r5, #105	; 0x69
 8001132:	782b      	ldrb	r3, [r5, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d104      	bne.n	8001144 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800113a:	0002      	movs	r2, r0
 800113c:	3268      	adds	r2, #104	; 0x68
 800113e:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001140:	f7ff fec4 	bl	8000ecc <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001144:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001146:	2101      	movs	r1, #1
 8001148:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800114a:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800114c:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800114e:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001150:	438b      	bics	r3, r1
 8001152:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001154:	f7ff feda 	bl	8000f0c <UART_SetConfig>
 8001158:	2801      	cmp	r0, #1
 800115a:	d0e6      	beq.n	800112a <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800115c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001162:	0020      	movs	r0, r4
 8001164:	f7ff ff76 	bl	8001054 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	490b      	ldr	r1, [pc, #44]	; (8001198 <HAL_UART_Init+0x74>)
 800116c:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800116e:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001170:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001172:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001174:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	438a      	bics	r2, r1
 800117a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800117c:	2201      	movs	r2, #1
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001184:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8001186:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001188:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 800118a:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800118c:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 800118e:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001190:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8001192:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001194:	e7ca      	b.n	800112c <HAL_UART_Init+0x8>
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	fffff7ff 	.word	0xfffff7ff

0800119c <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800119c:	2103      	movs	r1, #3
 800119e:	6803      	ldr	r3, [r0, #0]
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011a2:	689a      	ldr	r2, [r3, #8]
{
 80011a4:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011a6:	400a      	ands	r2, r1
 80011a8:	2a01      	cmp	r2, #1
 80011aa:	d001      	beq.n	80011b0 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80011ac:	2000      	movs	r0, #0
}
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011b0:	6819      	ldr	r1, [r3, #0]
 80011b2:	4211      	tst	r1, r2
 80011b4:	d102      	bne.n	80011bc <ADC_Disable+0x20>
 80011b6:	68da      	ldr	r2, [r3, #12]
 80011b8:	0412      	lsls	r2, r2, #16
 80011ba:	d5f7      	bpl.n	80011ac <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80011bc:	2205      	movs	r2, #5
 80011be:	689d      	ldr	r5, [r3, #8]
 80011c0:	4015      	ands	r5, r2
 80011c2:	2d01      	cmp	r5, #1
 80011c4:	d11a      	bne.n	80011fc <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 80011c6:	2202      	movs	r2, #2
 80011c8:	6899      	ldr	r1, [r3, #8]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	2203      	movs	r2, #3
 80011d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80011d2:	f7ff fa9d 	bl	8000710 <HAL_GetTick>
 80011d6:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80011d8:	6823      	ldr	r3, [r4, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	422b      	tst	r3, r5
 80011de:	d0e5      	beq.n	80011ac <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011e0:	f7ff fa96 	bl	8000710 <HAL_GetTick>
 80011e4:	1b80      	subs	r0, r0, r6
 80011e6:	2802      	cmp	r0, #2
 80011e8:	d9f6      	bls.n	80011d8 <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	2310      	movs	r3, #16
 80011ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 80011ee:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f0:	4313      	orrs	r3, r2
 80011f2:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011f6:	431d      	orrs	r5, r3
 80011f8:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 80011fa:	e7d8      	b.n	80011ae <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fc:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011fe:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001200:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001202:	4313      	orrs	r3, r2
 8001204:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001206:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001208:	4303      	orrs	r3, r0
 800120a:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800120c:	e7cf      	b.n	80011ae <ADC_Disable+0x12>
	...

08001210 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8001210:	2300      	movs	r3, #0
{
 8001212:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001214:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 8001216:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001218:	6803      	ldr	r3, [r0, #0]
{
 800121a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800121c:	689a      	ldr	r2, [r3, #8]
 800121e:	400a      	ands	r2, r1
 8001220:	2a01      	cmp	r2, #1
 8001222:	d107      	bne.n	8001234 <ADC_Enable+0x24>
 8001224:	6819      	ldr	r1, [r3, #0]
 8001226:	4211      	tst	r1, r2
 8001228:	d001      	beq.n	800122e <ADC_Enable+0x1e>
  return HAL_OK;
 800122a:	2000      	movs	r0, #0
}
 800122c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800122e:	68da      	ldr	r2, [r3, #12]
 8001230:	0412      	lsls	r2, r2, #16
 8001232:	d4fa      	bmi.n	800122a <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001234:	6899      	ldr	r1, [r3, #8]
 8001236:	4a19      	ldr	r2, [pc, #100]	; (800129c <ADC_Enable+0x8c>)
 8001238:	4211      	tst	r1, r2
 800123a:	d008      	beq.n	800124e <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800123c:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800123e:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001240:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001242:	4313      	orrs	r3, r2
 8001244:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001246:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001248:	4303      	orrs	r3, r0
 800124a:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 800124c:	e7ee      	b.n	800122c <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 800124e:	2201      	movs	r2, #1
 8001250:	6899      	ldr	r1, [r3, #8]
 8001252:	430a      	orrs	r2, r1
 8001254:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <ADC_Enable+0x90>)
 8001258:	4912      	ldr	r1, [pc, #72]	; (80012a4 <ADC_Enable+0x94>)
 800125a:	6818      	ldr	r0, [r3, #0]
 800125c:	f7fe ff5e 	bl	800011c <__udivsi3>
 8001260:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 8001262:	9b01      	ldr	r3, [sp, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d115      	bne.n	8001294 <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8001268:	f7ff fa52 	bl	8000710 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800126c:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 800126e:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	422b      	tst	r3, r5
 8001276:	d1d8      	bne.n	800122a <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001278:	f7ff fa4a 	bl	8000710 <HAL_GetTick>
 800127c:	1b80      	subs	r0, r0, r6
 800127e:	2802      	cmp	r0, #2
 8001280:	d9f6      	bls.n	8001270 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001282:	2310      	movs	r3, #16
 8001284:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001286:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001288:	4313      	orrs	r3, r2
 800128a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800128c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800128e:	432b      	orrs	r3, r5
 8001290:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8001292:	e7cb      	b.n	800122c <ADC_Enable+0x1c>
      wait_loop_index--;
 8001294:	9b01      	ldr	r3, [sp, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	e7e2      	b.n	8001262 <ADC_Enable+0x52>
 800129c:	80000017 	.word	0x80000017
 80012a0:	20000000 	.word	0x20000000
 80012a4:	000f4240 	.word	0x000f4240

080012a8 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80012a8:	2204      	movs	r2, #4
 80012aa:	6803      	ldr	r3, [r0, #0]
{
 80012ac:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80012ae:	6899      	ldr	r1, [r3, #8]
{
 80012b0:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80012b2:	4211      	tst	r1, r2
 80012b4:	d101      	bne.n	80012ba <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012b6:	2000      	movs	r0, #0
}
 80012b8:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80012ba:	6899      	ldr	r1, [r3, #8]
 80012bc:	4211      	tst	r1, r2
 80012be:	d006      	beq.n	80012ce <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80012c0:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80012c2:	0792      	lsls	r2, r2, #30
 80012c4:	d403      	bmi.n	80012ce <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80012c6:	2210      	movs	r2, #16
 80012c8:	6899      	ldr	r1, [r3, #8]
 80012ca:	430a      	orrs	r2, r1
 80012cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80012ce:	f7ff fa1f 	bl	8000710 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80012d2:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 80012d4:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	422b      	tst	r3, r5
 80012dc:	d0eb      	beq.n	80012b6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80012de:	f7ff fa17 	bl	8000710 <HAL_GetTick>
 80012e2:	1b80      	subs	r0, r0, r6
 80012e4:	2802      	cmp	r0, #2
 80012e6:	d9f6      	bls.n	80012d6 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012e8:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ea:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ec:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80012ee:	4313      	orrs	r3, r2
 80012f0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80012f4:	4303      	orrs	r3, r0
 80012f6:	64a3      	str	r3, [r4, #72]	; 0x48
 80012f8:	e7de      	b.n	80012b8 <ADC_ConversionStop+0x10>

080012fa <HAL_ADC_MspInit>:
 80012fa:	4770      	bx	lr

080012fc <HAL_ADC_Init>:
{
 80012fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001302:	2c00      	cmp	r4, #0
 8001304:	d072      	beq.n	80013ec <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001306:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001308:	2b00      	cmp	r3, #0
 800130a:	d106      	bne.n	800131a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 800130c:	0022      	movs	r2, r4
 800130e:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8001310:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 8001312:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001314:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001316:	f7ff fff0 	bl	80012fa <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800131a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800131c:	06db      	lsls	r3, r3, #27
 800131e:	d500      	bpl.n	8001322 <HAL_ADC_Init+0x26>
 8001320:	e079      	b.n	8001416 <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001322:	2204      	movs	r2, #4
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	6898      	ldr	r0, [r3, #8]
 8001328:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800132a:	d000      	beq.n	800132e <HAL_ADC_Init+0x32>
 800132c:	e073      	b.n	8001416 <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800132e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001330:	4942      	ldr	r1, [pc, #264]	; (800143c <HAL_ADC_Init+0x140>)
 8001332:	4011      	ands	r1, r2
 8001334:	2202      	movs	r2, #2
 8001336:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001338:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 800133a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	400a      	ands	r2, r1
 8001340:	2a01      	cmp	r2, #1
 8001342:	d000      	beq.n	8001346 <HAL_ADC_Init+0x4a>
 8001344:	e06d      	b.n	8001422 <HAL_ADC_Init+0x126>
 8001346:	6819      	ldr	r1, [r3, #0]
 8001348:	4211      	tst	r1, r2
 800134a:	d102      	bne.n	8001352 <HAL_ADC_Init+0x56>
 800134c:	68da      	ldr	r2, [r3, #12]
 800134e:	0412      	lsls	r2, r2, #16
 8001350:	d567      	bpl.n	8001422 <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	493a      	ldr	r1, [pc, #232]	; (8001440 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001356:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001358:	400a      	ands	r2, r1
 800135a:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800135c:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800135e:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001360:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8001362:	69e2      	ldr	r2, [r4, #28]
 8001364:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001366:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001368:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800136a:	3a01      	subs	r2, #1
 800136c:	1e56      	subs	r6, r2, #1
 800136e:	41b2      	sbcs	r2, r6
 8001370:	0316      	lsls	r6, r2, #12
 8001372:	68e2      	ldr	r2, [r4, #12]
 8001374:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001376:	6922      	ldr	r2, [r4, #16]
 8001378:	430f      	orrs	r7, r1
 800137a:	2a02      	cmp	r2, #2
 800137c:	d100      	bne.n	8001380 <HAL_ADC_Init+0x84>
 800137e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001380:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001382:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001384:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8001386:	433a      	orrs	r2, r7
 8001388:	4332      	orrs	r2, r6
 800138a:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800138c:	2901      	cmp	r1, #1
 800138e:	d104      	bne.n	800139a <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001390:	2d00      	cmp	r5, #0
 8001392:	d12c      	bne.n	80013ee <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0249      	lsls	r1, r1, #9
 8001398:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800139a:	20c2      	movs	r0, #194	; 0xc2
 800139c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800139e:	30ff      	adds	r0, #255	; 0xff
 80013a0:	4281      	cmp	r1, r0
 80013a2:	d002      	beq.n	80013aa <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80013a4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80013a6:	4301      	orrs	r1, r0
 80013a8:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013aa:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80013ac:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013ae:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80013b0:	4311      	orrs	r1, r2
 80013b2:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013b4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80013b6:	4281      	cmp	r1, r0
 80013b8:	d002      	beq.n	80013c0 <HAL_ADC_Init+0xc4>
 80013ba:	1e48      	subs	r0, r1, #1
 80013bc:	2806      	cmp	r0, #6
 80013be:	d807      	bhi.n	80013d0 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013c0:	2507      	movs	r5, #7
 80013c2:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80013c4:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80013c6:	43a8      	bics	r0, r5
 80013c8:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80013ca:	6958      	ldr	r0, [r3, #20]
 80013cc:	4301      	orrs	r1, r0
 80013ce:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	491c      	ldr	r1, [pc, #112]	; (8001444 <HAL_ADC_Init+0x148>)
 80013d4:	400b      	ands	r3, r1
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d111      	bne.n	80013fe <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 80013da:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80013dc:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80013de:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 80013e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013e2:	4393      	bics	r3, r2
 80013e4:	001a      	movs	r2, r3
 80013e6:	2301      	movs	r3, #1
 80013e8:	4313      	orrs	r3, r2
 80013ea:	6463      	str	r3, [r4, #68]	; 0x44
}
 80013ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ee:	2020      	movs	r0, #32
 80013f0:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80013f2:	4328      	orrs	r0, r5
 80013f4:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80013f8:	4301      	orrs	r1, r0
 80013fa:	64a1      	str	r1, [r4, #72]	; 0x48
 80013fc:	e7cd      	b.n	800139a <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 80013fe:	2212      	movs	r2, #18
 8001400:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001402:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001404:	4393      	bics	r3, r2
 8001406:	001a      	movs	r2, r3
 8001408:	2310      	movs	r3, #16
 800140a:	4313      	orrs	r3, r2
 800140c:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800140e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001410:	4303      	orrs	r3, r0
 8001412:	64a3      	str	r3, [r4, #72]	; 0x48
 8001414:	e7ea      	b.n	80013ec <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001416:	2310      	movs	r3, #16
 8001418:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 800141a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141c:	4313      	orrs	r3, r2
 800141e:	6463      	str	r3, [r4, #68]	; 0x44
 8001420:	e7e4      	b.n	80013ec <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 8001422:	2118      	movs	r1, #24
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	438a      	bics	r2, r1
 8001428:	68a1      	ldr	r1, [r4, #8]
 800142a:	430a      	orrs	r2, r1
 800142c:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800142e:	6919      	ldr	r1, [r3, #16]
 8001430:	6862      	ldr	r2, [r4, #4]
 8001432:	0089      	lsls	r1, r1, #2
 8001434:	0889      	lsrs	r1, r1, #2
 8001436:	4311      	orrs	r1, r2
 8001438:	6119      	str	r1, [r3, #16]
 800143a:	e78a      	b.n	8001352 <HAL_ADC_Init+0x56>
 800143c:	fffffefd 	.word	0xfffffefd
 8001440:	fffe0219 	.word	0xfffe0219
 8001444:	833fffe7 	.word	0x833fffe7

08001448 <HAL_ADC_MspDeInit>:
 8001448:	4770      	bx	lr
	...

0800144c <HAL_ADC_DeInit>:
{
 800144c:	b570      	push	{r4, r5, r6, lr}
 800144e:	0004      	movs	r4, r0
     return HAL_ERROR;
 8001450:	2501      	movs	r5, #1
  if(hadc == NULL)
 8001452:	2800      	cmp	r0, #0
 8001454:	d011      	beq.n	800147a <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8001456:	2302      	movs	r3, #2
 8001458:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800145a:	4313      	orrs	r3, r2
 800145c:	6443      	str	r3, [r0, #68]	; 0x44
  tmp_hal_status = ADC_ConversionStop(hadc);
 800145e:	f7ff ff23 	bl	80012a8 <ADC_ConversionStop>
 8001462:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8001464:	d133      	bne.n	80014ce <HAL_ADC_DeInit+0x82>
    tmp_hal_status = ADC_Disable(hadc);
 8001466:	0020      	movs	r0, r4
 8001468:	f7ff fe98 	bl	800119c <ADC_Disable>
 800146c:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 800146e:	2801      	cmp	r0, #1
 8001470:	d105      	bne.n	800147e <HAL_ADC_DeInit+0x32>
{
 8001472:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8001474:	2300      	movs	r3, #0
 8001476:	3440      	adds	r4, #64	; 0x40
 8001478:	7023      	strb	r3, [r4, #0]
}
 800147a:	0028      	movs	r0, r5
 800147c:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 800147e:	2301      	movs	r3, #1
 8001480:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 8001482:	219f      	movs	r1, #159	; 0x9f
 8001484:	6823      	ldr	r3, [r4, #0]
    HAL_ADC_MspDeInit(hadc);
 8001486:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	438a      	bics	r2, r1
 800148c:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD   | ADC_FLAG_OVR  |
 800148e:	6019      	str	r1, [r3, #0]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_DISCEN |
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	4910      	ldr	r1, [pc, #64]	; (80014d4 <HAL_ADC_DeInit+0x88>)
 8001494:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 8001496:	2107      	movs	r1, #7
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_DISCEN |
 8001498:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	0892      	lsrs	r2, r2, #2
 80014a0:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 80014a2:	695a      	ldr	r2, [r3, #20]
 80014a4:	438a      	bics	r2, r1
 80014a6:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 80014a8:	6a1a      	ldr	r2, [r3, #32]
 80014aa:	490b      	ldr	r1, [pc, #44]	; (80014d8 <HAL_ADC_DeInit+0x8c>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	621a      	str	r2, [r3, #32]
    hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 80014b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ADC->CCR &= ~(ADC_CCR_ALL);
 80014b2:	490a      	ldr	r1, [pc, #40]	; (80014dc <HAL_ADC_DeInit+0x90>)
    hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 80014b4:	0cd2      	lsrs	r2, r2, #19
 80014b6:	04d2      	lsls	r2, r2, #19
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
    ADC->CCR &= ~(ADC_CCR_ALL);
 80014ba:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <HAL_ADC_DeInit+0x94>)
 80014bc:	6813      	ldr	r3, [r2, #0]
 80014be:	400b      	ands	r3, r1
 80014c0:	6013      	str	r3, [r2, #0]
    HAL_ADC_MspDeInit(hadc);
 80014c2:	f7ff ffc1 	bl	8001448 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80014c6:	2300      	movs	r3, #0
 80014c8:	64a3      	str	r3, [r4, #72]	; 0x48
    hadc->State = HAL_ADC_STATE_RESET; 
 80014ca:	6463      	str	r3, [r4, #68]	; 0x44
 80014cc:	e7d2      	b.n	8001474 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 80014ce:	2801      	cmp	r0, #1
 80014d0:	d0cf      	beq.n	8001472 <HAL_ADC_DeInit+0x26>
 80014d2:	e7d6      	b.n	8001482 <HAL_ADC_DeInit+0x36>
 80014d4:	833e0200 	.word	0x833e0200
 80014d8:	f000f000 	.word	0xf000f000
 80014dc:	ff3fffff 	.word	0xff3fffff
 80014e0:	40012708 	.word	0x40012708

080014e4 <HAL_ADC_Start_IT>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014e4:	6803      	ldr	r3, [r0, #0]
{
 80014e6:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014e8:	689b      	ldr	r3, [r3, #8]
{
 80014ea:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80014ec:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80014ee:	075b      	lsls	r3, r3, #29
 80014f0:	d420      	bmi.n	8001534 <HAL_ADC_Start_IT+0x50>
    __HAL_LOCK(hadc);
 80014f2:	0025      	movs	r5, r4
 80014f4:	3540      	adds	r5, #64	; 0x40
 80014f6:	782b      	ldrb	r3, [r5, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d01b      	beq.n	8001534 <HAL_ADC_Start_IT+0x50>
 80014fc:	2301      	movs	r3, #1
 80014fe:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001500:	69e3      	ldr	r3, [r4, #28]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d111      	bne.n	800152a <HAL_ADC_Start_IT+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8001506:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <HAL_ADC_Start_IT+0x70>)
      switch(hadc->Init.EOCSelection)
 800150a:	6961      	ldr	r1, [r4, #20]
      ADC_STATE_CLR_SET(hadc->State,
 800150c:	401a      	ands	r2, r3
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4313      	orrs	r3, r2
 8001514:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 8001516:	2300      	movs	r3, #0
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001518:	221c      	movs	r2, #28
      ADC_CLEAR_ERRORCODE(hadc);
 800151a:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 800151c:	702b      	strb	r3, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800151e:	6823      	ldr	r3, [r4, #0]
 8001520:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 8001522:	2908      	cmp	r1, #8
 8001524:	d007      	beq.n	8001536 <HAL_ADC_Start_IT+0x52>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001526:	6859      	ldr	r1, [r3, #4]
 8001528:	e00b      	b.n	8001542 <HAL_ADC_Start_IT+0x5e>
      tmp_hal_status = ADC_Enable(hadc);
 800152a:	0020      	movs	r0, r4
 800152c:	f7ff fe70 	bl	8001210 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001530:	2800      	cmp	r0, #0
 8001532:	d0e8      	beq.n	8001506 <HAL_ADC_Start_IT+0x22>
}
 8001534:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001536:	2104      	movs	r1, #4
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	438a      	bics	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 800153e:	2218      	movs	r2, #24
 8001540:	6859      	ldr	r1, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001542:	430a      	orrs	r2, r1
 8001544:	605a      	str	r2, [r3, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001546:	2204      	movs	r2, #4
 8001548:	6899      	ldr	r1, [r3, #8]
 800154a:	2000      	movs	r0, #0
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e7f0      	b.n	8001534 <HAL_ADC_Start_IT+0x50>
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	fffff0fe 	.word	0xfffff0fe

08001558 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001558:	6803      	ldr	r3, [r0, #0]
 800155a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800155c:	4770      	bx	lr

0800155e <HAL_ADC_LevelOutOfWindowCallback>:
 800155e:	4770      	bx	lr

08001560 <HAL_ADC_ErrorCallback>:
}
 8001560:	4770      	bx	lr
	...

08001564 <HAL_ADC_IRQHandler>:
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8001564:	2204      	movs	r2, #4
 8001566:	6803      	ldr	r3, [r0, #0]
{
 8001568:	b570      	push	{r4, r5, r6, lr}
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800156a:	6819      	ldr	r1, [r3, #0]
{
 800156c:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800156e:	4211      	tst	r1, r2
 8001570:	d002      	beq.n	8001578 <HAL_ADC_IRQHandler+0x14>
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	4211      	tst	r1, r2
 8001576:	d106      	bne.n	8001586 <HAL_ADC_IRQHandler+0x22>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001578:	2208      	movs	r2, #8
 800157a:	6819      	ldr	r1, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 800157c:	4211      	tst	r1, r2
 800157e:	d028      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x6e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	4211      	tst	r1, r2
 8001584:	d025      	beq.n	80015d2 <HAL_ADC_IRQHandler+0x6e>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001586:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001588:	06d2      	lsls	r2, r2, #27
 800158a:	d404      	bmi.n	8001596 <HAL_ADC_IRQHandler+0x32>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800158c:	2280      	movs	r2, #128	; 0x80
 800158e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	430a      	orrs	r2, r1
 8001594:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001596:	22c0      	movs	r2, #192	; 0xc0
 8001598:	68d9      	ldr	r1, [r3, #12]
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	4211      	tst	r1, r2
 800159e:	d112      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x62>
 80015a0:	6a22      	ldr	r2, [r4, #32]
 80015a2:	2a00      	cmp	r2, #0
 80015a4:	d10f      	bne.n	80015c6 <HAL_ADC_IRQHandler+0x62>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	0712      	lsls	r2, r2, #28
 80015aa:	d50c      	bpl.n	80015c6 <HAL_ADC_IRQHandler+0x62>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015ac:	689a      	ldr	r2, [r3, #8]
 80015ae:	0752      	lsls	r2, r2, #29
 80015b0:	d43c      	bmi.n	800162c <HAL_ADC_IRQHandler+0xc8>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015b2:	210c      	movs	r1, #12
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	438a      	bics	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80015ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015bc:	4a20      	ldr	r2, [pc, #128]	; (8001640 <HAL_ADC_IRQHandler+0xdc>)
 80015be:	401a      	ands	r2, r3
 80015c0:	2301      	movs	r3, #1
 80015c2:	4313      	orrs	r3, r2
 80015c4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 80015c6:	0020      	movs	r0, r4
 80015c8:	f7fe ff90 	bl	80004ec <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80015cc:	220c      	movs	r2, #12
 80015ce:	6823      	ldr	r3, [r4, #0]
 80015d0:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80015d2:	2580      	movs	r5, #128	; 0x80
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	422a      	tst	r2, r5
 80015da:	d00c      	beq.n	80015f6 <HAL_ADC_IRQHandler+0x92>
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	422b      	tst	r3, r5
 80015e0:	d009      	beq.n	80015f6 <HAL_ADC_IRQHandler+0x92>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80015e6:	025b      	lsls	r3, r3, #9
 80015e8:	4313      	orrs	r3, r2
 80015ea:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015ec:	0020      	movs	r0, r4
 80015ee:	f7ff ffb6 	bl	800155e <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015f2:	6823      	ldr	r3, [r4, #0]
 80015f4:	601d      	str	r5, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80015f6:	2210      	movs	r2, #16
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	4211      	tst	r1, r2
 80015fe:	d014      	beq.n	800162a <HAL_ADC_IRQHandler+0xc6>
 8001600:	6859      	ldr	r1, [r3, #4]
 8001602:	4211      	tst	r1, r2
 8001604:	d011      	beq.n	800162a <HAL_ADC_IRQHandler+0xc6>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001606:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001608:	2a01      	cmp	r2, #1
 800160a:	d002      	beq.n	8001612 <HAL_ADC_IRQHandler+0xae>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800160c:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800160e:	07d2      	lsls	r2, r2, #31
 8001610:	d508      	bpl.n	8001624 <HAL_ADC_IRQHandler+0xc0>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001612:	2202      	movs	r2, #2
 8001614:	6ca1      	ldr	r1, [r4, #72]	; 0x48
      HAL_ADC_ErrorCallback(hadc);
 8001616:	0020      	movs	r0, r4
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001618:	430a      	orrs	r2, r1
 800161a:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800161c:	2210      	movs	r2, #16
 800161e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001620:	f7ff ff9e 	bl	8001560 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001624:	2210      	movs	r2, #16
 8001626:	6823      	ldr	r3, [r4, #0]
 8001628:	601a      	str	r2, [r3, #0]
}
 800162a:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800162c:	2320      	movs	r3, #32
 800162e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001630:	4313      	orrs	r3, r2
 8001632:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001634:	2301      	movs	r3, #1
 8001636:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001638:	4313      	orrs	r3, r2
 800163a:	64a3      	str	r3, [r4, #72]	; 0x48
 800163c:	e7c3      	b.n	80015c6 <HAL_ADC_IRQHandler+0x62>
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	fffffefe 	.word	0xfffffefe

08001644 <HAL_ADC_ConfigChannel>:
{
 8001644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001646:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 8001648:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800164a:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800164c:	3440      	adds	r4, #64	; 0x40
 800164e:	7823      	ldrb	r3, [r4, #0]
{
 8001650:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 8001652:	2002      	movs	r0, #2
 8001654:	2b01      	cmp	r3, #1
 8001656:	d02b      	beq.n	80016b0 <HAL_ADC_ConfigChannel+0x6c>
 8001658:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800165a:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800165c:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800165e:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 8001660:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001662:	0740      	lsls	r0, r0, #29
 8001664:	d452      	bmi.n	800170c <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 8001666:	482c      	ldr	r0, [pc, #176]	; (8001718 <HAL_ADC_ConfigChannel+0xd4>)
 8001668:	684f      	ldr	r7, [r1, #4]
 800166a:	680d      	ldr	r5, [r1, #0]
 800166c:	4287      	cmp	r7, r0
 800166e:	d03b      	beq.n	80016e8 <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001670:	40ab      	lsls	r3, r5
 8001672:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001674:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001676:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001678:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800167a:	4338      	orrs	r0, r7
 800167c:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800167e:	429e      	cmp	r6, r3
 8001680:	d00f      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x5e>
 8001682:	3e01      	subs	r6, #1
 8001684:	2e06      	cmp	r6, #6
 8001686:	d90c      	bls.n	80016a2 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001688:	688b      	ldr	r3, [r1, #8]
 800168a:	2107      	movs	r1, #7
 800168c:	6950      	ldr	r0, [r2, #20]
 800168e:	4008      	ands	r0, r1
 8001690:	4283      	cmp	r3, r0
 8001692:	d006      	beq.n	80016a2 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001694:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001696:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001698:	4388      	bics	r0, r1
 800169a:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800169c:	6950      	ldr	r0, [r2, #20]
 800169e:	4303      	orrs	r3, r0
 80016a0:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016a2:	002b      	movs	r3, r5
 80016a4:	3b10      	subs	r3, #16
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d903      	bls.n	80016b2 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016aa:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80016ac:	2300      	movs	r3, #0
 80016ae:	7023      	strb	r3, [r4, #0]
}
 80016b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_ADC_ConfigChannel+0xd8>)
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	6819      	ldr	r1, [r3, #0]
 80016b8:	2d10      	cmp	r5, #16
 80016ba:	d013      	beq.n	80016e4 <HAL_ADC_ConfigChannel+0xa0>
 80016bc:	03d2      	lsls	r2, r2, #15
 80016be:	430a      	orrs	r2, r1
 80016c0:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016c2:	2d10      	cmp	r5, #16
 80016c4:	d1f1      	bne.n	80016aa <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016c6:	4b16      	ldr	r3, [pc, #88]	; (8001720 <HAL_ADC_ConfigChannel+0xdc>)
 80016c8:	4916      	ldr	r1, [pc, #88]	; (8001724 <HAL_ADC_ConfigChannel+0xe0>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	f7fe fd26 	bl	800011c <__udivsi3>
 80016d0:	230a      	movs	r3, #10
 80016d2:	4358      	muls	r0, r3
 80016d4:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80016d6:	9b01      	ldr	r3, [sp, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0e6      	beq.n	80016aa <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80016dc:	9b01      	ldr	r3, [sp, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	9301      	str	r3, [sp, #4]
 80016e2:	e7f8      	b.n	80016d6 <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016e4:	0412      	lsls	r2, r2, #16
 80016e6:	e7ea      	b.n	80016be <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016e8:	40ab      	lsls	r3, r5
 80016ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80016ec:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016ee:	002b      	movs	r3, r5
 80016f0:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80016f2:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d8d8      	bhi.n	80016aa <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_ADC_ConfigChannel+0xd8>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2d10      	cmp	r5, #16
 80016fe:	d003      	beq.n	8001708 <HAL_ADC_ConfigChannel+0xc4>
 8001700:	4909      	ldr	r1, [pc, #36]	; (8001728 <HAL_ADC_ConfigChannel+0xe4>)
 8001702:	400a      	ands	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	e7d0      	b.n	80016aa <HAL_ADC_ConfigChannel+0x66>
 8001708:	4908      	ldr	r1, [pc, #32]	; (800172c <HAL_ADC_ConfigChannel+0xe8>)
 800170a:	e7fa      	b.n	8001702 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170c:	2220      	movs	r2, #32
 800170e:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001710:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001712:	430a      	orrs	r2, r1
 8001714:	646a      	str	r2, [r5, #68]	; 0x44
 8001716:	e7c9      	b.n	80016ac <HAL_ADC_ConfigChannel+0x68>
 8001718:	00001001 	.word	0x00001001
 800171c:	40012708 	.word	0x40012708
 8001720:	20000000 	.word	0x20000000
 8001724:	000f4240 	.word	0x000f4240
 8001728:	ffbfffff 	.word	0xffbfffff
 800172c:	ff7fffff 	.word	0xff7fffff

08001730 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001730:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001732:	0005      	movs	r5, r0
 8001734:	3540      	adds	r5, #64	; 0x40
 8001736:	782b      	ldrb	r3, [r5, #0]
{
 8001738:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800173a:	2002      	movs	r0, #2
 800173c:	2b01      	cmp	r3, #1
 800173e:	d039      	beq.n	80017b4 <HAL_ADCEx_Calibration_Start+0x84>
 8001740:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001742:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8001744:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	400a      	ands	r2, r1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d105      	bne.n	800175c <HAL_ADCEx_Calibration_Start+0x2c>
 8001750:	6819      	ldr	r1, [r3, #0]
 8001752:	4211      	tst	r1, r2
 8001754:	d12f      	bne.n	80017b6 <HAL_ADCEx_Calibration_Start+0x86>
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	0412      	lsls	r2, r2, #16
 800175a:	d42c      	bmi.n	80017b6 <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 800175c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800175e:	4919      	ldr	r1, [pc, #100]	; (80017c4 <HAL_ADCEx_Calibration_Start+0x94>)
 8001760:	4011      	ands	r1, r2
 8001762:	2202      	movs	r2, #2
 8001764:	430a      	orrs	r2, r1
 8001766:	6462      	str	r2, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001768:	2280      	movs	r2, #128	; 0x80
 800176a:	6899      	ldr	r1, [r3, #8]
 800176c:	0612      	lsls	r2, r2, #24
 800176e:	430a      	orrs	r2, r1
 8001770:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001772:	f7fe ffcd 	bl	8000710 <HAL_GetTick>
 8001776:	0006      	movs	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001778:	6823      	ldr	r3, [r4, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <HAL_ADCEx_Calibration_Start+0x66>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001780:	2203      	movs	r2, #3
 8001782:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001784:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	4393      	bics	r3, r2
 8001788:	001a      	movs	r2, r3
 800178a:	2301      	movs	r3, #1
 800178c:	4313      	orrs	r3, r2
 800178e:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001790:	2300      	movs	r3, #0
 8001792:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8001794:	e00e      	b.n	80017b4 <HAL_ADCEx_Calibration_Start+0x84>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001796:	f7fe ffbb 	bl	8000710 <HAL_GetTick>
 800179a:	1b80      	subs	r0, r0, r6
 800179c:	2802      	cmp	r0, #2
 800179e:	d9eb      	bls.n	8001778 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80017a0:	2212      	movs	r2, #18
 80017a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 80017a4:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80017a6:	4393      	bics	r3, r2
 80017a8:	001a      	movs	r2, r3
 80017aa:	2310      	movs	r3, #16
 80017ac:	4313      	orrs	r3, r2
 80017ae:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80017b0:	2300      	movs	r3, #0
 80017b2:	702b      	strb	r3, [r5, #0]
}
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017b6:	2320      	movs	r3, #32
 80017b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80017ba:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017bc:	4313      	orrs	r3, r2
 80017be:	6463      	str	r3, [r4, #68]	; 0x44
 80017c0:	e7e6      	b.n	8001790 <HAL_ADCEx_Calibration_Start+0x60>
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	fffffefd 	.word	0xfffffefd

080017c8 <__errno>:
 80017c8:	4b01      	ldr	r3, [pc, #4]	; (80017d0 <__errno+0x8>)
 80017ca:	6818      	ldr	r0, [r3, #0]
 80017cc:	4770      	bx	lr
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	20000004 	.word	0x20000004

080017d4 <__libc_init_array>:
 80017d4:	b570      	push	{r4, r5, r6, lr}
 80017d6:	2600      	movs	r6, #0
 80017d8:	4d0c      	ldr	r5, [pc, #48]	; (800180c <__libc_init_array+0x38>)
 80017da:	4c0d      	ldr	r4, [pc, #52]	; (8001810 <__libc_init_array+0x3c>)
 80017dc:	1b64      	subs	r4, r4, r5
 80017de:	10a4      	asrs	r4, r4, #2
 80017e0:	42a6      	cmp	r6, r4
 80017e2:	d109      	bne.n	80017f8 <__libc_init_array+0x24>
 80017e4:	2600      	movs	r6, #0
 80017e6:	f000 ff5d 	bl	80026a4 <_init>
 80017ea:	4d0a      	ldr	r5, [pc, #40]	; (8001814 <__libc_init_array+0x40>)
 80017ec:	4c0a      	ldr	r4, [pc, #40]	; (8001818 <__libc_init_array+0x44>)
 80017ee:	1b64      	subs	r4, r4, r5
 80017f0:	10a4      	asrs	r4, r4, #2
 80017f2:	42a6      	cmp	r6, r4
 80017f4:	d105      	bne.n	8001802 <__libc_init_array+0x2e>
 80017f6:	bd70      	pop	{r4, r5, r6, pc}
 80017f8:	00b3      	lsls	r3, r6, #2
 80017fa:	58eb      	ldr	r3, [r5, r3]
 80017fc:	4798      	blx	r3
 80017fe:	3601      	adds	r6, #1
 8001800:	e7ee      	b.n	80017e0 <__libc_init_array+0xc>
 8001802:	00b3      	lsls	r3, r6, #2
 8001804:	58eb      	ldr	r3, [r5, r3]
 8001806:	4798      	blx	r3
 8001808:	3601      	adds	r6, #1
 800180a:	e7f2      	b.n	80017f2 <__libc_init_array+0x1e>
 800180c:	080027a0 	.word	0x080027a0
 8001810:	080027a0 	.word	0x080027a0
 8001814:	080027a0 	.word	0x080027a0
 8001818:	080027a4 	.word	0x080027a4

0800181c <memcpy>:
 800181c:	2300      	movs	r3, #0
 800181e:	b510      	push	{r4, lr}
 8001820:	429a      	cmp	r2, r3
 8001822:	d100      	bne.n	8001826 <memcpy+0xa>
 8001824:	bd10      	pop	{r4, pc}
 8001826:	5ccc      	ldrb	r4, [r1, r3]
 8001828:	54c4      	strb	r4, [r0, r3]
 800182a:	3301      	adds	r3, #1
 800182c:	e7f8      	b.n	8001820 <memcpy+0x4>

0800182e <memset>:
 800182e:	0003      	movs	r3, r0
 8001830:	1882      	adds	r2, r0, r2
 8001832:	4293      	cmp	r3, r2
 8001834:	d100      	bne.n	8001838 <memset+0xa>
 8001836:	4770      	bx	lr
 8001838:	7019      	strb	r1, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	e7f9      	b.n	8001832 <memset+0x4>
	...

08001840 <iprintf>:
 8001840:	b40f      	push	{r0, r1, r2, r3}
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <iprintf+0x30>)
 8001844:	b513      	push	{r0, r1, r4, lr}
 8001846:	681c      	ldr	r4, [r3, #0]
 8001848:	2c00      	cmp	r4, #0
 800184a:	d005      	beq.n	8001858 <iprintf+0x18>
 800184c:	69a3      	ldr	r3, [r4, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d102      	bne.n	8001858 <iprintf+0x18>
 8001852:	0020      	movs	r0, r4
 8001854:	f000 f850 	bl	80018f8 <__sinit>
 8001858:	ab05      	add	r3, sp, #20
 800185a:	9a04      	ldr	r2, [sp, #16]
 800185c:	68a1      	ldr	r1, [r4, #8]
 800185e:	0020      	movs	r0, r4
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	f000 f965 	bl	8001b30 <_vfiprintf_r>
 8001866:	bc16      	pop	{r1, r2, r4}
 8001868:	bc08      	pop	{r3}
 800186a:	b004      	add	sp, #16
 800186c:	4718      	bx	r3
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	20000004 	.word	0x20000004

08001874 <_cleanup_r>:
 8001874:	b510      	push	{r4, lr}
 8001876:	4902      	ldr	r1, [pc, #8]	; (8001880 <_cleanup_r+0xc>)
 8001878:	f000 f8b2 	bl	80019e0 <_fwalk_reent>
 800187c:	bd10      	pop	{r4, pc}
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	0800242d 	.word	0x0800242d

08001884 <std.isra.0>:
 8001884:	2300      	movs	r3, #0
 8001886:	b510      	push	{r4, lr}
 8001888:	0004      	movs	r4, r0
 800188a:	6003      	str	r3, [r0, #0]
 800188c:	6043      	str	r3, [r0, #4]
 800188e:	6083      	str	r3, [r0, #8]
 8001890:	8181      	strh	r1, [r0, #12]
 8001892:	6643      	str	r3, [r0, #100]	; 0x64
 8001894:	81c2      	strh	r2, [r0, #14]
 8001896:	6103      	str	r3, [r0, #16]
 8001898:	6143      	str	r3, [r0, #20]
 800189a:	6183      	str	r3, [r0, #24]
 800189c:	0019      	movs	r1, r3
 800189e:	2208      	movs	r2, #8
 80018a0:	305c      	adds	r0, #92	; 0x5c
 80018a2:	f7ff ffc4 	bl	800182e <memset>
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <std.isra.0+0x38>)
 80018a8:	6224      	str	r4, [r4, #32]
 80018aa:	6263      	str	r3, [r4, #36]	; 0x24
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <std.isra.0+0x3c>)
 80018ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80018b0:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <std.isra.0+0x40>)
 80018b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <std.isra.0+0x44>)
 80018b6:	6323      	str	r3, [r4, #48]	; 0x30
 80018b8:	bd10      	pop	{r4, pc}
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	0800209d 	.word	0x0800209d
 80018c0:	080020c5 	.word	0x080020c5
 80018c4:	080020fd 	.word	0x080020fd
 80018c8:	08002129 	.word	0x08002129

080018cc <__sfmoreglue>:
 80018cc:	b570      	push	{r4, r5, r6, lr}
 80018ce:	2568      	movs	r5, #104	; 0x68
 80018d0:	1e4a      	subs	r2, r1, #1
 80018d2:	4355      	muls	r5, r2
 80018d4:	000e      	movs	r6, r1
 80018d6:	0029      	movs	r1, r5
 80018d8:	3174      	adds	r1, #116	; 0x74
 80018da:	f000 f8a3 	bl	8001a24 <_malloc_r>
 80018de:	1e04      	subs	r4, r0, #0
 80018e0:	d008      	beq.n	80018f4 <__sfmoreglue+0x28>
 80018e2:	2100      	movs	r1, #0
 80018e4:	002a      	movs	r2, r5
 80018e6:	6001      	str	r1, [r0, #0]
 80018e8:	6046      	str	r6, [r0, #4]
 80018ea:	300c      	adds	r0, #12
 80018ec:	60a0      	str	r0, [r4, #8]
 80018ee:	3268      	adds	r2, #104	; 0x68
 80018f0:	f7ff ff9d 	bl	800182e <memset>
 80018f4:	0020      	movs	r0, r4
 80018f6:	bd70      	pop	{r4, r5, r6, pc}

080018f8 <__sinit>:
 80018f8:	6983      	ldr	r3, [r0, #24]
 80018fa:	b513      	push	{r0, r1, r4, lr}
 80018fc:	0004      	movs	r4, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d128      	bne.n	8001954 <__sinit+0x5c>
 8001902:	6483      	str	r3, [r0, #72]	; 0x48
 8001904:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001906:	6503      	str	r3, [r0, #80]	; 0x50
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <__sinit+0x60>)
 800190a:	4a14      	ldr	r2, [pc, #80]	; (800195c <__sinit+0x64>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6282      	str	r2, [r0, #40]	; 0x28
 8001910:	9301      	str	r3, [sp, #4]
 8001912:	4298      	cmp	r0, r3
 8001914:	d101      	bne.n	800191a <__sinit+0x22>
 8001916:	2301      	movs	r3, #1
 8001918:	6183      	str	r3, [r0, #24]
 800191a:	0020      	movs	r0, r4
 800191c:	f000 f820 	bl	8001960 <__sfp>
 8001920:	6060      	str	r0, [r4, #4]
 8001922:	0020      	movs	r0, r4
 8001924:	f000 f81c 	bl	8001960 <__sfp>
 8001928:	60a0      	str	r0, [r4, #8]
 800192a:	0020      	movs	r0, r4
 800192c:	f000 f818 	bl	8001960 <__sfp>
 8001930:	2200      	movs	r2, #0
 8001932:	60e0      	str	r0, [r4, #12]
 8001934:	2104      	movs	r1, #4
 8001936:	6860      	ldr	r0, [r4, #4]
 8001938:	f7ff ffa4 	bl	8001884 <std.isra.0>
 800193c:	2201      	movs	r2, #1
 800193e:	2109      	movs	r1, #9
 8001940:	68a0      	ldr	r0, [r4, #8]
 8001942:	f7ff ff9f 	bl	8001884 <std.isra.0>
 8001946:	2202      	movs	r2, #2
 8001948:	2112      	movs	r1, #18
 800194a:	68e0      	ldr	r0, [r4, #12]
 800194c:	f7ff ff9a 	bl	8001884 <std.isra.0>
 8001950:	2301      	movs	r3, #1
 8001952:	61a3      	str	r3, [r4, #24]
 8001954:	bd13      	pop	{r0, r1, r4, pc}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	08002708 	.word	0x08002708
 800195c:	08001875 	.word	0x08001875

08001960 <__sfp>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <__sfp+0x7c>)
 8001964:	0007      	movs	r7, r0
 8001966:	681e      	ldr	r6, [r3, #0]
 8001968:	69b3      	ldr	r3, [r6, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d102      	bne.n	8001974 <__sfp+0x14>
 800196e:	0030      	movs	r0, r6
 8001970:	f7ff ffc2 	bl	80018f8 <__sinit>
 8001974:	3648      	adds	r6, #72	; 0x48
 8001976:	68b4      	ldr	r4, [r6, #8]
 8001978:	6873      	ldr	r3, [r6, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	d504      	bpl.n	8001988 <__sfp+0x28>
 800197e:	6833      	ldr	r3, [r6, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d007      	beq.n	8001994 <__sfp+0x34>
 8001984:	6836      	ldr	r6, [r6, #0]
 8001986:	e7f6      	b.n	8001976 <__sfp+0x16>
 8001988:	220c      	movs	r2, #12
 800198a:	5ea5      	ldrsh	r5, [r4, r2]
 800198c:	2d00      	cmp	r5, #0
 800198e:	d00d      	beq.n	80019ac <__sfp+0x4c>
 8001990:	3468      	adds	r4, #104	; 0x68
 8001992:	e7f2      	b.n	800197a <__sfp+0x1a>
 8001994:	2104      	movs	r1, #4
 8001996:	0038      	movs	r0, r7
 8001998:	f7ff ff98 	bl	80018cc <__sfmoreglue>
 800199c:	6030      	str	r0, [r6, #0]
 800199e:	2800      	cmp	r0, #0
 80019a0:	d1f0      	bne.n	8001984 <__sfp+0x24>
 80019a2:	230c      	movs	r3, #12
 80019a4:	0004      	movs	r4, r0
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	0020      	movs	r0, r4
 80019aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019ac:	2301      	movs	r3, #1
 80019ae:	0020      	movs	r0, r4
 80019b0:	425b      	negs	r3, r3
 80019b2:	81e3      	strh	r3, [r4, #14]
 80019b4:	3302      	adds	r3, #2
 80019b6:	81a3      	strh	r3, [r4, #12]
 80019b8:	6665      	str	r5, [r4, #100]	; 0x64
 80019ba:	6025      	str	r5, [r4, #0]
 80019bc:	60a5      	str	r5, [r4, #8]
 80019be:	6065      	str	r5, [r4, #4]
 80019c0:	6125      	str	r5, [r4, #16]
 80019c2:	6165      	str	r5, [r4, #20]
 80019c4:	61a5      	str	r5, [r4, #24]
 80019c6:	2208      	movs	r2, #8
 80019c8:	0029      	movs	r1, r5
 80019ca:	305c      	adds	r0, #92	; 0x5c
 80019cc:	f7ff ff2f 	bl	800182e <memset>
 80019d0:	6365      	str	r5, [r4, #52]	; 0x34
 80019d2:	63a5      	str	r5, [r4, #56]	; 0x38
 80019d4:	64a5      	str	r5, [r4, #72]	; 0x48
 80019d6:	64e5      	str	r5, [r4, #76]	; 0x4c
 80019d8:	e7e6      	b.n	80019a8 <__sfp+0x48>
 80019da:	46c0      	nop			; (mov r8, r8)
 80019dc:	08002708 	.word	0x08002708

080019e0 <_fwalk_reent>:
 80019e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019e2:	0004      	movs	r4, r0
 80019e4:	0007      	movs	r7, r0
 80019e6:	2600      	movs	r6, #0
 80019e8:	9101      	str	r1, [sp, #4]
 80019ea:	3448      	adds	r4, #72	; 0x48
 80019ec:	2c00      	cmp	r4, #0
 80019ee:	d101      	bne.n	80019f4 <_fwalk_reent+0x14>
 80019f0:	0030      	movs	r0, r6
 80019f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80019f4:	6863      	ldr	r3, [r4, #4]
 80019f6:	68a5      	ldr	r5, [r4, #8]
 80019f8:	9300      	str	r3, [sp, #0]
 80019fa:	9b00      	ldr	r3, [sp, #0]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	d501      	bpl.n	8001a06 <_fwalk_reent+0x26>
 8001a02:	6824      	ldr	r4, [r4, #0]
 8001a04:	e7f2      	b.n	80019ec <_fwalk_reent+0xc>
 8001a06:	89ab      	ldrh	r3, [r5, #12]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d908      	bls.n	8001a1e <_fwalk_reent+0x3e>
 8001a0c:	220e      	movs	r2, #14
 8001a0e:	5eab      	ldrsh	r3, [r5, r2]
 8001a10:	3301      	adds	r3, #1
 8001a12:	d004      	beq.n	8001a1e <_fwalk_reent+0x3e>
 8001a14:	0029      	movs	r1, r5
 8001a16:	0038      	movs	r0, r7
 8001a18:	9b01      	ldr	r3, [sp, #4]
 8001a1a:	4798      	blx	r3
 8001a1c:	4306      	orrs	r6, r0
 8001a1e:	3568      	adds	r5, #104	; 0x68
 8001a20:	e7eb      	b.n	80019fa <_fwalk_reent+0x1a>
	...

08001a24 <_malloc_r>:
 8001a24:	2303      	movs	r3, #3
 8001a26:	b570      	push	{r4, r5, r6, lr}
 8001a28:	1ccd      	adds	r5, r1, #3
 8001a2a:	439d      	bics	r5, r3
 8001a2c:	3508      	adds	r5, #8
 8001a2e:	0006      	movs	r6, r0
 8001a30:	2d0c      	cmp	r5, #12
 8001a32:	d21e      	bcs.n	8001a72 <_malloc_r+0x4e>
 8001a34:	250c      	movs	r5, #12
 8001a36:	42a9      	cmp	r1, r5
 8001a38:	d81d      	bhi.n	8001a76 <_malloc_r+0x52>
 8001a3a:	0030      	movs	r0, r6
 8001a3c:	f000 fdad 	bl	800259a <__malloc_lock>
 8001a40:	4a25      	ldr	r2, [pc, #148]	; (8001ad8 <_malloc_r+0xb4>)
 8001a42:	6814      	ldr	r4, [r2, #0]
 8001a44:	0021      	movs	r1, r4
 8001a46:	2900      	cmp	r1, #0
 8001a48:	d119      	bne.n	8001a7e <_malloc_r+0x5a>
 8001a4a:	4c24      	ldr	r4, [pc, #144]	; (8001adc <_malloc_r+0xb8>)
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d103      	bne.n	8001a5a <_malloc_r+0x36>
 8001a52:	0030      	movs	r0, r6
 8001a54:	f000 fb10 	bl	8002078 <_sbrk_r>
 8001a58:	6020      	str	r0, [r4, #0]
 8001a5a:	0029      	movs	r1, r5
 8001a5c:	0030      	movs	r0, r6
 8001a5e:	f000 fb0b 	bl	8002078 <_sbrk_r>
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	d12c      	bne.n	8001ac0 <_malloc_r+0x9c>
 8001a66:	230c      	movs	r3, #12
 8001a68:	0030      	movs	r0, r6
 8001a6a:	6033      	str	r3, [r6, #0]
 8001a6c:	f000 fd96 	bl	800259c <__malloc_unlock>
 8001a70:	e003      	b.n	8001a7a <_malloc_r+0x56>
 8001a72:	2d00      	cmp	r5, #0
 8001a74:	dadf      	bge.n	8001a36 <_malloc_r+0x12>
 8001a76:	230c      	movs	r3, #12
 8001a78:	6033      	str	r3, [r6, #0]
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	680b      	ldr	r3, [r1, #0]
 8001a80:	1b5b      	subs	r3, r3, r5
 8001a82:	d41a      	bmi.n	8001aba <_malloc_r+0x96>
 8001a84:	2b0b      	cmp	r3, #11
 8001a86:	d903      	bls.n	8001a90 <_malloc_r+0x6c>
 8001a88:	600b      	str	r3, [r1, #0]
 8001a8a:	18cc      	adds	r4, r1, r3
 8001a8c:	6025      	str	r5, [r4, #0]
 8001a8e:	e003      	b.n	8001a98 <_malloc_r+0x74>
 8001a90:	428c      	cmp	r4, r1
 8001a92:	d10e      	bne.n	8001ab2 <_malloc_r+0x8e>
 8001a94:	6863      	ldr	r3, [r4, #4]
 8001a96:	6013      	str	r3, [r2, #0]
 8001a98:	0030      	movs	r0, r6
 8001a9a:	f000 fd7f 	bl	800259c <__malloc_unlock>
 8001a9e:	0020      	movs	r0, r4
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	300b      	adds	r0, #11
 8001aa4:	1d23      	adds	r3, r4, #4
 8001aa6:	4390      	bics	r0, r2
 8001aa8:	1ac3      	subs	r3, r0, r3
 8001aaa:	d0e7      	beq.n	8001a7c <_malloc_r+0x58>
 8001aac:	425a      	negs	r2, r3
 8001aae:	50e2      	str	r2, [r4, r3]
 8001ab0:	e7e4      	b.n	8001a7c <_malloc_r+0x58>
 8001ab2:	684b      	ldr	r3, [r1, #4]
 8001ab4:	6063      	str	r3, [r4, #4]
 8001ab6:	000c      	movs	r4, r1
 8001ab8:	e7ee      	b.n	8001a98 <_malloc_r+0x74>
 8001aba:	000c      	movs	r4, r1
 8001abc:	6849      	ldr	r1, [r1, #4]
 8001abe:	e7c2      	b.n	8001a46 <_malloc_r+0x22>
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	1cc4      	adds	r4, r0, #3
 8001ac4:	439c      	bics	r4, r3
 8001ac6:	42a0      	cmp	r0, r4
 8001ac8:	d0e0      	beq.n	8001a8c <_malloc_r+0x68>
 8001aca:	1a21      	subs	r1, r4, r0
 8001acc:	0030      	movs	r0, r6
 8001ace:	f000 fad3 	bl	8002078 <_sbrk_r>
 8001ad2:	1c43      	adds	r3, r0, #1
 8001ad4:	d1da      	bne.n	8001a8c <_malloc_r+0x68>
 8001ad6:	e7c6      	b.n	8001a66 <_malloc_r+0x42>
 8001ad8:	20000088 	.word	0x20000088
 8001adc:	2000008c 	.word	0x2000008c

08001ae0 <__sfputc_r>:
 8001ae0:	6893      	ldr	r3, [r2, #8]
 8001ae2:	b510      	push	{r4, lr}
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	6093      	str	r3, [r2, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	da05      	bge.n	8001af8 <__sfputc_r+0x18>
 8001aec:	6994      	ldr	r4, [r2, #24]
 8001aee:	42a3      	cmp	r3, r4
 8001af0:	db08      	blt.n	8001b04 <__sfputc_r+0x24>
 8001af2:	b2cb      	uxtb	r3, r1
 8001af4:	2b0a      	cmp	r3, #10
 8001af6:	d005      	beq.n	8001b04 <__sfputc_r+0x24>
 8001af8:	6813      	ldr	r3, [r2, #0]
 8001afa:	1c58      	adds	r0, r3, #1
 8001afc:	6010      	str	r0, [r2, #0]
 8001afe:	7019      	strb	r1, [r3, #0]
 8001b00:	b2c8      	uxtb	r0, r1
 8001b02:	bd10      	pop	{r4, pc}
 8001b04:	f000 fb16 	bl	8002134 <__swbuf_r>
 8001b08:	e7fb      	b.n	8001b02 <__sfputc_r+0x22>

08001b0a <__sfputs_r>:
 8001b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0c:	0006      	movs	r6, r0
 8001b0e:	000f      	movs	r7, r1
 8001b10:	0014      	movs	r4, r2
 8001b12:	18d5      	adds	r5, r2, r3
 8001b14:	42ac      	cmp	r4, r5
 8001b16:	d101      	bne.n	8001b1c <__sfputs_r+0x12>
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e007      	b.n	8001b2c <__sfputs_r+0x22>
 8001b1c:	7821      	ldrb	r1, [r4, #0]
 8001b1e:	003a      	movs	r2, r7
 8001b20:	0030      	movs	r0, r6
 8001b22:	f7ff ffdd 	bl	8001ae0 <__sfputc_r>
 8001b26:	3401      	adds	r4, #1
 8001b28:	1c43      	adds	r3, r0, #1
 8001b2a:	d1f3      	bne.n	8001b14 <__sfputs_r+0xa>
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001b30 <_vfiprintf_r>:
 8001b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b32:	b09f      	sub	sp, #124	; 0x7c
 8001b34:	0006      	movs	r6, r0
 8001b36:	000f      	movs	r7, r1
 8001b38:	0014      	movs	r4, r2
 8001b3a:	9305      	str	r3, [sp, #20]
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	d004      	beq.n	8001b4a <_vfiprintf_r+0x1a>
 8001b40:	6983      	ldr	r3, [r0, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <_vfiprintf_r+0x1a>
 8001b46:	f7ff fed7 	bl	80018f8 <__sinit>
 8001b4a:	4b7f      	ldr	r3, [pc, #508]	; (8001d48 <_vfiprintf_r+0x218>)
 8001b4c:	429f      	cmp	r7, r3
 8001b4e:	d15c      	bne.n	8001c0a <_vfiprintf_r+0xda>
 8001b50:	6877      	ldr	r7, [r6, #4]
 8001b52:	89bb      	ldrh	r3, [r7, #12]
 8001b54:	071b      	lsls	r3, r3, #28
 8001b56:	d562      	bpl.n	8001c1e <_vfiprintf_r+0xee>
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d05f      	beq.n	8001c1e <_vfiprintf_r+0xee>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	ad06      	add	r5, sp, #24
 8001b62:	616b      	str	r3, [r5, #20]
 8001b64:	3320      	adds	r3, #32
 8001b66:	766b      	strb	r3, [r5, #25]
 8001b68:	3310      	adds	r3, #16
 8001b6a:	76ab      	strb	r3, [r5, #26]
 8001b6c:	9402      	str	r4, [sp, #8]
 8001b6e:	9c02      	ldr	r4, [sp, #8]
 8001b70:	7823      	ldrb	r3, [r4, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d15d      	bne.n	8001c32 <_vfiprintf_r+0x102>
 8001b76:	9b02      	ldr	r3, [sp, #8]
 8001b78:	1ae3      	subs	r3, r4, r3
 8001b7a:	9304      	str	r3, [sp, #16]
 8001b7c:	d00d      	beq.n	8001b9a <_vfiprintf_r+0x6a>
 8001b7e:	9b04      	ldr	r3, [sp, #16]
 8001b80:	9a02      	ldr	r2, [sp, #8]
 8001b82:	0039      	movs	r1, r7
 8001b84:	0030      	movs	r0, r6
 8001b86:	f7ff ffc0 	bl	8001b0a <__sfputs_r>
 8001b8a:	1c43      	adds	r3, r0, #1
 8001b8c:	d100      	bne.n	8001b90 <_vfiprintf_r+0x60>
 8001b8e:	e0cc      	b.n	8001d2a <_vfiprintf_r+0x1fa>
 8001b90:	696a      	ldr	r2, [r5, #20]
 8001b92:	9b04      	ldr	r3, [sp, #16]
 8001b94:	4694      	mov	ip, r2
 8001b96:	4463      	add	r3, ip
 8001b98:	616b      	str	r3, [r5, #20]
 8001b9a:	7823      	ldrb	r3, [r4, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d100      	bne.n	8001ba2 <_vfiprintf_r+0x72>
 8001ba0:	e0c3      	b.n	8001d2a <_vfiprintf_r+0x1fa>
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	4252      	negs	r2, r2
 8001ba8:	606a      	str	r2, [r5, #4]
 8001baa:	a902      	add	r1, sp, #8
 8001bac:	3254      	adds	r2, #84	; 0x54
 8001bae:	1852      	adds	r2, r2, r1
 8001bb0:	3401      	adds	r4, #1
 8001bb2:	602b      	str	r3, [r5, #0]
 8001bb4:	60eb      	str	r3, [r5, #12]
 8001bb6:	60ab      	str	r3, [r5, #8]
 8001bb8:	7013      	strb	r3, [r2, #0]
 8001bba:	65ab      	str	r3, [r5, #88]	; 0x58
 8001bbc:	7821      	ldrb	r1, [r4, #0]
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	4862      	ldr	r0, [pc, #392]	; (8001d4c <_vfiprintf_r+0x21c>)
 8001bc2:	f000 fcdf 	bl	8002584 <memchr>
 8001bc6:	1c63      	adds	r3, r4, #1
 8001bc8:	469c      	mov	ip, r3
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d135      	bne.n	8001c3a <_vfiprintf_r+0x10a>
 8001bce:	6829      	ldr	r1, [r5, #0]
 8001bd0:	06cb      	lsls	r3, r1, #27
 8001bd2:	d504      	bpl.n	8001bde <_vfiprintf_r+0xae>
 8001bd4:	2353      	movs	r3, #83	; 0x53
 8001bd6:	aa02      	add	r2, sp, #8
 8001bd8:	3020      	adds	r0, #32
 8001bda:	189b      	adds	r3, r3, r2
 8001bdc:	7018      	strb	r0, [r3, #0]
 8001bde:	070b      	lsls	r3, r1, #28
 8001be0:	d504      	bpl.n	8001bec <_vfiprintf_r+0xbc>
 8001be2:	2353      	movs	r3, #83	; 0x53
 8001be4:	202b      	movs	r0, #43	; 0x2b
 8001be6:	aa02      	add	r2, sp, #8
 8001be8:	189b      	adds	r3, r3, r2
 8001bea:	7018      	strb	r0, [r3, #0]
 8001bec:	7823      	ldrb	r3, [r4, #0]
 8001bee:	2b2a      	cmp	r3, #42	; 0x2a
 8001bf0:	d02c      	beq.n	8001c4c <_vfiprintf_r+0x11c>
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	210a      	movs	r1, #10
 8001bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bf8:	7822      	ldrb	r2, [r4, #0]
 8001bfa:	3a30      	subs	r2, #48	; 0x30
 8001bfc:	2a09      	cmp	r2, #9
 8001bfe:	d800      	bhi.n	8001c02 <_vfiprintf_r+0xd2>
 8001c00:	e06b      	b.n	8001cda <_vfiprintf_r+0x1aa>
 8001c02:	2800      	cmp	r0, #0
 8001c04:	d02a      	beq.n	8001c5c <_vfiprintf_r+0x12c>
 8001c06:	9309      	str	r3, [sp, #36]	; 0x24
 8001c08:	e028      	b.n	8001c5c <_vfiprintf_r+0x12c>
 8001c0a:	4b51      	ldr	r3, [pc, #324]	; (8001d50 <_vfiprintf_r+0x220>)
 8001c0c:	429f      	cmp	r7, r3
 8001c0e:	d101      	bne.n	8001c14 <_vfiprintf_r+0xe4>
 8001c10:	68b7      	ldr	r7, [r6, #8]
 8001c12:	e79e      	b.n	8001b52 <_vfiprintf_r+0x22>
 8001c14:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <_vfiprintf_r+0x224>)
 8001c16:	429f      	cmp	r7, r3
 8001c18:	d19b      	bne.n	8001b52 <_vfiprintf_r+0x22>
 8001c1a:	68f7      	ldr	r7, [r6, #12]
 8001c1c:	e799      	b.n	8001b52 <_vfiprintf_r+0x22>
 8001c1e:	0039      	movs	r1, r7
 8001c20:	0030      	movs	r0, r6
 8001c22:	f000 faf1 	bl	8002208 <__swsetup_r>
 8001c26:	2800      	cmp	r0, #0
 8001c28:	d099      	beq.n	8001b5e <_vfiprintf_r+0x2e>
 8001c2a:	2001      	movs	r0, #1
 8001c2c:	4240      	negs	r0, r0
 8001c2e:	b01f      	add	sp, #124	; 0x7c
 8001c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c32:	2b25      	cmp	r3, #37	; 0x25
 8001c34:	d09f      	beq.n	8001b76 <_vfiprintf_r+0x46>
 8001c36:	3401      	adds	r4, #1
 8001c38:	e79a      	b.n	8001b70 <_vfiprintf_r+0x40>
 8001c3a:	4b44      	ldr	r3, [pc, #272]	; (8001d4c <_vfiprintf_r+0x21c>)
 8001c3c:	6829      	ldr	r1, [r5, #0]
 8001c3e:	1ac0      	subs	r0, r0, r3
 8001c40:	2301      	movs	r3, #1
 8001c42:	4083      	lsls	r3, r0
 8001c44:	430b      	orrs	r3, r1
 8001c46:	602b      	str	r3, [r5, #0]
 8001c48:	4664      	mov	r4, ip
 8001c4a:	e7b7      	b.n	8001bbc <_vfiprintf_r+0x8c>
 8001c4c:	9b05      	ldr	r3, [sp, #20]
 8001c4e:	1d18      	adds	r0, r3, #4
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	9005      	str	r0, [sp, #20]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db3a      	blt.n	8001cce <_vfiprintf_r+0x19e>
 8001c58:	9309      	str	r3, [sp, #36]	; 0x24
 8001c5a:	4664      	mov	r4, ip
 8001c5c:	7823      	ldrb	r3, [r4, #0]
 8001c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8001c60:	d10b      	bne.n	8001c7a <_vfiprintf_r+0x14a>
 8001c62:	7863      	ldrb	r3, [r4, #1]
 8001c64:	1c62      	adds	r2, r4, #1
 8001c66:	2b2a      	cmp	r3, #42	; 0x2a
 8001c68:	d13f      	bne.n	8001cea <_vfiprintf_r+0x1ba>
 8001c6a:	9b05      	ldr	r3, [sp, #20]
 8001c6c:	3402      	adds	r4, #2
 8001c6e:	1d1a      	adds	r2, r3, #4
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	9205      	str	r2, [sp, #20]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	db35      	blt.n	8001ce4 <_vfiprintf_r+0x1b4>
 8001c78:	9307      	str	r3, [sp, #28]
 8001c7a:	7821      	ldrb	r1, [r4, #0]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	4836      	ldr	r0, [pc, #216]	; (8001d58 <_vfiprintf_r+0x228>)
 8001c80:	f000 fc80 	bl	8002584 <memchr>
 8001c84:	2800      	cmp	r0, #0
 8001c86:	d007      	beq.n	8001c98 <_vfiprintf_r+0x168>
 8001c88:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <_vfiprintf_r+0x228>)
 8001c8a:	682a      	ldr	r2, [r5, #0]
 8001c8c:	1ac0      	subs	r0, r0, r3
 8001c8e:	2340      	movs	r3, #64	; 0x40
 8001c90:	4083      	lsls	r3, r0
 8001c92:	4313      	orrs	r3, r2
 8001c94:	602b      	str	r3, [r5, #0]
 8001c96:	3401      	adds	r4, #1
 8001c98:	7821      	ldrb	r1, [r4, #0]
 8001c9a:	1c63      	adds	r3, r4, #1
 8001c9c:	2206      	movs	r2, #6
 8001c9e:	482f      	ldr	r0, [pc, #188]	; (8001d5c <_vfiprintf_r+0x22c>)
 8001ca0:	9302      	str	r3, [sp, #8]
 8001ca2:	7629      	strb	r1, [r5, #24]
 8001ca4:	f000 fc6e 	bl	8002584 <memchr>
 8001ca8:	2800      	cmp	r0, #0
 8001caa:	d044      	beq.n	8001d36 <_vfiprintf_r+0x206>
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <_vfiprintf_r+0x230>)
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d12f      	bne.n	8001d12 <_vfiprintf_r+0x1e2>
 8001cb2:	6829      	ldr	r1, [r5, #0]
 8001cb4:	9b05      	ldr	r3, [sp, #20]
 8001cb6:	2207      	movs	r2, #7
 8001cb8:	05c9      	lsls	r1, r1, #23
 8001cba:	d528      	bpl.n	8001d0e <_vfiprintf_r+0x1de>
 8001cbc:	189b      	adds	r3, r3, r2
 8001cbe:	4393      	bics	r3, r2
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	9305      	str	r3, [sp, #20]
 8001cc4:	696b      	ldr	r3, [r5, #20]
 8001cc6:	9a03      	ldr	r2, [sp, #12]
 8001cc8:	189b      	adds	r3, r3, r2
 8001cca:	616b      	str	r3, [r5, #20]
 8001ccc:	e74f      	b.n	8001b6e <_vfiprintf_r+0x3e>
 8001cce:	425b      	negs	r3, r3
 8001cd0:	60eb      	str	r3, [r5, #12]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	602b      	str	r3, [r5, #0]
 8001cd8:	e7bf      	b.n	8001c5a <_vfiprintf_r+0x12a>
 8001cda:	434b      	muls	r3, r1
 8001cdc:	3401      	adds	r4, #1
 8001cde:	189b      	adds	r3, r3, r2
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	e789      	b.n	8001bf8 <_vfiprintf_r+0xc8>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	425b      	negs	r3, r3
 8001ce8:	e7c6      	b.n	8001c78 <_vfiprintf_r+0x148>
 8001cea:	2300      	movs	r3, #0
 8001cec:	0014      	movs	r4, r2
 8001cee:	200a      	movs	r0, #10
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	606b      	str	r3, [r5, #4]
 8001cf4:	7821      	ldrb	r1, [r4, #0]
 8001cf6:	3930      	subs	r1, #48	; 0x30
 8001cf8:	2909      	cmp	r1, #9
 8001cfa:	d903      	bls.n	8001d04 <_vfiprintf_r+0x1d4>
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0bc      	beq.n	8001c7a <_vfiprintf_r+0x14a>
 8001d00:	9207      	str	r2, [sp, #28]
 8001d02:	e7ba      	b.n	8001c7a <_vfiprintf_r+0x14a>
 8001d04:	4342      	muls	r2, r0
 8001d06:	3401      	adds	r4, #1
 8001d08:	1852      	adds	r2, r2, r1
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e7f2      	b.n	8001cf4 <_vfiprintf_r+0x1c4>
 8001d0e:	3307      	adds	r3, #7
 8001d10:	e7d5      	b.n	8001cbe <_vfiprintf_r+0x18e>
 8001d12:	ab05      	add	r3, sp, #20
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	003a      	movs	r2, r7
 8001d18:	4b12      	ldr	r3, [pc, #72]	; (8001d64 <_vfiprintf_r+0x234>)
 8001d1a:	0029      	movs	r1, r5
 8001d1c:	0030      	movs	r0, r6
 8001d1e:	e000      	b.n	8001d22 <_vfiprintf_r+0x1f2>
 8001d20:	bf00      	nop
 8001d22:	9003      	str	r0, [sp, #12]
 8001d24:	9b03      	ldr	r3, [sp, #12]
 8001d26:	3301      	adds	r3, #1
 8001d28:	d1cc      	bne.n	8001cc4 <_vfiprintf_r+0x194>
 8001d2a:	89bb      	ldrh	r3, [r7, #12]
 8001d2c:	065b      	lsls	r3, r3, #25
 8001d2e:	d500      	bpl.n	8001d32 <_vfiprintf_r+0x202>
 8001d30:	e77b      	b.n	8001c2a <_vfiprintf_r+0xfa>
 8001d32:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001d34:	e77b      	b.n	8001c2e <_vfiprintf_r+0xfe>
 8001d36:	ab05      	add	r3, sp, #20
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	003a      	movs	r2, r7
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <_vfiprintf_r+0x234>)
 8001d3e:	0029      	movs	r1, r5
 8001d40:	0030      	movs	r0, r6
 8001d42:	f000 f87f 	bl	8001e44 <_printf_i>
 8001d46:	e7ec      	b.n	8001d22 <_vfiprintf_r+0x1f2>
 8001d48:	0800272c 	.word	0x0800272c
 8001d4c:	0800276c 	.word	0x0800276c
 8001d50:	0800274c 	.word	0x0800274c
 8001d54:	0800270c 	.word	0x0800270c
 8001d58:	08002772 	.word	0x08002772
 8001d5c:	08002776 	.word	0x08002776
 8001d60:	00000000 	.word	0x00000000
 8001d64:	08001b0b 	.word	0x08001b0b

08001d68 <_printf_common>:
 8001d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d6a:	0015      	movs	r5, r2
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	688a      	ldr	r2, [r1, #8]
 8001d70:	690b      	ldr	r3, [r1, #16]
 8001d72:	9000      	str	r0, [sp, #0]
 8001d74:	000c      	movs	r4, r1
 8001d76:	4293      	cmp	r3, r2
 8001d78:	da00      	bge.n	8001d7c <_printf_common+0x14>
 8001d7a:	0013      	movs	r3, r2
 8001d7c:	0022      	movs	r2, r4
 8001d7e:	602b      	str	r3, [r5, #0]
 8001d80:	3243      	adds	r2, #67	; 0x43
 8001d82:	7812      	ldrb	r2, [r2, #0]
 8001d84:	2a00      	cmp	r2, #0
 8001d86:	d001      	beq.n	8001d8c <_printf_common+0x24>
 8001d88:	3301      	adds	r3, #1
 8001d8a:	602b      	str	r3, [r5, #0]
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	069b      	lsls	r3, r3, #26
 8001d90:	d502      	bpl.n	8001d98 <_printf_common+0x30>
 8001d92:	682b      	ldr	r3, [r5, #0]
 8001d94:	3302      	adds	r3, #2
 8001d96:	602b      	str	r3, [r5, #0]
 8001d98:	2706      	movs	r7, #6
 8001d9a:	6823      	ldr	r3, [r4, #0]
 8001d9c:	401f      	ands	r7, r3
 8001d9e:	d027      	beq.n	8001df0 <_printf_common+0x88>
 8001da0:	0023      	movs	r3, r4
 8001da2:	3343      	adds	r3, #67	; 0x43
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	1e5a      	subs	r2, r3, #1
 8001da8:	4193      	sbcs	r3, r2
 8001daa:	6822      	ldr	r2, [r4, #0]
 8001dac:	0692      	lsls	r2, r2, #26
 8001dae:	d430      	bmi.n	8001e12 <_printf_common+0xaa>
 8001db0:	0022      	movs	r2, r4
 8001db2:	9901      	ldr	r1, [sp, #4]
 8001db4:	3243      	adds	r2, #67	; 0x43
 8001db6:	9800      	ldr	r0, [sp, #0]
 8001db8:	9e08      	ldr	r6, [sp, #32]
 8001dba:	47b0      	blx	r6
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	d025      	beq.n	8001e0c <_printf_common+0xa4>
 8001dc0:	2306      	movs	r3, #6
 8001dc2:	6820      	ldr	r0, [r4, #0]
 8001dc4:	682a      	ldr	r2, [r5, #0]
 8001dc6:	68e1      	ldr	r1, [r4, #12]
 8001dc8:	4003      	ands	r3, r0
 8001dca:	2500      	movs	r5, #0
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d103      	bne.n	8001dd8 <_printf_common+0x70>
 8001dd0:	1a8d      	subs	r5, r1, r2
 8001dd2:	43eb      	mvns	r3, r5
 8001dd4:	17db      	asrs	r3, r3, #31
 8001dd6:	401d      	ands	r5, r3
 8001dd8:	68a3      	ldr	r3, [r4, #8]
 8001dda:	6922      	ldr	r2, [r4, #16]
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	dd01      	ble.n	8001de4 <_printf_common+0x7c>
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	18ed      	adds	r5, r5, r3
 8001de4:	2700      	movs	r7, #0
 8001de6:	42bd      	cmp	r5, r7
 8001de8:	d120      	bne.n	8001e2c <_printf_common+0xc4>
 8001dea:	2000      	movs	r0, #0
 8001dec:	e010      	b.n	8001e10 <_printf_common+0xa8>
 8001dee:	3701      	adds	r7, #1
 8001df0:	68e3      	ldr	r3, [r4, #12]
 8001df2:	682a      	ldr	r2, [r5, #0]
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	429f      	cmp	r7, r3
 8001df8:	dad2      	bge.n	8001da0 <_printf_common+0x38>
 8001dfa:	0022      	movs	r2, r4
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	3219      	adds	r2, #25
 8001e00:	9901      	ldr	r1, [sp, #4]
 8001e02:	9800      	ldr	r0, [sp, #0]
 8001e04:	9e08      	ldr	r6, [sp, #32]
 8001e06:	47b0      	blx	r6
 8001e08:	1c43      	adds	r3, r0, #1
 8001e0a:	d1f0      	bne.n	8001dee <_printf_common+0x86>
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	4240      	negs	r0, r0
 8001e10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e12:	2030      	movs	r0, #48	; 0x30
 8001e14:	18e1      	adds	r1, r4, r3
 8001e16:	3143      	adds	r1, #67	; 0x43
 8001e18:	7008      	strb	r0, [r1, #0]
 8001e1a:	0021      	movs	r1, r4
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	3145      	adds	r1, #69	; 0x45
 8001e20:	7809      	ldrb	r1, [r1, #0]
 8001e22:	18a2      	adds	r2, r4, r2
 8001e24:	3243      	adds	r2, #67	; 0x43
 8001e26:	3302      	adds	r3, #2
 8001e28:	7011      	strb	r1, [r2, #0]
 8001e2a:	e7c1      	b.n	8001db0 <_printf_common+0x48>
 8001e2c:	0022      	movs	r2, r4
 8001e2e:	2301      	movs	r3, #1
 8001e30:	321a      	adds	r2, #26
 8001e32:	9901      	ldr	r1, [sp, #4]
 8001e34:	9800      	ldr	r0, [sp, #0]
 8001e36:	9e08      	ldr	r6, [sp, #32]
 8001e38:	47b0      	blx	r6
 8001e3a:	1c43      	adds	r3, r0, #1
 8001e3c:	d0e6      	beq.n	8001e0c <_printf_common+0xa4>
 8001e3e:	3701      	adds	r7, #1
 8001e40:	e7d1      	b.n	8001de6 <_printf_common+0x7e>
	...

08001e44 <_printf_i>:
 8001e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e46:	b08b      	sub	sp, #44	; 0x2c
 8001e48:	9206      	str	r2, [sp, #24]
 8001e4a:	000a      	movs	r2, r1
 8001e4c:	3243      	adds	r2, #67	; 0x43
 8001e4e:	9307      	str	r3, [sp, #28]
 8001e50:	9005      	str	r0, [sp, #20]
 8001e52:	9204      	str	r2, [sp, #16]
 8001e54:	7e0a      	ldrb	r2, [r1, #24]
 8001e56:	000c      	movs	r4, r1
 8001e58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001e5a:	2a6e      	cmp	r2, #110	; 0x6e
 8001e5c:	d100      	bne.n	8001e60 <_printf_i+0x1c>
 8001e5e:	e08f      	b.n	8001f80 <_printf_i+0x13c>
 8001e60:	d817      	bhi.n	8001e92 <_printf_i+0x4e>
 8001e62:	2a63      	cmp	r2, #99	; 0x63
 8001e64:	d02c      	beq.n	8001ec0 <_printf_i+0x7c>
 8001e66:	d808      	bhi.n	8001e7a <_printf_i+0x36>
 8001e68:	2a00      	cmp	r2, #0
 8001e6a:	d100      	bne.n	8001e6e <_printf_i+0x2a>
 8001e6c:	e099      	b.n	8001fa2 <_printf_i+0x15e>
 8001e6e:	2a58      	cmp	r2, #88	; 0x58
 8001e70:	d054      	beq.n	8001f1c <_printf_i+0xd8>
 8001e72:	0026      	movs	r6, r4
 8001e74:	3642      	adds	r6, #66	; 0x42
 8001e76:	7032      	strb	r2, [r6, #0]
 8001e78:	e029      	b.n	8001ece <_printf_i+0x8a>
 8001e7a:	2a64      	cmp	r2, #100	; 0x64
 8001e7c:	d001      	beq.n	8001e82 <_printf_i+0x3e>
 8001e7e:	2a69      	cmp	r2, #105	; 0x69
 8001e80:	d1f7      	bne.n	8001e72 <_printf_i+0x2e>
 8001e82:	6821      	ldr	r1, [r4, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	0608      	lsls	r0, r1, #24
 8001e88:	d523      	bpl.n	8001ed2 <_printf_i+0x8e>
 8001e8a:	1d11      	adds	r1, r2, #4
 8001e8c:	6019      	str	r1, [r3, #0]
 8001e8e:	6815      	ldr	r5, [r2, #0]
 8001e90:	e025      	b.n	8001ede <_printf_i+0x9a>
 8001e92:	2a73      	cmp	r2, #115	; 0x73
 8001e94:	d100      	bne.n	8001e98 <_printf_i+0x54>
 8001e96:	e088      	b.n	8001faa <_printf_i+0x166>
 8001e98:	d808      	bhi.n	8001eac <_printf_i+0x68>
 8001e9a:	2a6f      	cmp	r2, #111	; 0x6f
 8001e9c:	d029      	beq.n	8001ef2 <_printf_i+0xae>
 8001e9e:	2a70      	cmp	r2, #112	; 0x70
 8001ea0:	d1e7      	bne.n	8001e72 <_printf_i+0x2e>
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	6809      	ldr	r1, [r1, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	6022      	str	r2, [r4, #0]
 8001eaa:	e003      	b.n	8001eb4 <_printf_i+0x70>
 8001eac:	2a75      	cmp	r2, #117	; 0x75
 8001eae:	d020      	beq.n	8001ef2 <_printf_i+0xae>
 8001eb0:	2a78      	cmp	r2, #120	; 0x78
 8001eb2:	d1de      	bne.n	8001e72 <_printf_i+0x2e>
 8001eb4:	0022      	movs	r2, r4
 8001eb6:	2178      	movs	r1, #120	; 0x78
 8001eb8:	3245      	adds	r2, #69	; 0x45
 8001eba:	7011      	strb	r1, [r2, #0]
 8001ebc:	4a6c      	ldr	r2, [pc, #432]	; (8002070 <_printf_i+0x22c>)
 8001ebe:	e030      	b.n	8001f22 <_printf_i+0xde>
 8001ec0:	000e      	movs	r6, r1
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	3642      	adds	r6, #66	; 0x42
 8001ec6:	1d11      	adds	r1, r2, #4
 8001ec8:	6019      	str	r1, [r3, #0]
 8001eca:	6813      	ldr	r3, [r2, #0]
 8001ecc:	7033      	strb	r3, [r6, #0]
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e079      	b.n	8001fc6 <_printf_i+0x182>
 8001ed2:	0649      	lsls	r1, r1, #25
 8001ed4:	d5d9      	bpl.n	8001e8a <_printf_i+0x46>
 8001ed6:	1d11      	adds	r1, r2, #4
 8001ed8:	6019      	str	r1, [r3, #0]
 8001eda:	2300      	movs	r3, #0
 8001edc:	5ed5      	ldrsh	r5, [r2, r3]
 8001ede:	2d00      	cmp	r5, #0
 8001ee0:	da03      	bge.n	8001eea <_printf_i+0xa6>
 8001ee2:	232d      	movs	r3, #45	; 0x2d
 8001ee4:	9a04      	ldr	r2, [sp, #16]
 8001ee6:	426d      	negs	r5, r5
 8001ee8:	7013      	strb	r3, [r2, #0]
 8001eea:	4b62      	ldr	r3, [pc, #392]	; (8002074 <_printf_i+0x230>)
 8001eec:	270a      	movs	r7, #10
 8001eee:	9303      	str	r3, [sp, #12]
 8001ef0:	e02f      	b.n	8001f52 <_printf_i+0x10e>
 8001ef2:	6820      	ldr	r0, [r4, #0]
 8001ef4:	6819      	ldr	r1, [r3, #0]
 8001ef6:	0605      	lsls	r5, r0, #24
 8001ef8:	d503      	bpl.n	8001f02 <_printf_i+0xbe>
 8001efa:	1d08      	adds	r0, r1, #4
 8001efc:	6018      	str	r0, [r3, #0]
 8001efe:	680d      	ldr	r5, [r1, #0]
 8001f00:	e005      	b.n	8001f0e <_printf_i+0xca>
 8001f02:	0640      	lsls	r0, r0, #25
 8001f04:	d5f9      	bpl.n	8001efa <_printf_i+0xb6>
 8001f06:	680d      	ldr	r5, [r1, #0]
 8001f08:	1d08      	adds	r0, r1, #4
 8001f0a:	6018      	str	r0, [r3, #0]
 8001f0c:	b2ad      	uxth	r5, r5
 8001f0e:	4b59      	ldr	r3, [pc, #356]	; (8002074 <_printf_i+0x230>)
 8001f10:	2708      	movs	r7, #8
 8001f12:	9303      	str	r3, [sp, #12]
 8001f14:	2a6f      	cmp	r2, #111	; 0x6f
 8001f16:	d018      	beq.n	8001f4a <_printf_i+0x106>
 8001f18:	270a      	movs	r7, #10
 8001f1a:	e016      	b.n	8001f4a <_printf_i+0x106>
 8001f1c:	3145      	adds	r1, #69	; 0x45
 8001f1e:	700a      	strb	r2, [r1, #0]
 8001f20:	4a54      	ldr	r2, [pc, #336]	; (8002074 <_printf_i+0x230>)
 8001f22:	9203      	str	r2, [sp, #12]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	6821      	ldr	r1, [r4, #0]
 8001f28:	1d10      	adds	r0, r2, #4
 8001f2a:	6018      	str	r0, [r3, #0]
 8001f2c:	6815      	ldr	r5, [r2, #0]
 8001f2e:	0608      	lsls	r0, r1, #24
 8001f30:	d522      	bpl.n	8001f78 <_printf_i+0x134>
 8001f32:	07cb      	lsls	r3, r1, #31
 8001f34:	d502      	bpl.n	8001f3c <_printf_i+0xf8>
 8001f36:	2320      	movs	r3, #32
 8001f38:	4319      	orrs	r1, r3
 8001f3a:	6021      	str	r1, [r4, #0]
 8001f3c:	2710      	movs	r7, #16
 8001f3e:	2d00      	cmp	r5, #0
 8001f40:	d103      	bne.n	8001f4a <_printf_i+0x106>
 8001f42:	2320      	movs	r3, #32
 8001f44:	6822      	ldr	r2, [r4, #0]
 8001f46:	439a      	bics	r2, r3
 8001f48:	6022      	str	r2, [r4, #0]
 8001f4a:	0023      	movs	r3, r4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	3343      	adds	r3, #67	; 0x43
 8001f50:	701a      	strb	r2, [r3, #0]
 8001f52:	6863      	ldr	r3, [r4, #4]
 8001f54:	60a3      	str	r3, [r4, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	db5c      	blt.n	8002014 <_printf_i+0x1d0>
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	6821      	ldr	r1, [r4, #0]
 8001f5e:	4391      	bics	r1, r2
 8001f60:	6021      	str	r1, [r4, #0]
 8001f62:	2d00      	cmp	r5, #0
 8001f64:	d158      	bne.n	8002018 <_printf_i+0x1d4>
 8001f66:	9e04      	ldr	r6, [sp, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d064      	beq.n	8002036 <_printf_i+0x1f2>
 8001f6c:	0026      	movs	r6, r4
 8001f6e:	9b03      	ldr	r3, [sp, #12]
 8001f70:	3642      	adds	r6, #66	; 0x42
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	7033      	strb	r3, [r6, #0]
 8001f76:	e05e      	b.n	8002036 <_printf_i+0x1f2>
 8001f78:	0648      	lsls	r0, r1, #25
 8001f7a:	d5da      	bpl.n	8001f32 <_printf_i+0xee>
 8001f7c:	b2ad      	uxth	r5, r5
 8001f7e:	e7d8      	b.n	8001f32 <_printf_i+0xee>
 8001f80:	6809      	ldr	r1, [r1, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	0608      	lsls	r0, r1, #24
 8001f86:	d505      	bpl.n	8001f94 <_printf_i+0x150>
 8001f88:	1d11      	adds	r1, r2, #4
 8001f8a:	6019      	str	r1, [r3, #0]
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	6962      	ldr	r2, [r4, #20]
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	e006      	b.n	8001fa2 <_printf_i+0x15e>
 8001f94:	0649      	lsls	r1, r1, #25
 8001f96:	d5f7      	bpl.n	8001f88 <_printf_i+0x144>
 8001f98:	1d11      	adds	r1, r2, #4
 8001f9a:	6019      	str	r1, [r3, #0]
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	8aa2      	ldrh	r2, [r4, #20]
 8001fa0:	801a      	strh	r2, [r3, #0]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	9e04      	ldr	r6, [sp, #16]
 8001fa6:	6123      	str	r3, [r4, #16]
 8001fa8:	e054      	b.n	8002054 <_printf_i+0x210>
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	1d11      	adds	r1, r2, #4
 8001fae:	6019      	str	r1, [r3, #0]
 8001fb0:	6816      	ldr	r6, [r2, #0]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	6862      	ldr	r2, [r4, #4]
 8001fb6:	0030      	movs	r0, r6
 8001fb8:	f000 fae4 	bl	8002584 <memchr>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	d001      	beq.n	8001fc4 <_printf_i+0x180>
 8001fc0:	1b80      	subs	r0, r0, r6
 8001fc2:	6060      	str	r0, [r4, #4]
 8001fc4:	6863      	ldr	r3, [r4, #4]
 8001fc6:	6123      	str	r3, [r4, #16]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	9a04      	ldr	r2, [sp, #16]
 8001fcc:	7013      	strb	r3, [r2, #0]
 8001fce:	e041      	b.n	8002054 <_printf_i+0x210>
 8001fd0:	6923      	ldr	r3, [r4, #16]
 8001fd2:	0032      	movs	r2, r6
 8001fd4:	9906      	ldr	r1, [sp, #24]
 8001fd6:	9805      	ldr	r0, [sp, #20]
 8001fd8:	9d07      	ldr	r5, [sp, #28]
 8001fda:	47a8      	blx	r5
 8001fdc:	1c43      	adds	r3, r0, #1
 8001fde:	d043      	beq.n	8002068 <_printf_i+0x224>
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	2500      	movs	r5, #0
 8001fe4:	079b      	lsls	r3, r3, #30
 8001fe6:	d40f      	bmi.n	8002008 <_printf_i+0x1c4>
 8001fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fea:	68e0      	ldr	r0, [r4, #12]
 8001fec:	4298      	cmp	r0, r3
 8001fee:	da3d      	bge.n	800206c <_printf_i+0x228>
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	e03b      	b.n	800206c <_printf_i+0x228>
 8001ff4:	0022      	movs	r2, r4
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	3219      	adds	r2, #25
 8001ffa:	9906      	ldr	r1, [sp, #24]
 8001ffc:	9805      	ldr	r0, [sp, #20]
 8001ffe:	9e07      	ldr	r6, [sp, #28]
 8002000:	47b0      	blx	r6
 8002002:	1c43      	adds	r3, r0, #1
 8002004:	d030      	beq.n	8002068 <_printf_i+0x224>
 8002006:	3501      	adds	r5, #1
 8002008:	68e3      	ldr	r3, [r4, #12]
 800200a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	429d      	cmp	r5, r3
 8002010:	dbf0      	blt.n	8001ff4 <_printf_i+0x1b0>
 8002012:	e7e9      	b.n	8001fe8 <_printf_i+0x1a4>
 8002014:	2d00      	cmp	r5, #0
 8002016:	d0a9      	beq.n	8001f6c <_printf_i+0x128>
 8002018:	9e04      	ldr	r6, [sp, #16]
 800201a:	0028      	movs	r0, r5
 800201c:	0039      	movs	r1, r7
 800201e:	f7fe f903 	bl	8000228 <__aeabi_uidivmod>
 8002022:	9b03      	ldr	r3, [sp, #12]
 8002024:	3e01      	subs	r6, #1
 8002026:	5c5b      	ldrb	r3, [r3, r1]
 8002028:	0028      	movs	r0, r5
 800202a:	7033      	strb	r3, [r6, #0]
 800202c:	0039      	movs	r1, r7
 800202e:	f7fe f875 	bl	800011c <__udivsi3>
 8002032:	1e05      	subs	r5, r0, #0
 8002034:	d1f1      	bne.n	800201a <_printf_i+0x1d6>
 8002036:	2f08      	cmp	r7, #8
 8002038:	d109      	bne.n	800204e <_printf_i+0x20a>
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	07db      	lsls	r3, r3, #31
 800203e:	d506      	bpl.n	800204e <_printf_i+0x20a>
 8002040:	6863      	ldr	r3, [r4, #4]
 8002042:	6922      	ldr	r2, [r4, #16]
 8002044:	4293      	cmp	r3, r2
 8002046:	dc02      	bgt.n	800204e <_printf_i+0x20a>
 8002048:	2330      	movs	r3, #48	; 0x30
 800204a:	3e01      	subs	r6, #1
 800204c:	7033      	strb	r3, [r6, #0]
 800204e:	9b04      	ldr	r3, [sp, #16]
 8002050:	1b9b      	subs	r3, r3, r6
 8002052:	6123      	str	r3, [r4, #16]
 8002054:	9b07      	ldr	r3, [sp, #28]
 8002056:	aa09      	add	r2, sp, #36	; 0x24
 8002058:	9300      	str	r3, [sp, #0]
 800205a:	0021      	movs	r1, r4
 800205c:	9b06      	ldr	r3, [sp, #24]
 800205e:	9805      	ldr	r0, [sp, #20]
 8002060:	f7ff fe82 	bl	8001d68 <_printf_common>
 8002064:	1c43      	adds	r3, r0, #1
 8002066:	d1b3      	bne.n	8001fd0 <_printf_i+0x18c>
 8002068:	2001      	movs	r0, #1
 800206a:	4240      	negs	r0, r0
 800206c:	b00b      	add	sp, #44	; 0x2c
 800206e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002070:	0800278e 	.word	0x0800278e
 8002074:	0800277d 	.word	0x0800277d

08002078 <_sbrk_r>:
 8002078:	2300      	movs	r3, #0
 800207a:	b570      	push	{r4, r5, r6, lr}
 800207c:	4c06      	ldr	r4, [pc, #24]	; (8002098 <_sbrk_r+0x20>)
 800207e:	0005      	movs	r5, r0
 8002080:	0008      	movs	r0, r1
 8002082:	6023      	str	r3, [r4, #0]
 8002084:	f7fe f91c 	bl	80002c0 <_sbrk>
 8002088:	1c43      	adds	r3, r0, #1
 800208a:	d103      	bne.n	8002094 <_sbrk_r+0x1c>
 800208c:	6823      	ldr	r3, [r4, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d000      	beq.n	8002094 <_sbrk_r+0x1c>
 8002092:	602b      	str	r3, [r5, #0]
 8002094:	bd70      	pop	{r4, r5, r6, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	20000974 	.word	0x20000974

0800209c <__sread>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	000c      	movs	r4, r1
 80020a0:	250e      	movs	r5, #14
 80020a2:	5f49      	ldrsh	r1, [r1, r5]
 80020a4:	f000 fac6 	bl	8002634 <_read_r>
 80020a8:	2800      	cmp	r0, #0
 80020aa:	db03      	blt.n	80020b4 <__sread+0x18>
 80020ac:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80020ae:	181b      	adds	r3, r3, r0
 80020b0:	6563      	str	r3, [r4, #84]	; 0x54
 80020b2:	bd70      	pop	{r4, r5, r6, pc}
 80020b4:	89a3      	ldrh	r3, [r4, #12]
 80020b6:	4a02      	ldr	r2, [pc, #8]	; (80020c0 <__sread+0x24>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	81a3      	strh	r3, [r4, #12]
 80020bc:	e7f9      	b.n	80020b2 <__sread+0x16>
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	ffffefff 	.word	0xffffefff

080020c4 <__swrite>:
 80020c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020c6:	001f      	movs	r7, r3
 80020c8:	898b      	ldrh	r3, [r1, #12]
 80020ca:	0005      	movs	r5, r0
 80020cc:	000c      	movs	r4, r1
 80020ce:	0016      	movs	r6, r2
 80020d0:	05db      	lsls	r3, r3, #23
 80020d2:	d505      	bpl.n	80020e0 <__swrite+0x1c>
 80020d4:	230e      	movs	r3, #14
 80020d6:	5ec9      	ldrsh	r1, [r1, r3]
 80020d8:	2200      	movs	r2, #0
 80020da:	2302      	movs	r3, #2
 80020dc:	f000 f9d2 	bl	8002484 <_lseek_r>
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	4a05      	ldr	r2, [pc, #20]	; (80020f8 <__swrite+0x34>)
 80020e4:	0028      	movs	r0, r5
 80020e6:	4013      	ands	r3, r2
 80020e8:	81a3      	strh	r3, [r4, #12]
 80020ea:	0032      	movs	r2, r6
 80020ec:	230e      	movs	r3, #14
 80020ee:	5ee1      	ldrsh	r1, [r4, r3]
 80020f0:	003b      	movs	r3, r7
 80020f2:	f000 f875 	bl	80021e0 <_write_r>
 80020f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020f8:	ffffefff 	.word	0xffffefff

080020fc <__sseek>:
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	000c      	movs	r4, r1
 8002100:	250e      	movs	r5, #14
 8002102:	5f49      	ldrsh	r1, [r1, r5]
 8002104:	f000 f9be 	bl	8002484 <_lseek_r>
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	1c42      	adds	r2, r0, #1
 800210c:	d103      	bne.n	8002116 <__sseek+0x1a>
 800210e:	4a05      	ldr	r2, [pc, #20]	; (8002124 <__sseek+0x28>)
 8002110:	4013      	ands	r3, r2
 8002112:	81a3      	strh	r3, [r4, #12]
 8002114:	bd70      	pop	{r4, r5, r6, pc}
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	0152      	lsls	r2, r2, #5
 800211a:	4313      	orrs	r3, r2
 800211c:	81a3      	strh	r3, [r4, #12]
 800211e:	6560      	str	r0, [r4, #84]	; 0x54
 8002120:	e7f8      	b.n	8002114 <__sseek+0x18>
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	ffffefff 	.word	0xffffefff

08002128 <__sclose>:
 8002128:	b510      	push	{r4, lr}
 800212a:	230e      	movs	r3, #14
 800212c:	5ec9      	ldrsh	r1, [r1, r3]
 800212e:	f000 f8e1 	bl	80022f4 <_close_r>
 8002132:	bd10      	pop	{r4, pc}

08002134 <__swbuf_r>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	0005      	movs	r5, r0
 8002138:	000e      	movs	r6, r1
 800213a:	0014      	movs	r4, r2
 800213c:	2800      	cmp	r0, #0
 800213e:	d004      	beq.n	800214a <__swbuf_r+0x16>
 8002140:	6983      	ldr	r3, [r0, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <__swbuf_r+0x16>
 8002146:	f7ff fbd7 	bl	80018f8 <__sinit>
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <__swbuf_r+0xa0>)
 800214c:	429c      	cmp	r4, r3
 800214e:	d12d      	bne.n	80021ac <__swbuf_r+0x78>
 8002150:	686c      	ldr	r4, [r5, #4]
 8002152:	69a3      	ldr	r3, [r4, #24]
 8002154:	60a3      	str	r3, [r4, #8]
 8002156:	89a3      	ldrh	r3, [r4, #12]
 8002158:	071b      	lsls	r3, r3, #28
 800215a:	d531      	bpl.n	80021c0 <__swbuf_r+0x8c>
 800215c:	6923      	ldr	r3, [r4, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d02e      	beq.n	80021c0 <__swbuf_r+0x8c>
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	6922      	ldr	r2, [r4, #16]
 8002166:	b2f7      	uxtb	r7, r6
 8002168:	1a98      	subs	r0, r3, r2
 800216a:	6963      	ldr	r3, [r4, #20]
 800216c:	b2f6      	uxtb	r6, r6
 800216e:	4298      	cmp	r0, r3
 8002170:	db05      	blt.n	800217e <__swbuf_r+0x4a>
 8002172:	0021      	movs	r1, r4
 8002174:	0028      	movs	r0, r5
 8002176:	f000 f959 	bl	800242c <_fflush_r>
 800217a:	2800      	cmp	r0, #0
 800217c:	d126      	bne.n	80021cc <__swbuf_r+0x98>
 800217e:	68a3      	ldr	r3, [r4, #8]
 8002180:	3001      	adds	r0, #1
 8002182:	3b01      	subs	r3, #1
 8002184:	60a3      	str	r3, [r4, #8]
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	1c5a      	adds	r2, r3, #1
 800218a:	6022      	str	r2, [r4, #0]
 800218c:	701f      	strb	r7, [r3, #0]
 800218e:	6963      	ldr	r3, [r4, #20]
 8002190:	4298      	cmp	r0, r3
 8002192:	d004      	beq.n	800219e <__swbuf_r+0x6a>
 8002194:	89a3      	ldrh	r3, [r4, #12]
 8002196:	07db      	lsls	r3, r3, #31
 8002198:	d51a      	bpl.n	80021d0 <__swbuf_r+0x9c>
 800219a:	2e0a      	cmp	r6, #10
 800219c:	d118      	bne.n	80021d0 <__swbuf_r+0x9c>
 800219e:	0021      	movs	r1, r4
 80021a0:	0028      	movs	r0, r5
 80021a2:	f000 f943 	bl	800242c <_fflush_r>
 80021a6:	2800      	cmp	r0, #0
 80021a8:	d012      	beq.n	80021d0 <__swbuf_r+0x9c>
 80021aa:	e00f      	b.n	80021cc <__swbuf_r+0x98>
 80021ac:	4b0a      	ldr	r3, [pc, #40]	; (80021d8 <__swbuf_r+0xa4>)
 80021ae:	429c      	cmp	r4, r3
 80021b0:	d101      	bne.n	80021b6 <__swbuf_r+0x82>
 80021b2:	68ac      	ldr	r4, [r5, #8]
 80021b4:	e7cd      	b.n	8002152 <__swbuf_r+0x1e>
 80021b6:	4b09      	ldr	r3, [pc, #36]	; (80021dc <__swbuf_r+0xa8>)
 80021b8:	429c      	cmp	r4, r3
 80021ba:	d1ca      	bne.n	8002152 <__swbuf_r+0x1e>
 80021bc:	68ec      	ldr	r4, [r5, #12]
 80021be:	e7c8      	b.n	8002152 <__swbuf_r+0x1e>
 80021c0:	0021      	movs	r1, r4
 80021c2:	0028      	movs	r0, r5
 80021c4:	f000 f820 	bl	8002208 <__swsetup_r>
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d0ca      	beq.n	8002162 <__swbuf_r+0x2e>
 80021cc:	2601      	movs	r6, #1
 80021ce:	4276      	negs	r6, r6
 80021d0:	0030      	movs	r0, r6
 80021d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021d4:	0800272c 	.word	0x0800272c
 80021d8:	0800274c 	.word	0x0800274c
 80021dc:	0800270c 	.word	0x0800270c

080021e0 <_write_r>:
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	0005      	movs	r5, r0
 80021e4:	0008      	movs	r0, r1
 80021e6:	0011      	movs	r1, r2
 80021e8:	2200      	movs	r2, #0
 80021ea:	4c06      	ldr	r4, [pc, #24]	; (8002204 <_write_r+0x24>)
 80021ec:	6022      	str	r2, [r4, #0]
 80021ee:	001a      	movs	r2, r3
 80021f0:	f7fe f857 	bl	80002a2 <_write>
 80021f4:	1c43      	adds	r3, r0, #1
 80021f6:	d103      	bne.n	8002200 <_write_r+0x20>
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d000      	beq.n	8002200 <_write_r+0x20>
 80021fe:	602b      	str	r3, [r5, #0]
 8002200:	bd70      	pop	{r4, r5, r6, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	20000974 	.word	0x20000974

08002208 <__swsetup_r>:
 8002208:	4b36      	ldr	r3, [pc, #216]	; (80022e4 <__swsetup_r+0xdc>)
 800220a:	b570      	push	{r4, r5, r6, lr}
 800220c:	681d      	ldr	r5, [r3, #0]
 800220e:	0006      	movs	r6, r0
 8002210:	000c      	movs	r4, r1
 8002212:	2d00      	cmp	r5, #0
 8002214:	d005      	beq.n	8002222 <__swsetup_r+0x1a>
 8002216:	69ab      	ldr	r3, [r5, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <__swsetup_r+0x1a>
 800221c:	0028      	movs	r0, r5
 800221e:	f7ff fb6b 	bl	80018f8 <__sinit>
 8002222:	4b31      	ldr	r3, [pc, #196]	; (80022e8 <__swsetup_r+0xe0>)
 8002224:	429c      	cmp	r4, r3
 8002226:	d10f      	bne.n	8002248 <__swsetup_r+0x40>
 8002228:	686c      	ldr	r4, [r5, #4]
 800222a:	230c      	movs	r3, #12
 800222c:	5ee2      	ldrsh	r2, [r4, r3]
 800222e:	b293      	uxth	r3, r2
 8002230:	0719      	lsls	r1, r3, #28
 8002232:	d42d      	bmi.n	8002290 <__swsetup_r+0x88>
 8002234:	06d9      	lsls	r1, r3, #27
 8002236:	d411      	bmi.n	800225c <__swsetup_r+0x54>
 8002238:	2309      	movs	r3, #9
 800223a:	2001      	movs	r0, #1
 800223c:	6033      	str	r3, [r6, #0]
 800223e:	3337      	adds	r3, #55	; 0x37
 8002240:	4313      	orrs	r3, r2
 8002242:	81a3      	strh	r3, [r4, #12]
 8002244:	4240      	negs	r0, r0
 8002246:	bd70      	pop	{r4, r5, r6, pc}
 8002248:	4b28      	ldr	r3, [pc, #160]	; (80022ec <__swsetup_r+0xe4>)
 800224a:	429c      	cmp	r4, r3
 800224c:	d101      	bne.n	8002252 <__swsetup_r+0x4a>
 800224e:	68ac      	ldr	r4, [r5, #8]
 8002250:	e7eb      	b.n	800222a <__swsetup_r+0x22>
 8002252:	4b27      	ldr	r3, [pc, #156]	; (80022f0 <__swsetup_r+0xe8>)
 8002254:	429c      	cmp	r4, r3
 8002256:	d1e8      	bne.n	800222a <__swsetup_r+0x22>
 8002258:	68ec      	ldr	r4, [r5, #12]
 800225a:	e7e6      	b.n	800222a <__swsetup_r+0x22>
 800225c:	075b      	lsls	r3, r3, #29
 800225e:	d513      	bpl.n	8002288 <__swsetup_r+0x80>
 8002260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002262:	2900      	cmp	r1, #0
 8002264:	d008      	beq.n	8002278 <__swsetup_r+0x70>
 8002266:	0023      	movs	r3, r4
 8002268:	3344      	adds	r3, #68	; 0x44
 800226a:	4299      	cmp	r1, r3
 800226c:	d002      	beq.n	8002274 <__swsetup_r+0x6c>
 800226e:	0030      	movs	r0, r6
 8002270:	f000 f996 	bl	80025a0 <_free_r>
 8002274:	2300      	movs	r3, #0
 8002276:	6363      	str	r3, [r4, #52]	; 0x34
 8002278:	2224      	movs	r2, #36	; 0x24
 800227a:	89a3      	ldrh	r3, [r4, #12]
 800227c:	4393      	bics	r3, r2
 800227e:	81a3      	strh	r3, [r4, #12]
 8002280:	2300      	movs	r3, #0
 8002282:	6063      	str	r3, [r4, #4]
 8002284:	6923      	ldr	r3, [r4, #16]
 8002286:	6023      	str	r3, [r4, #0]
 8002288:	2308      	movs	r3, #8
 800228a:	89a2      	ldrh	r2, [r4, #12]
 800228c:	4313      	orrs	r3, r2
 800228e:	81a3      	strh	r3, [r4, #12]
 8002290:	6923      	ldr	r3, [r4, #16]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <__swsetup_r+0xa6>
 8002296:	21a0      	movs	r1, #160	; 0xa0
 8002298:	2280      	movs	r2, #128	; 0x80
 800229a:	89a3      	ldrh	r3, [r4, #12]
 800229c:	0089      	lsls	r1, r1, #2
 800229e:	0092      	lsls	r2, r2, #2
 80022a0:	400b      	ands	r3, r1
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <__swsetup_r+0xa6>
 80022a6:	0021      	movs	r1, r4
 80022a8:	0030      	movs	r0, r6
 80022aa:	f000 f927 	bl	80024fc <__smakebuf_r>
 80022ae:	2301      	movs	r3, #1
 80022b0:	89a2      	ldrh	r2, [r4, #12]
 80022b2:	4013      	ands	r3, r2
 80022b4:	d011      	beq.n	80022da <__swsetup_r+0xd2>
 80022b6:	2300      	movs	r3, #0
 80022b8:	60a3      	str	r3, [r4, #8]
 80022ba:	6963      	ldr	r3, [r4, #20]
 80022bc:	425b      	negs	r3, r3
 80022be:	61a3      	str	r3, [r4, #24]
 80022c0:	2000      	movs	r0, #0
 80022c2:	6923      	ldr	r3, [r4, #16]
 80022c4:	4283      	cmp	r3, r0
 80022c6:	d1be      	bne.n	8002246 <__swsetup_r+0x3e>
 80022c8:	230c      	movs	r3, #12
 80022ca:	5ee2      	ldrsh	r2, [r4, r3]
 80022cc:	0613      	lsls	r3, r2, #24
 80022ce:	d5ba      	bpl.n	8002246 <__swsetup_r+0x3e>
 80022d0:	2340      	movs	r3, #64	; 0x40
 80022d2:	4313      	orrs	r3, r2
 80022d4:	81a3      	strh	r3, [r4, #12]
 80022d6:	3801      	subs	r0, #1
 80022d8:	e7b5      	b.n	8002246 <__swsetup_r+0x3e>
 80022da:	0792      	lsls	r2, r2, #30
 80022dc:	d400      	bmi.n	80022e0 <__swsetup_r+0xd8>
 80022de:	6963      	ldr	r3, [r4, #20]
 80022e0:	60a3      	str	r3, [r4, #8]
 80022e2:	e7ed      	b.n	80022c0 <__swsetup_r+0xb8>
 80022e4:	20000004 	.word	0x20000004
 80022e8:	0800272c 	.word	0x0800272c
 80022ec:	0800274c 	.word	0x0800274c
 80022f0:	0800270c 	.word	0x0800270c

080022f4 <_close_r>:
 80022f4:	2300      	movs	r3, #0
 80022f6:	b570      	push	{r4, r5, r6, lr}
 80022f8:	4c06      	ldr	r4, [pc, #24]	; (8002314 <_close_r+0x20>)
 80022fa:	0005      	movs	r5, r0
 80022fc:	0008      	movs	r0, r1
 80022fe:	6023      	str	r3, [r4, #0]
 8002300:	f7fd fff8 	bl	80002f4 <_close>
 8002304:	1c43      	adds	r3, r0, #1
 8002306:	d103      	bne.n	8002310 <_close_r+0x1c>
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d000      	beq.n	8002310 <_close_r+0x1c>
 800230e:	602b      	str	r3, [r5, #0]
 8002310:	bd70      	pop	{r4, r5, r6, pc}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	20000974 	.word	0x20000974

08002318 <__sflush_r>:
 8002318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800231a:	898a      	ldrh	r2, [r1, #12]
 800231c:	0005      	movs	r5, r0
 800231e:	000c      	movs	r4, r1
 8002320:	0713      	lsls	r3, r2, #28
 8002322:	d460      	bmi.n	80023e6 <__sflush_r+0xce>
 8002324:	684b      	ldr	r3, [r1, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	dc04      	bgt.n	8002334 <__sflush_r+0x1c>
 800232a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800232c:	2b00      	cmp	r3, #0
 800232e:	dc01      	bgt.n	8002334 <__sflush_r+0x1c>
 8002330:	2000      	movs	r0, #0
 8002332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002334:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002336:	2f00      	cmp	r7, #0
 8002338:	d0fa      	beq.n	8002330 <__sflush_r+0x18>
 800233a:	2300      	movs	r3, #0
 800233c:	682e      	ldr	r6, [r5, #0]
 800233e:	602b      	str	r3, [r5, #0]
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	015b      	lsls	r3, r3, #5
 8002344:	401a      	ands	r2, r3
 8002346:	d034      	beq.n	80023b2 <__sflush_r+0x9a>
 8002348:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800234a:	89a3      	ldrh	r3, [r4, #12]
 800234c:	075b      	lsls	r3, r3, #29
 800234e:	d506      	bpl.n	800235e <__sflush_r+0x46>
 8002350:	6863      	ldr	r3, [r4, #4]
 8002352:	1ac0      	subs	r0, r0, r3
 8002354:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <__sflush_r+0x46>
 800235a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800235c:	1ac0      	subs	r0, r0, r3
 800235e:	0002      	movs	r2, r0
 8002360:	6a21      	ldr	r1, [r4, #32]
 8002362:	2300      	movs	r3, #0
 8002364:	0028      	movs	r0, r5
 8002366:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002368:	47b8      	blx	r7
 800236a:	89a1      	ldrh	r1, [r4, #12]
 800236c:	1c43      	adds	r3, r0, #1
 800236e:	d106      	bne.n	800237e <__sflush_r+0x66>
 8002370:	682b      	ldr	r3, [r5, #0]
 8002372:	2b1d      	cmp	r3, #29
 8002374:	d831      	bhi.n	80023da <__sflush_r+0xc2>
 8002376:	4a2c      	ldr	r2, [pc, #176]	; (8002428 <__sflush_r+0x110>)
 8002378:	40da      	lsrs	r2, r3
 800237a:	07d3      	lsls	r3, r2, #31
 800237c:	d52d      	bpl.n	80023da <__sflush_r+0xc2>
 800237e:	2300      	movs	r3, #0
 8002380:	6063      	str	r3, [r4, #4]
 8002382:	6923      	ldr	r3, [r4, #16]
 8002384:	6023      	str	r3, [r4, #0]
 8002386:	04cb      	lsls	r3, r1, #19
 8002388:	d505      	bpl.n	8002396 <__sflush_r+0x7e>
 800238a:	1c43      	adds	r3, r0, #1
 800238c:	d102      	bne.n	8002394 <__sflush_r+0x7c>
 800238e:	682b      	ldr	r3, [r5, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d100      	bne.n	8002396 <__sflush_r+0x7e>
 8002394:	6560      	str	r0, [r4, #84]	; 0x54
 8002396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002398:	602e      	str	r6, [r5, #0]
 800239a:	2900      	cmp	r1, #0
 800239c:	d0c8      	beq.n	8002330 <__sflush_r+0x18>
 800239e:	0023      	movs	r3, r4
 80023a0:	3344      	adds	r3, #68	; 0x44
 80023a2:	4299      	cmp	r1, r3
 80023a4:	d002      	beq.n	80023ac <__sflush_r+0x94>
 80023a6:	0028      	movs	r0, r5
 80023a8:	f000 f8fa 	bl	80025a0 <_free_r>
 80023ac:	2000      	movs	r0, #0
 80023ae:	6360      	str	r0, [r4, #52]	; 0x34
 80023b0:	e7bf      	b.n	8002332 <__sflush_r+0x1a>
 80023b2:	2301      	movs	r3, #1
 80023b4:	6a21      	ldr	r1, [r4, #32]
 80023b6:	0028      	movs	r0, r5
 80023b8:	47b8      	blx	r7
 80023ba:	1c43      	adds	r3, r0, #1
 80023bc:	d1c5      	bne.n	800234a <__sflush_r+0x32>
 80023be:	682b      	ldr	r3, [r5, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0c2      	beq.n	800234a <__sflush_r+0x32>
 80023c4:	2b1d      	cmp	r3, #29
 80023c6:	d001      	beq.n	80023cc <__sflush_r+0xb4>
 80023c8:	2b16      	cmp	r3, #22
 80023ca:	d101      	bne.n	80023d0 <__sflush_r+0xb8>
 80023cc:	602e      	str	r6, [r5, #0]
 80023ce:	e7af      	b.n	8002330 <__sflush_r+0x18>
 80023d0:	2340      	movs	r3, #64	; 0x40
 80023d2:	89a2      	ldrh	r2, [r4, #12]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	81a3      	strh	r3, [r4, #12]
 80023d8:	e7ab      	b.n	8002332 <__sflush_r+0x1a>
 80023da:	2340      	movs	r3, #64	; 0x40
 80023dc:	430b      	orrs	r3, r1
 80023de:	2001      	movs	r0, #1
 80023e0:	81a3      	strh	r3, [r4, #12]
 80023e2:	4240      	negs	r0, r0
 80023e4:	e7a5      	b.n	8002332 <__sflush_r+0x1a>
 80023e6:	690f      	ldr	r7, [r1, #16]
 80023e8:	2f00      	cmp	r7, #0
 80023ea:	d0a1      	beq.n	8002330 <__sflush_r+0x18>
 80023ec:	680b      	ldr	r3, [r1, #0]
 80023ee:	600f      	str	r7, [r1, #0]
 80023f0:	1bdb      	subs	r3, r3, r7
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	2300      	movs	r3, #0
 80023f6:	0792      	lsls	r2, r2, #30
 80023f8:	d100      	bne.n	80023fc <__sflush_r+0xe4>
 80023fa:	694b      	ldr	r3, [r1, #20]
 80023fc:	60a3      	str	r3, [r4, #8]
 80023fe:	9b01      	ldr	r3, [sp, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	dc00      	bgt.n	8002406 <__sflush_r+0xee>
 8002404:	e794      	b.n	8002330 <__sflush_r+0x18>
 8002406:	9b01      	ldr	r3, [sp, #4]
 8002408:	003a      	movs	r2, r7
 800240a:	6a21      	ldr	r1, [r4, #32]
 800240c:	0028      	movs	r0, r5
 800240e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002410:	47b0      	blx	r6
 8002412:	2800      	cmp	r0, #0
 8002414:	dc03      	bgt.n	800241e <__sflush_r+0x106>
 8002416:	2340      	movs	r3, #64	; 0x40
 8002418:	89a2      	ldrh	r2, [r4, #12]
 800241a:	4313      	orrs	r3, r2
 800241c:	e7df      	b.n	80023de <__sflush_r+0xc6>
 800241e:	9b01      	ldr	r3, [sp, #4]
 8002420:	183f      	adds	r7, r7, r0
 8002422:	1a1b      	subs	r3, r3, r0
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	e7ea      	b.n	80023fe <__sflush_r+0xe6>
 8002428:	20400001 	.word	0x20400001

0800242c <_fflush_r>:
 800242c:	690b      	ldr	r3, [r1, #16]
 800242e:	b570      	push	{r4, r5, r6, lr}
 8002430:	0005      	movs	r5, r0
 8002432:	000c      	movs	r4, r1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <_fflush_r+0x10>
 8002438:	2000      	movs	r0, #0
 800243a:	bd70      	pop	{r4, r5, r6, pc}
 800243c:	2800      	cmp	r0, #0
 800243e:	d004      	beq.n	800244a <_fflush_r+0x1e>
 8002440:	6983      	ldr	r3, [r0, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <_fflush_r+0x1e>
 8002446:	f7ff fa57 	bl	80018f8 <__sinit>
 800244a:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <_fflush_r+0x4c>)
 800244c:	429c      	cmp	r4, r3
 800244e:	d109      	bne.n	8002464 <_fflush_r+0x38>
 8002450:	686c      	ldr	r4, [r5, #4]
 8002452:	220c      	movs	r2, #12
 8002454:	5ea3      	ldrsh	r3, [r4, r2]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ee      	beq.n	8002438 <_fflush_r+0xc>
 800245a:	0021      	movs	r1, r4
 800245c:	0028      	movs	r0, r5
 800245e:	f7ff ff5b 	bl	8002318 <__sflush_r>
 8002462:	e7ea      	b.n	800243a <_fflush_r+0xe>
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <_fflush_r+0x50>)
 8002466:	429c      	cmp	r4, r3
 8002468:	d101      	bne.n	800246e <_fflush_r+0x42>
 800246a:	68ac      	ldr	r4, [r5, #8]
 800246c:	e7f1      	b.n	8002452 <_fflush_r+0x26>
 800246e:	4b04      	ldr	r3, [pc, #16]	; (8002480 <_fflush_r+0x54>)
 8002470:	429c      	cmp	r4, r3
 8002472:	d1ee      	bne.n	8002452 <_fflush_r+0x26>
 8002474:	68ec      	ldr	r4, [r5, #12]
 8002476:	e7ec      	b.n	8002452 <_fflush_r+0x26>
 8002478:	0800272c 	.word	0x0800272c
 800247c:	0800274c 	.word	0x0800274c
 8002480:	0800270c 	.word	0x0800270c

08002484 <_lseek_r>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	0005      	movs	r5, r0
 8002488:	0008      	movs	r0, r1
 800248a:	0011      	movs	r1, r2
 800248c:	2200      	movs	r2, #0
 800248e:	4c06      	ldr	r4, [pc, #24]	; (80024a8 <_lseek_r+0x24>)
 8002490:	6022      	str	r2, [r4, #0]
 8002492:	001a      	movs	r2, r3
 8002494:	f7fd ff38 	bl	8000308 <_lseek>
 8002498:	1c43      	adds	r3, r0, #1
 800249a:	d103      	bne.n	80024a4 <_lseek_r+0x20>
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d000      	beq.n	80024a4 <_lseek_r+0x20>
 80024a2:	602b      	str	r3, [r5, #0]
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	20000974 	.word	0x20000974

080024ac <__swhatbuf_r>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	000e      	movs	r6, r1
 80024b0:	001d      	movs	r5, r3
 80024b2:	230e      	movs	r3, #14
 80024b4:	5ec9      	ldrsh	r1, [r1, r3]
 80024b6:	b090      	sub	sp, #64	; 0x40
 80024b8:	0014      	movs	r4, r2
 80024ba:	2900      	cmp	r1, #0
 80024bc:	da07      	bge.n	80024ce <__swhatbuf_r+0x22>
 80024be:	2300      	movs	r3, #0
 80024c0:	602b      	str	r3, [r5, #0]
 80024c2:	89b3      	ldrh	r3, [r6, #12]
 80024c4:	061b      	lsls	r3, r3, #24
 80024c6:	d411      	bmi.n	80024ec <__swhatbuf_r+0x40>
 80024c8:	2380      	movs	r3, #128	; 0x80
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	e00f      	b.n	80024ee <__swhatbuf_r+0x42>
 80024ce:	aa01      	add	r2, sp, #4
 80024d0:	f000 f8c4 	bl	800265c <_fstat_r>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	dbf2      	blt.n	80024be <__swhatbuf_r+0x12>
 80024d8:	22f0      	movs	r2, #240	; 0xf0
 80024da:	9b02      	ldr	r3, [sp, #8]
 80024dc:	0212      	lsls	r2, r2, #8
 80024de:	4013      	ands	r3, r2
 80024e0:	4a05      	ldr	r2, [pc, #20]	; (80024f8 <__swhatbuf_r+0x4c>)
 80024e2:	189b      	adds	r3, r3, r2
 80024e4:	425a      	negs	r2, r3
 80024e6:	4153      	adcs	r3, r2
 80024e8:	602b      	str	r3, [r5, #0]
 80024ea:	e7ed      	b.n	80024c8 <__swhatbuf_r+0x1c>
 80024ec:	2340      	movs	r3, #64	; 0x40
 80024ee:	2000      	movs	r0, #0
 80024f0:	6023      	str	r3, [r4, #0]
 80024f2:	b010      	add	sp, #64	; 0x40
 80024f4:	bd70      	pop	{r4, r5, r6, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	ffffe000 	.word	0xffffe000

080024fc <__smakebuf_r>:
 80024fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024fe:	2602      	movs	r6, #2
 8002500:	898b      	ldrh	r3, [r1, #12]
 8002502:	0005      	movs	r5, r0
 8002504:	000c      	movs	r4, r1
 8002506:	4233      	tst	r3, r6
 8002508:	d006      	beq.n	8002518 <__smakebuf_r+0x1c>
 800250a:	0023      	movs	r3, r4
 800250c:	3347      	adds	r3, #71	; 0x47
 800250e:	6023      	str	r3, [r4, #0]
 8002510:	6123      	str	r3, [r4, #16]
 8002512:	2301      	movs	r3, #1
 8002514:	6163      	str	r3, [r4, #20]
 8002516:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002518:	ab01      	add	r3, sp, #4
 800251a:	466a      	mov	r2, sp
 800251c:	f7ff ffc6 	bl	80024ac <__swhatbuf_r>
 8002520:	9900      	ldr	r1, [sp, #0]
 8002522:	0007      	movs	r7, r0
 8002524:	0028      	movs	r0, r5
 8002526:	f7ff fa7d 	bl	8001a24 <_malloc_r>
 800252a:	2800      	cmp	r0, #0
 800252c:	d108      	bne.n	8002540 <__smakebuf_r+0x44>
 800252e:	220c      	movs	r2, #12
 8002530:	5ea3      	ldrsh	r3, [r4, r2]
 8002532:	059a      	lsls	r2, r3, #22
 8002534:	d4ef      	bmi.n	8002516 <__smakebuf_r+0x1a>
 8002536:	2203      	movs	r2, #3
 8002538:	4393      	bics	r3, r2
 800253a:	431e      	orrs	r6, r3
 800253c:	81a6      	strh	r6, [r4, #12]
 800253e:	e7e4      	b.n	800250a <__smakebuf_r+0xe>
 8002540:	4b0f      	ldr	r3, [pc, #60]	; (8002580 <__smakebuf_r+0x84>)
 8002542:	62ab      	str	r3, [r5, #40]	; 0x28
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	89a2      	ldrh	r2, [r4, #12]
 8002548:	6020      	str	r0, [r4, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	81a3      	strh	r3, [r4, #12]
 800254e:	9b00      	ldr	r3, [sp, #0]
 8002550:	6120      	str	r0, [r4, #16]
 8002552:	6163      	str	r3, [r4, #20]
 8002554:	9b01      	ldr	r3, [sp, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00d      	beq.n	8002576 <__smakebuf_r+0x7a>
 800255a:	230e      	movs	r3, #14
 800255c:	5ee1      	ldrsh	r1, [r4, r3]
 800255e:	0028      	movs	r0, r5
 8002560:	f000 f88e 	bl	8002680 <_isatty_r>
 8002564:	2800      	cmp	r0, #0
 8002566:	d006      	beq.n	8002576 <__smakebuf_r+0x7a>
 8002568:	2203      	movs	r2, #3
 800256a:	89a3      	ldrh	r3, [r4, #12]
 800256c:	4393      	bics	r3, r2
 800256e:	001a      	movs	r2, r3
 8002570:	2301      	movs	r3, #1
 8002572:	4313      	orrs	r3, r2
 8002574:	81a3      	strh	r3, [r4, #12]
 8002576:	89a0      	ldrh	r0, [r4, #12]
 8002578:	4338      	orrs	r0, r7
 800257a:	81a0      	strh	r0, [r4, #12]
 800257c:	e7cb      	b.n	8002516 <__smakebuf_r+0x1a>
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	08001875 	.word	0x08001875

08002584 <memchr>:
 8002584:	b2c9      	uxtb	r1, r1
 8002586:	1882      	adds	r2, r0, r2
 8002588:	4290      	cmp	r0, r2
 800258a:	d101      	bne.n	8002590 <memchr+0xc>
 800258c:	2000      	movs	r0, #0
 800258e:	4770      	bx	lr
 8002590:	7803      	ldrb	r3, [r0, #0]
 8002592:	428b      	cmp	r3, r1
 8002594:	d0fb      	beq.n	800258e <memchr+0xa>
 8002596:	3001      	adds	r0, #1
 8002598:	e7f6      	b.n	8002588 <memchr+0x4>

0800259a <__malloc_lock>:
 800259a:	4770      	bx	lr

0800259c <__malloc_unlock>:
 800259c:	4770      	bx	lr
	...

080025a0 <_free_r>:
 80025a0:	b570      	push	{r4, r5, r6, lr}
 80025a2:	0005      	movs	r5, r0
 80025a4:	2900      	cmp	r1, #0
 80025a6:	d010      	beq.n	80025ca <_free_r+0x2a>
 80025a8:	1f0c      	subs	r4, r1, #4
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	da00      	bge.n	80025b2 <_free_r+0x12>
 80025b0:	18e4      	adds	r4, r4, r3
 80025b2:	0028      	movs	r0, r5
 80025b4:	f7ff fff1 	bl	800259a <__malloc_lock>
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <_free_r+0x90>)
 80025ba:	6813      	ldr	r3, [r2, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <_free_r+0x2c>
 80025c0:	6063      	str	r3, [r4, #4]
 80025c2:	6014      	str	r4, [r2, #0]
 80025c4:	0028      	movs	r0, r5
 80025c6:	f7ff ffe9 	bl	800259c <__malloc_unlock>
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
 80025cc:	42a3      	cmp	r3, r4
 80025ce:	d909      	bls.n	80025e4 <_free_r+0x44>
 80025d0:	6821      	ldr	r1, [r4, #0]
 80025d2:	1860      	adds	r0, r4, r1
 80025d4:	4283      	cmp	r3, r0
 80025d6:	d1f3      	bne.n	80025c0 <_free_r+0x20>
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	1841      	adds	r1, r0, r1
 80025de:	6021      	str	r1, [r4, #0]
 80025e0:	e7ee      	b.n	80025c0 <_free_r+0x20>
 80025e2:	0013      	movs	r3, r2
 80025e4:	685a      	ldr	r2, [r3, #4]
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d001      	beq.n	80025ee <_free_r+0x4e>
 80025ea:	42a2      	cmp	r2, r4
 80025ec:	d9f9      	bls.n	80025e2 <_free_r+0x42>
 80025ee:	6819      	ldr	r1, [r3, #0]
 80025f0:	1858      	adds	r0, r3, r1
 80025f2:	42a0      	cmp	r0, r4
 80025f4:	d10b      	bne.n	800260e <_free_r+0x6e>
 80025f6:	6820      	ldr	r0, [r4, #0]
 80025f8:	1809      	adds	r1, r1, r0
 80025fa:	1858      	adds	r0, r3, r1
 80025fc:	6019      	str	r1, [r3, #0]
 80025fe:	4282      	cmp	r2, r0
 8002600:	d1e0      	bne.n	80025c4 <_free_r+0x24>
 8002602:	6810      	ldr	r0, [r2, #0]
 8002604:	6852      	ldr	r2, [r2, #4]
 8002606:	1841      	adds	r1, r0, r1
 8002608:	6019      	str	r1, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	e7da      	b.n	80025c4 <_free_r+0x24>
 800260e:	42a0      	cmp	r0, r4
 8002610:	d902      	bls.n	8002618 <_free_r+0x78>
 8002612:	230c      	movs	r3, #12
 8002614:	602b      	str	r3, [r5, #0]
 8002616:	e7d5      	b.n	80025c4 <_free_r+0x24>
 8002618:	6821      	ldr	r1, [r4, #0]
 800261a:	1860      	adds	r0, r4, r1
 800261c:	4282      	cmp	r2, r0
 800261e:	d103      	bne.n	8002628 <_free_r+0x88>
 8002620:	6810      	ldr	r0, [r2, #0]
 8002622:	6852      	ldr	r2, [r2, #4]
 8002624:	1841      	adds	r1, r0, r1
 8002626:	6021      	str	r1, [r4, #0]
 8002628:	6062      	str	r2, [r4, #4]
 800262a:	605c      	str	r4, [r3, #4]
 800262c:	e7ca      	b.n	80025c4 <_free_r+0x24>
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	20000088 	.word	0x20000088

08002634 <_read_r>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	0005      	movs	r5, r0
 8002638:	0008      	movs	r0, r1
 800263a:	0011      	movs	r1, r2
 800263c:	2200      	movs	r2, #0
 800263e:	4c06      	ldr	r4, [pc, #24]	; (8002658 <_read_r+0x24>)
 8002640:	6022      	str	r2, [r4, #0]
 8002642:	001a      	movs	r2, r3
 8002644:	f7fd fe1f 	bl	8000286 <_read>
 8002648:	1c43      	adds	r3, r0, #1
 800264a:	d103      	bne.n	8002654 <_read_r+0x20>
 800264c:	6823      	ldr	r3, [r4, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d000      	beq.n	8002654 <_read_r+0x20>
 8002652:	602b      	str	r3, [r5, #0]
 8002654:	bd70      	pop	{r4, r5, r6, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	20000974 	.word	0x20000974

0800265c <_fstat_r>:
 800265c:	2300      	movs	r3, #0
 800265e:	b570      	push	{r4, r5, r6, lr}
 8002660:	4c06      	ldr	r4, [pc, #24]	; (800267c <_fstat_r+0x20>)
 8002662:	0005      	movs	r5, r0
 8002664:	0008      	movs	r0, r1
 8002666:	0011      	movs	r1, r2
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	f7fd fe46 	bl	80002fa <_fstat>
 800266e:	1c43      	adds	r3, r0, #1
 8002670:	d103      	bne.n	800267a <_fstat_r+0x1e>
 8002672:	6823      	ldr	r3, [r4, #0]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d000      	beq.n	800267a <_fstat_r+0x1e>
 8002678:	602b      	str	r3, [r5, #0]
 800267a:	bd70      	pop	{r4, r5, r6, pc}
 800267c:	20000974 	.word	0x20000974

08002680 <_isatty_r>:
 8002680:	2300      	movs	r3, #0
 8002682:	b570      	push	{r4, r5, r6, lr}
 8002684:	4c06      	ldr	r4, [pc, #24]	; (80026a0 <_isatty_r+0x20>)
 8002686:	0005      	movs	r5, r0
 8002688:	0008      	movs	r0, r1
 800268a:	6023      	str	r3, [r4, #0]
 800268c:	f7fd fe3a 	bl	8000304 <_isatty>
 8002690:	1c43      	adds	r3, r0, #1
 8002692:	d103      	bne.n	800269c <_isatty_r+0x1c>
 8002694:	6823      	ldr	r3, [r4, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d000      	beq.n	800269c <_isatty_r+0x1c>
 800269a:	602b      	str	r3, [r5, #0]
 800269c:	bd70      	pop	{r4, r5, r6, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	20000974 	.word	0x20000974

080026a4 <_init>:
 80026a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026aa:	bc08      	pop	{r3}
 80026ac:	469e      	mov	lr, r3
 80026ae:	4770      	bx	lr

080026b0 <_fini>:
 80026b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026b2:	46c0      	nop			; (mov r8, r8)
 80026b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b6:	bc08      	pop	{r3}
 80026b8:	469e      	mov	lr, r3
 80026ba:	4770      	bx	lr
