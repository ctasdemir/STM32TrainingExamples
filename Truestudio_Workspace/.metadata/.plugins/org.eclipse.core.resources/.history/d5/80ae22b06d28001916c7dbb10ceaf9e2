
ADC_Single_Conv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08003494  08003494  00013494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003620  08003620  00013620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003624  08003624  00013624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08003628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000090c  20000068  08003690  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000974  08003690  00020974  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_line   000046b7  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000f027  00000000  00000000  00024747  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025c9  00000000  00000000  0003376e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000690  00000000  00000000  00035d38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007f8  00000000  00000000  000363c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000033f0  00000000  00000000  00036bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000025bc  00000000  00000000  00039fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c56c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001904  00000000  00000000  0003c5e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800347c 	.word	0x0800347c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800347c 	.word	0x0800347c

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_ddiv>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	4657      	mov	r7, sl
 8000238:	4645      	mov	r5, r8
 800023a:	46de      	mov	lr, fp
 800023c:	464e      	mov	r6, r9
 800023e:	b5e0      	push	{r5, r6, r7, lr}
 8000240:	004c      	lsls	r4, r1, #1
 8000242:	030e      	lsls	r6, r1, #12
 8000244:	b087      	sub	sp, #28
 8000246:	4683      	mov	fp, r0
 8000248:	4692      	mov	sl, r2
 800024a:	001d      	movs	r5, r3
 800024c:	4680      	mov	r8, r0
 800024e:	0b36      	lsrs	r6, r6, #12
 8000250:	0d64      	lsrs	r4, r4, #21
 8000252:	0fcf      	lsrs	r7, r1, #31
 8000254:	2c00      	cmp	r4, #0
 8000256:	d04f      	beq.n	80002f8 <__aeabi_ddiv+0xc4>
 8000258:	4b6f      	ldr	r3, [pc, #444]	; (8000418 <__aeabi_ddiv+0x1e4>)
 800025a:	429c      	cmp	r4, r3
 800025c:	d035      	beq.n	80002ca <__aeabi_ddiv+0x96>
 800025e:	2380      	movs	r3, #128	; 0x80
 8000260:	0f42      	lsrs	r2, r0, #29
 8000262:	041b      	lsls	r3, r3, #16
 8000264:	00f6      	lsls	r6, r6, #3
 8000266:	4313      	orrs	r3, r2
 8000268:	4333      	orrs	r3, r6
 800026a:	4699      	mov	r9, r3
 800026c:	00c3      	lsls	r3, r0, #3
 800026e:	4698      	mov	r8, r3
 8000270:	4b6a      	ldr	r3, [pc, #424]	; (800041c <__aeabi_ddiv+0x1e8>)
 8000272:	2600      	movs	r6, #0
 8000274:	469c      	mov	ip, r3
 8000276:	2300      	movs	r3, #0
 8000278:	4464      	add	r4, ip
 800027a:	9303      	str	r3, [sp, #12]
 800027c:	032b      	lsls	r3, r5, #12
 800027e:	0b1b      	lsrs	r3, r3, #12
 8000280:	469b      	mov	fp, r3
 8000282:	006b      	lsls	r3, r5, #1
 8000284:	0fed      	lsrs	r5, r5, #31
 8000286:	4650      	mov	r0, sl
 8000288:	0d5b      	lsrs	r3, r3, #21
 800028a:	9501      	str	r5, [sp, #4]
 800028c:	d05e      	beq.n	800034c <__aeabi_ddiv+0x118>
 800028e:	4a62      	ldr	r2, [pc, #392]	; (8000418 <__aeabi_ddiv+0x1e4>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d053      	beq.n	800033c <__aeabi_ddiv+0x108>
 8000294:	465a      	mov	r2, fp
 8000296:	00d1      	lsls	r1, r2, #3
 8000298:	2280      	movs	r2, #128	; 0x80
 800029a:	0f40      	lsrs	r0, r0, #29
 800029c:	0412      	lsls	r2, r2, #16
 800029e:	4302      	orrs	r2, r0
 80002a0:	430a      	orrs	r2, r1
 80002a2:	4693      	mov	fp, r2
 80002a4:	4652      	mov	r2, sl
 80002a6:	00d1      	lsls	r1, r2, #3
 80002a8:	4a5c      	ldr	r2, [pc, #368]	; (800041c <__aeabi_ddiv+0x1e8>)
 80002aa:	4694      	mov	ip, r2
 80002ac:	2200      	movs	r2, #0
 80002ae:	4463      	add	r3, ip
 80002b0:	0038      	movs	r0, r7
 80002b2:	4068      	eors	r0, r5
 80002b4:	4684      	mov	ip, r0
 80002b6:	9002      	str	r0, [sp, #8]
 80002b8:	1ae4      	subs	r4, r4, r3
 80002ba:	4316      	orrs	r6, r2
 80002bc:	2e0f      	cmp	r6, #15
 80002be:	d900      	bls.n	80002c2 <__aeabi_ddiv+0x8e>
 80002c0:	e0b4      	b.n	800042c <__aeabi_ddiv+0x1f8>
 80002c2:	4b57      	ldr	r3, [pc, #348]	; (8000420 <__aeabi_ddiv+0x1ec>)
 80002c4:	00b6      	lsls	r6, r6, #2
 80002c6:	599b      	ldr	r3, [r3, r6]
 80002c8:	469f      	mov	pc, r3
 80002ca:	0003      	movs	r3, r0
 80002cc:	4333      	orrs	r3, r6
 80002ce:	4699      	mov	r9, r3
 80002d0:	d16c      	bne.n	80003ac <__aeabi_ddiv+0x178>
 80002d2:	2300      	movs	r3, #0
 80002d4:	4698      	mov	r8, r3
 80002d6:	3302      	adds	r3, #2
 80002d8:	2608      	movs	r6, #8
 80002da:	9303      	str	r3, [sp, #12]
 80002dc:	e7ce      	b.n	800027c <__aeabi_ddiv+0x48>
 80002de:	46cb      	mov	fp, r9
 80002e0:	4641      	mov	r1, r8
 80002e2:	9a03      	ldr	r2, [sp, #12]
 80002e4:	9701      	str	r7, [sp, #4]
 80002e6:	2a02      	cmp	r2, #2
 80002e8:	d165      	bne.n	80003b6 <__aeabi_ddiv+0x182>
 80002ea:	9b01      	ldr	r3, [sp, #4]
 80002ec:	4c4a      	ldr	r4, [pc, #296]	; (8000418 <__aeabi_ddiv+0x1e4>)
 80002ee:	469c      	mov	ip, r3
 80002f0:	2300      	movs	r3, #0
 80002f2:	2200      	movs	r2, #0
 80002f4:	4698      	mov	r8, r3
 80002f6:	e06b      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 80002f8:	0003      	movs	r3, r0
 80002fa:	4333      	orrs	r3, r6
 80002fc:	4699      	mov	r9, r3
 80002fe:	d04e      	beq.n	800039e <__aeabi_ddiv+0x16a>
 8000300:	2e00      	cmp	r6, #0
 8000302:	d100      	bne.n	8000306 <__aeabi_ddiv+0xd2>
 8000304:	e1bc      	b.n	8000680 <__aeabi_ddiv+0x44c>
 8000306:	0030      	movs	r0, r6
 8000308:	f000 fe5c 	bl	8000fc4 <__clzsi2>
 800030c:	0003      	movs	r3, r0
 800030e:	3b0b      	subs	r3, #11
 8000310:	2b1c      	cmp	r3, #28
 8000312:	dd00      	ble.n	8000316 <__aeabi_ddiv+0xe2>
 8000314:	e1ac      	b.n	8000670 <__aeabi_ddiv+0x43c>
 8000316:	221d      	movs	r2, #29
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	465a      	mov	r2, fp
 800031c:	0001      	movs	r1, r0
 800031e:	40da      	lsrs	r2, r3
 8000320:	3908      	subs	r1, #8
 8000322:	408e      	lsls	r6, r1
 8000324:	0013      	movs	r3, r2
 8000326:	4333      	orrs	r3, r6
 8000328:	4699      	mov	r9, r3
 800032a:	465b      	mov	r3, fp
 800032c:	408b      	lsls	r3, r1
 800032e:	4698      	mov	r8, r3
 8000330:	2300      	movs	r3, #0
 8000332:	4c3c      	ldr	r4, [pc, #240]	; (8000424 <__aeabi_ddiv+0x1f0>)
 8000334:	2600      	movs	r6, #0
 8000336:	1a24      	subs	r4, r4, r0
 8000338:	9303      	str	r3, [sp, #12]
 800033a:	e79f      	b.n	800027c <__aeabi_ddiv+0x48>
 800033c:	4651      	mov	r1, sl
 800033e:	465a      	mov	r2, fp
 8000340:	4311      	orrs	r1, r2
 8000342:	d129      	bne.n	8000398 <__aeabi_ddiv+0x164>
 8000344:	2200      	movs	r2, #0
 8000346:	4693      	mov	fp, r2
 8000348:	3202      	adds	r2, #2
 800034a:	e7b1      	b.n	80002b0 <__aeabi_ddiv+0x7c>
 800034c:	4659      	mov	r1, fp
 800034e:	4301      	orrs	r1, r0
 8000350:	d01e      	beq.n	8000390 <__aeabi_ddiv+0x15c>
 8000352:	465b      	mov	r3, fp
 8000354:	2b00      	cmp	r3, #0
 8000356:	d100      	bne.n	800035a <__aeabi_ddiv+0x126>
 8000358:	e19e      	b.n	8000698 <__aeabi_ddiv+0x464>
 800035a:	4658      	mov	r0, fp
 800035c:	f000 fe32 	bl	8000fc4 <__clzsi2>
 8000360:	0003      	movs	r3, r0
 8000362:	3b0b      	subs	r3, #11
 8000364:	2b1c      	cmp	r3, #28
 8000366:	dd00      	ble.n	800036a <__aeabi_ddiv+0x136>
 8000368:	e18f      	b.n	800068a <__aeabi_ddiv+0x456>
 800036a:	0002      	movs	r2, r0
 800036c:	4659      	mov	r1, fp
 800036e:	3a08      	subs	r2, #8
 8000370:	4091      	lsls	r1, r2
 8000372:	468b      	mov	fp, r1
 8000374:	211d      	movs	r1, #29
 8000376:	1acb      	subs	r3, r1, r3
 8000378:	4651      	mov	r1, sl
 800037a:	40d9      	lsrs	r1, r3
 800037c:	000b      	movs	r3, r1
 800037e:	4659      	mov	r1, fp
 8000380:	430b      	orrs	r3, r1
 8000382:	4651      	mov	r1, sl
 8000384:	469b      	mov	fp, r3
 8000386:	4091      	lsls	r1, r2
 8000388:	4b26      	ldr	r3, [pc, #152]	; (8000424 <__aeabi_ddiv+0x1f0>)
 800038a:	2200      	movs	r2, #0
 800038c:	1a1b      	subs	r3, r3, r0
 800038e:	e78f      	b.n	80002b0 <__aeabi_ddiv+0x7c>
 8000390:	2300      	movs	r3, #0
 8000392:	2201      	movs	r2, #1
 8000394:	469b      	mov	fp, r3
 8000396:	e78b      	b.n	80002b0 <__aeabi_ddiv+0x7c>
 8000398:	4651      	mov	r1, sl
 800039a:	2203      	movs	r2, #3
 800039c:	e788      	b.n	80002b0 <__aeabi_ddiv+0x7c>
 800039e:	2300      	movs	r3, #0
 80003a0:	4698      	mov	r8, r3
 80003a2:	3301      	adds	r3, #1
 80003a4:	2604      	movs	r6, #4
 80003a6:	2400      	movs	r4, #0
 80003a8:	9303      	str	r3, [sp, #12]
 80003aa:	e767      	b.n	800027c <__aeabi_ddiv+0x48>
 80003ac:	2303      	movs	r3, #3
 80003ae:	46b1      	mov	r9, r6
 80003b0:	9303      	str	r3, [sp, #12]
 80003b2:	260c      	movs	r6, #12
 80003b4:	e762      	b.n	800027c <__aeabi_ddiv+0x48>
 80003b6:	2a03      	cmp	r2, #3
 80003b8:	d100      	bne.n	80003bc <__aeabi_ddiv+0x188>
 80003ba:	e25c      	b.n	8000876 <__aeabi_ddiv+0x642>
 80003bc:	9b01      	ldr	r3, [sp, #4]
 80003be:	2a01      	cmp	r2, #1
 80003c0:	d000      	beq.n	80003c4 <__aeabi_ddiv+0x190>
 80003c2:	e1e4      	b.n	800078e <__aeabi_ddiv+0x55a>
 80003c4:	4013      	ands	r3, r2
 80003c6:	469c      	mov	ip, r3
 80003c8:	2300      	movs	r3, #0
 80003ca:	2400      	movs	r4, #0
 80003cc:	2200      	movs	r2, #0
 80003ce:	4698      	mov	r8, r3
 80003d0:	2100      	movs	r1, #0
 80003d2:	0312      	lsls	r2, r2, #12
 80003d4:	0b13      	lsrs	r3, r2, #12
 80003d6:	0d0a      	lsrs	r2, r1, #20
 80003d8:	0512      	lsls	r2, r2, #20
 80003da:	431a      	orrs	r2, r3
 80003dc:	0523      	lsls	r3, r4, #20
 80003de:	4c12      	ldr	r4, [pc, #72]	; (8000428 <__aeabi_ddiv+0x1f4>)
 80003e0:	4640      	mov	r0, r8
 80003e2:	4022      	ands	r2, r4
 80003e4:	4313      	orrs	r3, r2
 80003e6:	4662      	mov	r2, ip
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	07d2      	lsls	r2, r2, #31
 80003ec:	085b      	lsrs	r3, r3, #1
 80003ee:	4313      	orrs	r3, r2
 80003f0:	0019      	movs	r1, r3
 80003f2:	b007      	add	sp, #28
 80003f4:	bc3c      	pop	{r2, r3, r4, r5}
 80003f6:	4690      	mov	r8, r2
 80003f8:	4699      	mov	r9, r3
 80003fa:	46a2      	mov	sl, r4
 80003fc:	46ab      	mov	fp, r5
 80003fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000400:	2300      	movs	r3, #0
 8000402:	2280      	movs	r2, #128	; 0x80
 8000404:	469c      	mov	ip, r3
 8000406:	0312      	lsls	r2, r2, #12
 8000408:	4698      	mov	r8, r3
 800040a:	4c03      	ldr	r4, [pc, #12]	; (8000418 <__aeabi_ddiv+0x1e4>)
 800040c:	e7e0      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 800040e:	2300      	movs	r3, #0
 8000410:	4c01      	ldr	r4, [pc, #4]	; (8000418 <__aeabi_ddiv+0x1e4>)
 8000412:	2200      	movs	r2, #0
 8000414:	4698      	mov	r8, r3
 8000416:	e7db      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 8000418:	000007ff 	.word	0x000007ff
 800041c:	fffffc01 	.word	0xfffffc01
 8000420:	080034b4 	.word	0x080034b4
 8000424:	fffffc0d 	.word	0xfffffc0d
 8000428:	800fffff 	.word	0x800fffff
 800042c:	45d9      	cmp	r9, fp
 800042e:	d900      	bls.n	8000432 <__aeabi_ddiv+0x1fe>
 8000430:	e139      	b.n	80006a6 <__aeabi_ddiv+0x472>
 8000432:	d100      	bne.n	8000436 <__aeabi_ddiv+0x202>
 8000434:	e134      	b.n	80006a0 <__aeabi_ddiv+0x46c>
 8000436:	2300      	movs	r3, #0
 8000438:	4646      	mov	r6, r8
 800043a:	464d      	mov	r5, r9
 800043c:	469a      	mov	sl, r3
 800043e:	3c01      	subs	r4, #1
 8000440:	465b      	mov	r3, fp
 8000442:	0e0a      	lsrs	r2, r1, #24
 8000444:	021b      	lsls	r3, r3, #8
 8000446:	431a      	orrs	r2, r3
 8000448:	020b      	lsls	r3, r1, #8
 800044a:	0c17      	lsrs	r7, r2, #16
 800044c:	9303      	str	r3, [sp, #12]
 800044e:	0413      	lsls	r3, r2, #16
 8000450:	0c1b      	lsrs	r3, r3, #16
 8000452:	0039      	movs	r1, r7
 8000454:	0028      	movs	r0, r5
 8000456:	4690      	mov	r8, r2
 8000458:	9301      	str	r3, [sp, #4]
 800045a:	f7ff fe5f 	bl	800011c <__udivsi3>
 800045e:	0002      	movs	r2, r0
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	4683      	mov	fp, r0
 8000464:	435a      	muls	r2, r3
 8000466:	0028      	movs	r0, r5
 8000468:	0039      	movs	r1, r7
 800046a:	4691      	mov	r9, r2
 800046c:	f7ff fedc 	bl	8000228 <__aeabi_uidivmod>
 8000470:	0c35      	lsrs	r5, r6, #16
 8000472:	0409      	lsls	r1, r1, #16
 8000474:	430d      	orrs	r5, r1
 8000476:	45a9      	cmp	r9, r5
 8000478:	d90d      	bls.n	8000496 <__aeabi_ddiv+0x262>
 800047a:	465b      	mov	r3, fp
 800047c:	4445      	add	r5, r8
 800047e:	3b01      	subs	r3, #1
 8000480:	45a8      	cmp	r8, r5
 8000482:	d900      	bls.n	8000486 <__aeabi_ddiv+0x252>
 8000484:	e13a      	b.n	80006fc <__aeabi_ddiv+0x4c8>
 8000486:	45a9      	cmp	r9, r5
 8000488:	d800      	bhi.n	800048c <__aeabi_ddiv+0x258>
 800048a:	e137      	b.n	80006fc <__aeabi_ddiv+0x4c8>
 800048c:	2302      	movs	r3, #2
 800048e:	425b      	negs	r3, r3
 8000490:	469c      	mov	ip, r3
 8000492:	4445      	add	r5, r8
 8000494:	44e3      	add	fp, ip
 8000496:	464b      	mov	r3, r9
 8000498:	1aeb      	subs	r3, r5, r3
 800049a:	0039      	movs	r1, r7
 800049c:	0018      	movs	r0, r3
 800049e:	9304      	str	r3, [sp, #16]
 80004a0:	f7ff fe3c 	bl	800011c <__udivsi3>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	0005      	movs	r5, r0
 80004a8:	4343      	muls	r3, r0
 80004aa:	0039      	movs	r1, r7
 80004ac:	9804      	ldr	r0, [sp, #16]
 80004ae:	4699      	mov	r9, r3
 80004b0:	f7ff feba 	bl	8000228 <__aeabi_uidivmod>
 80004b4:	0433      	lsls	r3, r6, #16
 80004b6:	0409      	lsls	r1, r1, #16
 80004b8:	0c1b      	lsrs	r3, r3, #16
 80004ba:	430b      	orrs	r3, r1
 80004bc:	4599      	cmp	r9, r3
 80004be:	d909      	bls.n	80004d4 <__aeabi_ddiv+0x2a0>
 80004c0:	4443      	add	r3, r8
 80004c2:	1e6a      	subs	r2, r5, #1
 80004c4:	4598      	cmp	r8, r3
 80004c6:	d900      	bls.n	80004ca <__aeabi_ddiv+0x296>
 80004c8:	e11a      	b.n	8000700 <__aeabi_ddiv+0x4cc>
 80004ca:	4599      	cmp	r9, r3
 80004cc:	d800      	bhi.n	80004d0 <__aeabi_ddiv+0x29c>
 80004ce:	e117      	b.n	8000700 <__aeabi_ddiv+0x4cc>
 80004d0:	3d02      	subs	r5, #2
 80004d2:	4443      	add	r3, r8
 80004d4:	464a      	mov	r2, r9
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	465a      	mov	r2, fp
 80004da:	0412      	lsls	r2, r2, #16
 80004dc:	432a      	orrs	r2, r5
 80004de:	9903      	ldr	r1, [sp, #12]
 80004e0:	4693      	mov	fp, r2
 80004e2:	0c10      	lsrs	r0, r2, #16
 80004e4:	0c0a      	lsrs	r2, r1, #16
 80004e6:	4691      	mov	r9, r2
 80004e8:	0409      	lsls	r1, r1, #16
 80004ea:	465a      	mov	r2, fp
 80004ec:	0c09      	lsrs	r1, r1, #16
 80004ee:	464e      	mov	r6, r9
 80004f0:	000d      	movs	r5, r1
 80004f2:	0412      	lsls	r2, r2, #16
 80004f4:	0c12      	lsrs	r2, r2, #16
 80004f6:	4345      	muls	r5, r0
 80004f8:	9105      	str	r1, [sp, #20]
 80004fa:	4351      	muls	r1, r2
 80004fc:	4372      	muls	r2, r6
 80004fe:	4370      	muls	r0, r6
 8000500:	1952      	adds	r2, r2, r5
 8000502:	0c0e      	lsrs	r6, r1, #16
 8000504:	18b2      	adds	r2, r6, r2
 8000506:	4295      	cmp	r5, r2
 8000508:	d903      	bls.n	8000512 <__aeabi_ddiv+0x2de>
 800050a:	2580      	movs	r5, #128	; 0x80
 800050c:	026d      	lsls	r5, r5, #9
 800050e:	46ac      	mov	ip, r5
 8000510:	4460      	add	r0, ip
 8000512:	0c15      	lsrs	r5, r2, #16
 8000514:	0409      	lsls	r1, r1, #16
 8000516:	0412      	lsls	r2, r2, #16
 8000518:	0c09      	lsrs	r1, r1, #16
 800051a:	1828      	adds	r0, r5, r0
 800051c:	1852      	adds	r2, r2, r1
 800051e:	4283      	cmp	r3, r0
 8000520:	d200      	bcs.n	8000524 <__aeabi_ddiv+0x2f0>
 8000522:	e0ce      	b.n	80006c2 <__aeabi_ddiv+0x48e>
 8000524:	d100      	bne.n	8000528 <__aeabi_ddiv+0x2f4>
 8000526:	e0c8      	b.n	80006ba <__aeabi_ddiv+0x486>
 8000528:	1a1d      	subs	r5, r3, r0
 800052a:	4653      	mov	r3, sl
 800052c:	1a9e      	subs	r6, r3, r2
 800052e:	45b2      	cmp	sl, r6
 8000530:	4192      	sbcs	r2, r2
 8000532:	4252      	negs	r2, r2
 8000534:	1aab      	subs	r3, r5, r2
 8000536:	469a      	mov	sl, r3
 8000538:	4598      	cmp	r8, r3
 800053a:	d100      	bne.n	800053e <__aeabi_ddiv+0x30a>
 800053c:	e117      	b.n	800076e <__aeabi_ddiv+0x53a>
 800053e:	0039      	movs	r1, r7
 8000540:	0018      	movs	r0, r3
 8000542:	f7ff fdeb 	bl	800011c <__udivsi3>
 8000546:	9b01      	ldr	r3, [sp, #4]
 8000548:	0005      	movs	r5, r0
 800054a:	4343      	muls	r3, r0
 800054c:	0039      	movs	r1, r7
 800054e:	4650      	mov	r0, sl
 8000550:	9304      	str	r3, [sp, #16]
 8000552:	f7ff fe69 	bl	8000228 <__aeabi_uidivmod>
 8000556:	9804      	ldr	r0, [sp, #16]
 8000558:	040b      	lsls	r3, r1, #16
 800055a:	0c31      	lsrs	r1, r6, #16
 800055c:	4319      	orrs	r1, r3
 800055e:	4288      	cmp	r0, r1
 8000560:	d909      	bls.n	8000576 <__aeabi_ddiv+0x342>
 8000562:	4441      	add	r1, r8
 8000564:	1e6b      	subs	r3, r5, #1
 8000566:	4588      	cmp	r8, r1
 8000568:	d900      	bls.n	800056c <__aeabi_ddiv+0x338>
 800056a:	e107      	b.n	800077c <__aeabi_ddiv+0x548>
 800056c:	4288      	cmp	r0, r1
 800056e:	d800      	bhi.n	8000572 <__aeabi_ddiv+0x33e>
 8000570:	e104      	b.n	800077c <__aeabi_ddiv+0x548>
 8000572:	3d02      	subs	r5, #2
 8000574:	4441      	add	r1, r8
 8000576:	9b04      	ldr	r3, [sp, #16]
 8000578:	1acb      	subs	r3, r1, r3
 800057a:	0018      	movs	r0, r3
 800057c:	0039      	movs	r1, r7
 800057e:	9304      	str	r3, [sp, #16]
 8000580:	f7ff fdcc 	bl	800011c <__udivsi3>
 8000584:	9b01      	ldr	r3, [sp, #4]
 8000586:	4682      	mov	sl, r0
 8000588:	4343      	muls	r3, r0
 800058a:	0039      	movs	r1, r7
 800058c:	9804      	ldr	r0, [sp, #16]
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	f7ff fe4a 	bl	8000228 <__aeabi_uidivmod>
 8000594:	9801      	ldr	r0, [sp, #4]
 8000596:	040b      	lsls	r3, r1, #16
 8000598:	0431      	lsls	r1, r6, #16
 800059a:	0c09      	lsrs	r1, r1, #16
 800059c:	4319      	orrs	r1, r3
 800059e:	4288      	cmp	r0, r1
 80005a0:	d90d      	bls.n	80005be <__aeabi_ddiv+0x38a>
 80005a2:	4653      	mov	r3, sl
 80005a4:	4441      	add	r1, r8
 80005a6:	3b01      	subs	r3, #1
 80005a8:	4588      	cmp	r8, r1
 80005aa:	d900      	bls.n	80005ae <__aeabi_ddiv+0x37a>
 80005ac:	e0e8      	b.n	8000780 <__aeabi_ddiv+0x54c>
 80005ae:	4288      	cmp	r0, r1
 80005b0:	d800      	bhi.n	80005b4 <__aeabi_ddiv+0x380>
 80005b2:	e0e5      	b.n	8000780 <__aeabi_ddiv+0x54c>
 80005b4:	2302      	movs	r3, #2
 80005b6:	425b      	negs	r3, r3
 80005b8:	469c      	mov	ip, r3
 80005ba:	4441      	add	r1, r8
 80005bc:	44e2      	add	sl, ip
 80005be:	9b01      	ldr	r3, [sp, #4]
 80005c0:	042d      	lsls	r5, r5, #16
 80005c2:	1ace      	subs	r6, r1, r3
 80005c4:	4651      	mov	r1, sl
 80005c6:	4329      	orrs	r1, r5
 80005c8:	9d05      	ldr	r5, [sp, #20]
 80005ca:	464f      	mov	r7, r9
 80005cc:	002a      	movs	r2, r5
 80005ce:	040b      	lsls	r3, r1, #16
 80005d0:	0c08      	lsrs	r0, r1, #16
 80005d2:	0c1b      	lsrs	r3, r3, #16
 80005d4:	435a      	muls	r2, r3
 80005d6:	4345      	muls	r5, r0
 80005d8:	437b      	muls	r3, r7
 80005da:	4378      	muls	r0, r7
 80005dc:	195b      	adds	r3, r3, r5
 80005de:	0c17      	lsrs	r7, r2, #16
 80005e0:	18fb      	adds	r3, r7, r3
 80005e2:	429d      	cmp	r5, r3
 80005e4:	d903      	bls.n	80005ee <__aeabi_ddiv+0x3ba>
 80005e6:	2580      	movs	r5, #128	; 0x80
 80005e8:	026d      	lsls	r5, r5, #9
 80005ea:	46ac      	mov	ip, r5
 80005ec:	4460      	add	r0, ip
 80005ee:	0c1d      	lsrs	r5, r3, #16
 80005f0:	0412      	lsls	r2, r2, #16
 80005f2:	041b      	lsls	r3, r3, #16
 80005f4:	0c12      	lsrs	r2, r2, #16
 80005f6:	1828      	adds	r0, r5, r0
 80005f8:	189b      	adds	r3, r3, r2
 80005fa:	4286      	cmp	r6, r0
 80005fc:	d200      	bcs.n	8000600 <__aeabi_ddiv+0x3cc>
 80005fe:	e093      	b.n	8000728 <__aeabi_ddiv+0x4f4>
 8000600:	d100      	bne.n	8000604 <__aeabi_ddiv+0x3d0>
 8000602:	e08e      	b.n	8000722 <__aeabi_ddiv+0x4ee>
 8000604:	2301      	movs	r3, #1
 8000606:	4319      	orrs	r1, r3
 8000608:	4ba0      	ldr	r3, [pc, #640]	; (800088c <__aeabi_ddiv+0x658>)
 800060a:	18e3      	adds	r3, r4, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	dc00      	bgt.n	8000612 <__aeabi_ddiv+0x3de>
 8000610:	e099      	b.n	8000746 <__aeabi_ddiv+0x512>
 8000612:	074a      	lsls	r2, r1, #29
 8000614:	d000      	beq.n	8000618 <__aeabi_ddiv+0x3e4>
 8000616:	e09e      	b.n	8000756 <__aeabi_ddiv+0x522>
 8000618:	465a      	mov	r2, fp
 800061a:	01d2      	lsls	r2, r2, #7
 800061c:	d506      	bpl.n	800062c <__aeabi_ddiv+0x3f8>
 800061e:	465a      	mov	r2, fp
 8000620:	4b9b      	ldr	r3, [pc, #620]	; (8000890 <__aeabi_ddiv+0x65c>)
 8000622:	401a      	ands	r2, r3
 8000624:	2380      	movs	r3, #128	; 0x80
 8000626:	4693      	mov	fp, r2
 8000628:	00db      	lsls	r3, r3, #3
 800062a:	18e3      	adds	r3, r4, r3
 800062c:	4a99      	ldr	r2, [pc, #612]	; (8000894 <__aeabi_ddiv+0x660>)
 800062e:	4293      	cmp	r3, r2
 8000630:	dd68      	ble.n	8000704 <__aeabi_ddiv+0x4d0>
 8000632:	2301      	movs	r3, #1
 8000634:	9a02      	ldr	r2, [sp, #8]
 8000636:	4c98      	ldr	r4, [pc, #608]	; (8000898 <__aeabi_ddiv+0x664>)
 8000638:	401a      	ands	r2, r3
 800063a:	2300      	movs	r3, #0
 800063c:	4694      	mov	ip, r2
 800063e:	4698      	mov	r8, r3
 8000640:	2200      	movs	r2, #0
 8000642:	e6c5      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 8000644:	2280      	movs	r2, #128	; 0x80
 8000646:	464b      	mov	r3, r9
 8000648:	0312      	lsls	r2, r2, #12
 800064a:	4213      	tst	r3, r2
 800064c:	d00a      	beq.n	8000664 <__aeabi_ddiv+0x430>
 800064e:	465b      	mov	r3, fp
 8000650:	4213      	tst	r3, r2
 8000652:	d106      	bne.n	8000662 <__aeabi_ddiv+0x42e>
 8000654:	431a      	orrs	r2, r3
 8000656:	0312      	lsls	r2, r2, #12
 8000658:	0b12      	lsrs	r2, r2, #12
 800065a:	46ac      	mov	ip, r5
 800065c:	4688      	mov	r8, r1
 800065e:	4c8e      	ldr	r4, [pc, #568]	; (8000898 <__aeabi_ddiv+0x664>)
 8000660:	e6b6      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 8000662:	464b      	mov	r3, r9
 8000664:	431a      	orrs	r2, r3
 8000666:	0312      	lsls	r2, r2, #12
 8000668:	0b12      	lsrs	r2, r2, #12
 800066a:	46bc      	mov	ip, r7
 800066c:	4c8a      	ldr	r4, [pc, #552]	; (8000898 <__aeabi_ddiv+0x664>)
 800066e:	e6af      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 8000670:	0003      	movs	r3, r0
 8000672:	465a      	mov	r2, fp
 8000674:	3b28      	subs	r3, #40	; 0x28
 8000676:	409a      	lsls	r2, r3
 8000678:	2300      	movs	r3, #0
 800067a:	4691      	mov	r9, r2
 800067c:	4698      	mov	r8, r3
 800067e:	e657      	b.n	8000330 <__aeabi_ddiv+0xfc>
 8000680:	4658      	mov	r0, fp
 8000682:	f000 fc9f 	bl	8000fc4 <__clzsi2>
 8000686:	3020      	adds	r0, #32
 8000688:	e640      	b.n	800030c <__aeabi_ddiv+0xd8>
 800068a:	0003      	movs	r3, r0
 800068c:	4652      	mov	r2, sl
 800068e:	3b28      	subs	r3, #40	; 0x28
 8000690:	409a      	lsls	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	4693      	mov	fp, r2
 8000696:	e677      	b.n	8000388 <__aeabi_ddiv+0x154>
 8000698:	f000 fc94 	bl	8000fc4 <__clzsi2>
 800069c:	3020      	adds	r0, #32
 800069e:	e65f      	b.n	8000360 <__aeabi_ddiv+0x12c>
 80006a0:	4588      	cmp	r8, r1
 80006a2:	d200      	bcs.n	80006a6 <__aeabi_ddiv+0x472>
 80006a4:	e6c7      	b.n	8000436 <__aeabi_ddiv+0x202>
 80006a6:	464b      	mov	r3, r9
 80006a8:	07de      	lsls	r6, r3, #31
 80006aa:	085d      	lsrs	r5, r3, #1
 80006ac:	4643      	mov	r3, r8
 80006ae:	085b      	lsrs	r3, r3, #1
 80006b0:	431e      	orrs	r6, r3
 80006b2:	4643      	mov	r3, r8
 80006b4:	07db      	lsls	r3, r3, #31
 80006b6:	469a      	mov	sl, r3
 80006b8:	e6c2      	b.n	8000440 <__aeabi_ddiv+0x20c>
 80006ba:	2500      	movs	r5, #0
 80006bc:	4592      	cmp	sl, r2
 80006be:	d300      	bcc.n	80006c2 <__aeabi_ddiv+0x48e>
 80006c0:	e733      	b.n	800052a <__aeabi_ddiv+0x2f6>
 80006c2:	9e03      	ldr	r6, [sp, #12]
 80006c4:	4659      	mov	r1, fp
 80006c6:	46b4      	mov	ip, r6
 80006c8:	44e2      	add	sl, ip
 80006ca:	45b2      	cmp	sl, r6
 80006cc:	41ad      	sbcs	r5, r5
 80006ce:	426d      	negs	r5, r5
 80006d0:	4445      	add	r5, r8
 80006d2:	18eb      	adds	r3, r5, r3
 80006d4:	3901      	subs	r1, #1
 80006d6:	4598      	cmp	r8, r3
 80006d8:	d207      	bcs.n	80006ea <__aeabi_ddiv+0x4b6>
 80006da:	4298      	cmp	r0, r3
 80006dc:	d900      	bls.n	80006e0 <__aeabi_ddiv+0x4ac>
 80006de:	e07f      	b.n	80007e0 <__aeabi_ddiv+0x5ac>
 80006e0:	d100      	bne.n	80006e4 <__aeabi_ddiv+0x4b0>
 80006e2:	e0bc      	b.n	800085e <__aeabi_ddiv+0x62a>
 80006e4:	1a1d      	subs	r5, r3, r0
 80006e6:	468b      	mov	fp, r1
 80006e8:	e71f      	b.n	800052a <__aeabi_ddiv+0x2f6>
 80006ea:	4598      	cmp	r8, r3
 80006ec:	d1fa      	bne.n	80006e4 <__aeabi_ddiv+0x4b0>
 80006ee:	9d03      	ldr	r5, [sp, #12]
 80006f0:	4555      	cmp	r5, sl
 80006f2:	d9f2      	bls.n	80006da <__aeabi_ddiv+0x4a6>
 80006f4:	4643      	mov	r3, r8
 80006f6:	468b      	mov	fp, r1
 80006f8:	1a1d      	subs	r5, r3, r0
 80006fa:	e716      	b.n	800052a <__aeabi_ddiv+0x2f6>
 80006fc:	469b      	mov	fp, r3
 80006fe:	e6ca      	b.n	8000496 <__aeabi_ddiv+0x262>
 8000700:	0015      	movs	r5, r2
 8000702:	e6e7      	b.n	80004d4 <__aeabi_ddiv+0x2a0>
 8000704:	465a      	mov	r2, fp
 8000706:	08c9      	lsrs	r1, r1, #3
 8000708:	0752      	lsls	r2, r2, #29
 800070a:	430a      	orrs	r2, r1
 800070c:	055b      	lsls	r3, r3, #21
 800070e:	4690      	mov	r8, r2
 8000710:	0d5c      	lsrs	r4, r3, #21
 8000712:	465a      	mov	r2, fp
 8000714:	2301      	movs	r3, #1
 8000716:	9902      	ldr	r1, [sp, #8]
 8000718:	0252      	lsls	r2, r2, #9
 800071a:	4019      	ands	r1, r3
 800071c:	0b12      	lsrs	r2, r2, #12
 800071e:	468c      	mov	ip, r1
 8000720:	e656      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 8000722:	2b00      	cmp	r3, #0
 8000724:	d100      	bne.n	8000728 <__aeabi_ddiv+0x4f4>
 8000726:	e76f      	b.n	8000608 <__aeabi_ddiv+0x3d4>
 8000728:	4446      	add	r6, r8
 800072a:	1e4a      	subs	r2, r1, #1
 800072c:	45b0      	cmp	r8, r6
 800072e:	d929      	bls.n	8000784 <__aeabi_ddiv+0x550>
 8000730:	0011      	movs	r1, r2
 8000732:	4286      	cmp	r6, r0
 8000734:	d000      	beq.n	8000738 <__aeabi_ddiv+0x504>
 8000736:	e765      	b.n	8000604 <__aeabi_ddiv+0x3d0>
 8000738:	9a03      	ldr	r2, [sp, #12]
 800073a:	4293      	cmp	r3, r2
 800073c:	d000      	beq.n	8000740 <__aeabi_ddiv+0x50c>
 800073e:	e761      	b.n	8000604 <__aeabi_ddiv+0x3d0>
 8000740:	e762      	b.n	8000608 <__aeabi_ddiv+0x3d4>
 8000742:	2101      	movs	r1, #1
 8000744:	4249      	negs	r1, r1
 8000746:	2001      	movs	r0, #1
 8000748:	1ac2      	subs	r2, r0, r3
 800074a:	2a38      	cmp	r2, #56	; 0x38
 800074c:	dd21      	ble.n	8000792 <__aeabi_ddiv+0x55e>
 800074e:	9b02      	ldr	r3, [sp, #8]
 8000750:	4003      	ands	r3, r0
 8000752:	469c      	mov	ip, r3
 8000754:	e638      	b.n	80003c8 <__aeabi_ddiv+0x194>
 8000756:	220f      	movs	r2, #15
 8000758:	400a      	ands	r2, r1
 800075a:	2a04      	cmp	r2, #4
 800075c:	d100      	bne.n	8000760 <__aeabi_ddiv+0x52c>
 800075e:	e75b      	b.n	8000618 <__aeabi_ddiv+0x3e4>
 8000760:	000a      	movs	r2, r1
 8000762:	1d11      	adds	r1, r2, #4
 8000764:	4291      	cmp	r1, r2
 8000766:	4192      	sbcs	r2, r2
 8000768:	4252      	negs	r2, r2
 800076a:	4493      	add	fp, r2
 800076c:	e754      	b.n	8000618 <__aeabi_ddiv+0x3e4>
 800076e:	4b47      	ldr	r3, [pc, #284]	; (800088c <__aeabi_ddiv+0x658>)
 8000770:	18e3      	adds	r3, r4, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	dde5      	ble.n	8000742 <__aeabi_ddiv+0x50e>
 8000776:	2201      	movs	r2, #1
 8000778:	4252      	negs	r2, r2
 800077a:	e7f2      	b.n	8000762 <__aeabi_ddiv+0x52e>
 800077c:	001d      	movs	r5, r3
 800077e:	e6fa      	b.n	8000576 <__aeabi_ddiv+0x342>
 8000780:	469a      	mov	sl, r3
 8000782:	e71c      	b.n	80005be <__aeabi_ddiv+0x38a>
 8000784:	42b0      	cmp	r0, r6
 8000786:	d839      	bhi.n	80007fc <__aeabi_ddiv+0x5c8>
 8000788:	d06e      	beq.n	8000868 <__aeabi_ddiv+0x634>
 800078a:	0011      	movs	r1, r2
 800078c:	e73a      	b.n	8000604 <__aeabi_ddiv+0x3d0>
 800078e:	9302      	str	r3, [sp, #8]
 8000790:	e73a      	b.n	8000608 <__aeabi_ddiv+0x3d4>
 8000792:	2a1f      	cmp	r2, #31
 8000794:	dc3c      	bgt.n	8000810 <__aeabi_ddiv+0x5dc>
 8000796:	2320      	movs	r3, #32
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	000c      	movs	r4, r1
 800079c:	4658      	mov	r0, fp
 800079e:	4099      	lsls	r1, r3
 80007a0:	4098      	lsls	r0, r3
 80007a2:	1e4b      	subs	r3, r1, #1
 80007a4:	4199      	sbcs	r1, r3
 80007a6:	465b      	mov	r3, fp
 80007a8:	40d4      	lsrs	r4, r2
 80007aa:	40d3      	lsrs	r3, r2
 80007ac:	4320      	orrs	r0, r4
 80007ae:	4308      	orrs	r0, r1
 80007b0:	001a      	movs	r2, r3
 80007b2:	0743      	lsls	r3, r0, #29
 80007b4:	d009      	beq.n	80007ca <__aeabi_ddiv+0x596>
 80007b6:	230f      	movs	r3, #15
 80007b8:	4003      	ands	r3, r0
 80007ba:	2b04      	cmp	r3, #4
 80007bc:	d005      	beq.n	80007ca <__aeabi_ddiv+0x596>
 80007be:	0001      	movs	r1, r0
 80007c0:	1d08      	adds	r0, r1, #4
 80007c2:	4288      	cmp	r0, r1
 80007c4:	419b      	sbcs	r3, r3
 80007c6:	425b      	negs	r3, r3
 80007c8:	18d2      	adds	r2, r2, r3
 80007ca:	0213      	lsls	r3, r2, #8
 80007cc:	d53a      	bpl.n	8000844 <__aeabi_ddiv+0x610>
 80007ce:	2301      	movs	r3, #1
 80007d0:	9a02      	ldr	r2, [sp, #8]
 80007d2:	2401      	movs	r4, #1
 80007d4:	401a      	ands	r2, r3
 80007d6:	2300      	movs	r3, #0
 80007d8:	4694      	mov	ip, r2
 80007da:	4698      	mov	r8, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	e5f7      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 80007e0:	2102      	movs	r1, #2
 80007e2:	4249      	negs	r1, r1
 80007e4:	468c      	mov	ip, r1
 80007e6:	9d03      	ldr	r5, [sp, #12]
 80007e8:	44e3      	add	fp, ip
 80007ea:	46ac      	mov	ip, r5
 80007ec:	44e2      	add	sl, ip
 80007ee:	45aa      	cmp	sl, r5
 80007f0:	41ad      	sbcs	r5, r5
 80007f2:	426d      	negs	r5, r5
 80007f4:	4445      	add	r5, r8
 80007f6:	18ed      	adds	r5, r5, r3
 80007f8:	1a2d      	subs	r5, r5, r0
 80007fa:	e696      	b.n	800052a <__aeabi_ddiv+0x2f6>
 80007fc:	1e8a      	subs	r2, r1, #2
 80007fe:	9903      	ldr	r1, [sp, #12]
 8000800:	004d      	lsls	r5, r1, #1
 8000802:	428d      	cmp	r5, r1
 8000804:	4189      	sbcs	r1, r1
 8000806:	4249      	negs	r1, r1
 8000808:	4441      	add	r1, r8
 800080a:	1876      	adds	r6, r6, r1
 800080c:	9503      	str	r5, [sp, #12]
 800080e:	e78f      	b.n	8000730 <__aeabi_ddiv+0x4fc>
 8000810:	201f      	movs	r0, #31
 8000812:	4240      	negs	r0, r0
 8000814:	1ac3      	subs	r3, r0, r3
 8000816:	4658      	mov	r0, fp
 8000818:	40d8      	lsrs	r0, r3
 800081a:	0003      	movs	r3, r0
 800081c:	2a20      	cmp	r2, #32
 800081e:	d028      	beq.n	8000872 <__aeabi_ddiv+0x63e>
 8000820:	2040      	movs	r0, #64	; 0x40
 8000822:	465d      	mov	r5, fp
 8000824:	1a82      	subs	r2, r0, r2
 8000826:	4095      	lsls	r5, r2
 8000828:	4329      	orrs	r1, r5
 800082a:	1e4a      	subs	r2, r1, #1
 800082c:	4191      	sbcs	r1, r2
 800082e:	4319      	orrs	r1, r3
 8000830:	2307      	movs	r3, #7
 8000832:	2200      	movs	r2, #0
 8000834:	400b      	ands	r3, r1
 8000836:	d009      	beq.n	800084c <__aeabi_ddiv+0x618>
 8000838:	230f      	movs	r3, #15
 800083a:	2200      	movs	r2, #0
 800083c:	400b      	ands	r3, r1
 800083e:	0008      	movs	r0, r1
 8000840:	2b04      	cmp	r3, #4
 8000842:	d1bd      	bne.n	80007c0 <__aeabi_ddiv+0x58c>
 8000844:	0001      	movs	r1, r0
 8000846:	0753      	lsls	r3, r2, #29
 8000848:	0252      	lsls	r2, r2, #9
 800084a:	0b12      	lsrs	r2, r2, #12
 800084c:	08c9      	lsrs	r1, r1, #3
 800084e:	4319      	orrs	r1, r3
 8000850:	2301      	movs	r3, #1
 8000852:	4688      	mov	r8, r1
 8000854:	9902      	ldr	r1, [sp, #8]
 8000856:	2400      	movs	r4, #0
 8000858:	4019      	ands	r1, r3
 800085a:	468c      	mov	ip, r1
 800085c:	e5b8      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 800085e:	4552      	cmp	r2, sl
 8000860:	d8be      	bhi.n	80007e0 <__aeabi_ddiv+0x5ac>
 8000862:	468b      	mov	fp, r1
 8000864:	2500      	movs	r5, #0
 8000866:	e660      	b.n	800052a <__aeabi_ddiv+0x2f6>
 8000868:	9d03      	ldr	r5, [sp, #12]
 800086a:	429d      	cmp	r5, r3
 800086c:	d3c6      	bcc.n	80007fc <__aeabi_ddiv+0x5c8>
 800086e:	0011      	movs	r1, r2
 8000870:	e762      	b.n	8000738 <__aeabi_ddiv+0x504>
 8000872:	2500      	movs	r5, #0
 8000874:	e7d8      	b.n	8000828 <__aeabi_ddiv+0x5f4>
 8000876:	2280      	movs	r2, #128	; 0x80
 8000878:	465b      	mov	r3, fp
 800087a:	0312      	lsls	r2, r2, #12
 800087c:	431a      	orrs	r2, r3
 800087e:	9b01      	ldr	r3, [sp, #4]
 8000880:	0312      	lsls	r2, r2, #12
 8000882:	0b12      	lsrs	r2, r2, #12
 8000884:	469c      	mov	ip, r3
 8000886:	4688      	mov	r8, r1
 8000888:	4c03      	ldr	r4, [pc, #12]	; (8000898 <__aeabi_ddiv+0x664>)
 800088a:	e5a1      	b.n	80003d0 <__aeabi_ddiv+0x19c>
 800088c:	000003ff 	.word	0x000003ff
 8000890:	feffffff 	.word	0xfeffffff
 8000894:	000007fe 	.word	0x000007fe
 8000898:	000007ff 	.word	0x000007ff

0800089c <__aeabi_dmul>:
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089e:	4657      	mov	r7, sl
 80008a0:	4645      	mov	r5, r8
 80008a2:	46de      	mov	lr, fp
 80008a4:	464e      	mov	r6, r9
 80008a6:	b5e0      	push	{r5, r6, r7, lr}
 80008a8:	030c      	lsls	r4, r1, #12
 80008aa:	4698      	mov	r8, r3
 80008ac:	004e      	lsls	r6, r1, #1
 80008ae:	0b23      	lsrs	r3, r4, #12
 80008b0:	b087      	sub	sp, #28
 80008b2:	0007      	movs	r7, r0
 80008b4:	4692      	mov	sl, r2
 80008b6:	469b      	mov	fp, r3
 80008b8:	0d76      	lsrs	r6, r6, #21
 80008ba:	0fcd      	lsrs	r5, r1, #31
 80008bc:	2e00      	cmp	r6, #0
 80008be:	d06b      	beq.n	8000998 <__aeabi_dmul+0xfc>
 80008c0:	4b6d      	ldr	r3, [pc, #436]	; (8000a78 <__aeabi_dmul+0x1dc>)
 80008c2:	429e      	cmp	r6, r3
 80008c4:	d035      	beq.n	8000932 <__aeabi_dmul+0x96>
 80008c6:	2480      	movs	r4, #128	; 0x80
 80008c8:	465b      	mov	r3, fp
 80008ca:	0f42      	lsrs	r2, r0, #29
 80008cc:	0424      	lsls	r4, r4, #16
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	4314      	orrs	r4, r2
 80008d2:	431c      	orrs	r4, r3
 80008d4:	00c3      	lsls	r3, r0, #3
 80008d6:	4699      	mov	r9, r3
 80008d8:	4b68      	ldr	r3, [pc, #416]	; (8000a7c <__aeabi_dmul+0x1e0>)
 80008da:	46a3      	mov	fp, r4
 80008dc:	469c      	mov	ip, r3
 80008de:	2300      	movs	r3, #0
 80008e0:	2700      	movs	r7, #0
 80008e2:	4466      	add	r6, ip
 80008e4:	9302      	str	r3, [sp, #8]
 80008e6:	4643      	mov	r3, r8
 80008e8:	031c      	lsls	r4, r3, #12
 80008ea:	005a      	lsls	r2, r3, #1
 80008ec:	0fdb      	lsrs	r3, r3, #31
 80008ee:	4650      	mov	r0, sl
 80008f0:	0b24      	lsrs	r4, r4, #12
 80008f2:	0d52      	lsrs	r2, r2, #21
 80008f4:	4698      	mov	r8, r3
 80008f6:	d100      	bne.n	80008fa <__aeabi_dmul+0x5e>
 80008f8:	e076      	b.n	80009e8 <__aeabi_dmul+0x14c>
 80008fa:	4b5f      	ldr	r3, [pc, #380]	; (8000a78 <__aeabi_dmul+0x1dc>)
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d06d      	beq.n	80009dc <__aeabi_dmul+0x140>
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	0f41      	lsrs	r1, r0, #29
 8000904:	041b      	lsls	r3, r3, #16
 8000906:	430b      	orrs	r3, r1
 8000908:	495c      	ldr	r1, [pc, #368]	; (8000a7c <__aeabi_dmul+0x1e0>)
 800090a:	00e4      	lsls	r4, r4, #3
 800090c:	468c      	mov	ip, r1
 800090e:	431c      	orrs	r4, r3
 8000910:	00c3      	lsls	r3, r0, #3
 8000912:	2000      	movs	r0, #0
 8000914:	4462      	add	r2, ip
 8000916:	4641      	mov	r1, r8
 8000918:	18b6      	adds	r6, r6, r2
 800091a:	4069      	eors	r1, r5
 800091c:	1c72      	adds	r2, r6, #1
 800091e:	9101      	str	r1, [sp, #4]
 8000920:	4694      	mov	ip, r2
 8000922:	4307      	orrs	r7, r0
 8000924:	2f0f      	cmp	r7, #15
 8000926:	d900      	bls.n	800092a <__aeabi_dmul+0x8e>
 8000928:	e0b0      	b.n	8000a8c <__aeabi_dmul+0x1f0>
 800092a:	4a55      	ldr	r2, [pc, #340]	; (8000a80 <__aeabi_dmul+0x1e4>)
 800092c:	00bf      	lsls	r7, r7, #2
 800092e:	59d2      	ldr	r2, [r2, r7]
 8000930:	4697      	mov	pc, r2
 8000932:	465b      	mov	r3, fp
 8000934:	4303      	orrs	r3, r0
 8000936:	4699      	mov	r9, r3
 8000938:	d000      	beq.n	800093c <__aeabi_dmul+0xa0>
 800093a:	e087      	b.n	8000a4c <__aeabi_dmul+0x1b0>
 800093c:	2300      	movs	r3, #0
 800093e:	469b      	mov	fp, r3
 8000940:	3302      	adds	r3, #2
 8000942:	2708      	movs	r7, #8
 8000944:	9302      	str	r3, [sp, #8]
 8000946:	e7ce      	b.n	80008e6 <__aeabi_dmul+0x4a>
 8000948:	4642      	mov	r2, r8
 800094a:	9201      	str	r2, [sp, #4]
 800094c:	2802      	cmp	r0, #2
 800094e:	d067      	beq.n	8000a20 <__aeabi_dmul+0x184>
 8000950:	2803      	cmp	r0, #3
 8000952:	d100      	bne.n	8000956 <__aeabi_dmul+0xba>
 8000954:	e20e      	b.n	8000d74 <__aeabi_dmul+0x4d8>
 8000956:	2801      	cmp	r0, #1
 8000958:	d000      	beq.n	800095c <__aeabi_dmul+0xc0>
 800095a:	e162      	b.n	8000c22 <__aeabi_dmul+0x386>
 800095c:	2300      	movs	r3, #0
 800095e:	2400      	movs	r4, #0
 8000960:	2200      	movs	r2, #0
 8000962:	4699      	mov	r9, r3
 8000964:	9901      	ldr	r1, [sp, #4]
 8000966:	4001      	ands	r1, r0
 8000968:	b2cd      	uxtb	r5, r1
 800096a:	2100      	movs	r1, #0
 800096c:	0312      	lsls	r2, r2, #12
 800096e:	0d0b      	lsrs	r3, r1, #20
 8000970:	0b12      	lsrs	r2, r2, #12
 8000972:	051b      	lsls	r3, r3, #20
 8000974:	4313      	orrs	r3, r2
 8000976:	4a43      	ldr	r2, [pc, #268]	; (8000a84 <__aeabi_dmul+0x1e8>)
 8000978:	0524      	lsls	r4, r4, #20
 800097a:	4013      	ands	r3, r2
 800097c:	431c      	orrs	r4, r3
 800097e:	0064      	lsls	r4, r4, #1
 8000980:	07ed      	lsls	r5, r5, #31
 8000982:	0864      	lsrs	r4, r4, #1
 8000984:	432c      	orrs	r4, r5
 8000986:	4648      	mov	r0, r9
 8000988:	0021      	movs	r1, r4
 800098a:	b007      	add	sp, #28
 800098c:	bc3c      	pop	{r2, r3, r4, r5}
 800098e:	4690      	mov	r8, r2
 8000990:	4699      	mov	r9, r3
 8000992:	46a2      	mov	sl, r4
 8000994:	46ab      	mov	fp, r5
 8000996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000998:	4303      	orrs	r3, r0
 800099a:	4699      	mov	r9, r3
 800099c:	d04f      	beq.n	8000a3e <__aeabi_dmul+0x1a2>
 800099e:	465b      	mov	r3, fp
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_dmul+0x10a>
 80009a4:	e189      	b.n	8000cba <__aeabi_dmul+0x41e>
 80009a6:	4658      	mov	r0, fp
 80009a8:	f000 fb0c 	bl	8000fc4 <__clzsi2>
 80009ac:	0003      	movs	r3, r0
 80009ae:	3b0b      	subs	r3, #11
 80009b0:	2b1c      	cmp	r3, #28
 80009b2:	dd00      	ble.n	80009b6 <__aeabi_dmul+0x11a>
 80009b4:	e17a      	b.n	8000cac <__aeabi_dmul+0x410>
 80009b6:	221d      	movs	r2, #29
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	003a      	movs	r2, r7
 80009bc:	0001      	movs	r1, r0
 80009be:	465c      	mov	r4, fp
 80009c0:	40da      	lsrs	r2, r3
 80009c2:	3908      	subs	r1, #8
 80009c4:	408c      	lsls	r4, r1
 80009c6:	0013      	movs	r3, r2
 80009c8:	408f      	lsls	r7, r1
 80009ca:	4323      	orrs	r3, r4
 80009cc:	469b      	mov	fp, r3
 80009ce:	46b9      	mov	r9, r7
 80009d0:	2300      	movs	r3, #0
 80009d2:	4e2d      	ldr	r6, [pc, #180]	; (8000a88 <__aeabi_dmul+0x1ec>)
 80009d4:	2700      	movs	r7, #0
 80009d6:	1a36      	subs	r6, r6, r0
 80009d8:	9302      	str	r3, [sp, #8]
 80009da:	e784      	b.n	80008e6 <__aeabi_dmul+0x4a>
 80009dc:	4653      	mov	r3, sl
 80009de:	4323      	orrs	r3, r4
 80009e0:	d12a      	bne.n	8000a38 <__aeabi_dmul+0x19c>
 80009e2:	2400      	movs	r4, #0
 80009e4:	2002      	movs	r0, #2
 80009e6:	e796      	b.n	8000916 <__aeabi_dmul+0x7a>
 80009e8:	4653      	mov	r3, sl
 80009ea:	4323      	orrs	r3, r4
 80009ec:	d020      	beq.n	8000a30 <__aeabi_dmul+0x194>
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dmul+0x158>
 80009f2:	e157      	b.n	8000ca4 <__aeabi_dmul+0x408>
 80009f4:	0020      	movs	r0, r4
 80009f6:	f000 fae5 	bl	8000fc4 <__clzsi2>
 80009fa:	0003      	movs	r3, r0
 80009fc:	3b0b      	subs	r3, #11
 80009fe:	2b1c      	cmp	r3, #28
 8000a00:	dd00      	ble.n	8000a04 <__aeabi_dmul+0x168>
 8000a02:	e149      	b.n	8000c98 <__aeabi_dmul+0x3fc>
 8000a04:	211d      	movs	r1, #29
 8000a06:	1acb      	subs	r3, r1, r3
 8000a08:	4651      	mov	r1, sl
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	40d9      	lsrs	r1, r3
 8000a0e:	4653      	mov	r3, sl
 8000a10:	3a08      	subs	r2, #8
 8000a12:	4094      	lsls	r4, r2
 8000a14:	4093      	lsls	r3, r2
 8000a16:	430c      	orrs	r4, r1
 8000a18:	4a1b      	ldr	r2, [pc, #108]	; (8000a88 <__aeabi_dmul+0x1ec>)
 8000a1a:	1a12      	subs	r2, r2, r0
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	e77a      	b.n	8000916 <__aeabi_dmul+0x7a>
 8000a20:	2501      	movs	r5, #1
 8000a22:	9b01      	ldr	r3, [sp, #4]
 8000a24:	4c14      	ldr	r4, [pc, #80]	; (8000a78 <__aeabi_dmul+0x1dc>)
 8000a26:	401d      	ands	r5, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4699      	mov	r9, r3
 8000a2e:	e79c      	b.n	800096a <__aeabi_dmul+0xce>
 8000a30:	2400      	movs	r4, #0
 8000a32:	2200      	movs	r2, #0
 8000a34:	2001      	movs	r0, #1
 8000a36:	e76e      	b.n	8000916 <__aeabi_dmul+0x7a>
 8000a38:	4653      	mov	r3, sl
 8000a3a:	2003      	movs	r0, #3
 8000a3c:	e76b      	b.n	8000916 <__aeabi_dmul+0x7a>
 8000a3e:	2300      	movs	r3, #0
 8000a40:	469b      	mov	fp, r3
 8000a42:	3301      	adds	r3, #1
 8000a44:	2704      	movs	r7, #4
 8000a46:	2600      	movs	r6, #0
 8000a48:	9302      	str	r3, [sp, #8]
 8000a4a:	e74c      	b.n	80008e6 <__aeabi_dmul+0x4a>
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	4681      	mov	r9, r0
 8000a50:	270c      	movs	r7, #12
 8000a52:	9302      	str	r3, [sp, #8]
 8000a54:	e747      	b.n	80008e6 <__aeabi_dmul+0x4a>
 8000a56:	2280      	movs	r2, #128	; 0x80
 8000a58:	2300      	movs	r3, #0
 8000a5a:	2500      	movs	r5, #0
 8000a5c:	0312      	lsls	r2, r2, #12
 8000a5e:	4699      	mov	r9, r3
 8000a60:	4c05      	ldr	r4, [pc, #20]	; (8000a78 <__aeabi_dmul+0x1dc>)
 8000a62:	e782      	b.n	800096a <__aeabi_dmul+0xce>
 8000a64:	465c      	mov	r4, fp
 8000a66:	464b      	mov	r3, r9
 8000a68:	9802      	ldr	r0, [sp, #8]
 8000a6a:	e76f      	b.n	800094c <__aeabi_dmul+0xb0>
 8000a6c:	465c      	mov	r4, fp
 8000a6e:	464b      	mov	r3, r9
 8000a70:	9501      	str	r5, [sp, #4]
 8000a72:	9802      	ldr	r0, [sp, #8]
 8000a74:	e76a      	b.n	800094c <__aeabi_dmul+0xb0>
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	000007ff 	.word	0x000007ff
 8000a7c:	fffffc01 	.word	0xfffffc01
 8000a80:	080034f4 	.word	0x080034f4
 8000a84:	800fffff 	.word	0x800fffff
 8000a88:	fffffc0d 	.word	0xfffffc0d
 8000a8c:	464a      	mov	r2, r9
 8000a8e:	4649      	mov	r1, r9
 8000a90:	0c17      	lsrs	r7, r2, #16
 8000a92:	0c1a      	lsrs	r2, r3, #16
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	0c1b      	lsrs	r3, r3, #16
 8000a98:	0408      	lsls	r0, r1, #16
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	0c00      	lsrs	r0, r0, #16
 8000a9e:	4341      	muls	r1, r0
 8000aa0:	0015      	movs	r5, r2
 8000aa2:	4688      	mov	r8, r1
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	437d      	muls	r5, r7
 8000aa8:	4379      	muls	r1, r7
 8000aaa:	9503      	str	r5, [sp, #12]
 8000aac:	4689      	mov	r9, r1
 8000aae:	0029      	movs	r1, r5
 8000ab0:	0015      	movs	r5, r2
 8000ab2:	4345      	muls	r5, r0
 8000ab4:	444d      	add	r5, r9
 8000ab6:	9502      	str	r5, [sp, #8]
 8000ab8:	4645      	mov	r5, r8
 8000aba:	0c2d      	lsrs	r5, r5, #16
 8000abc:	46aa      	mov	sl, r5
 8000abe:	9d02      	ldr	r5, [sp, #8]
 8000ac0:	4455      	add	r5, sl
 8000ac2:	45a9      	cmp	r9, r5
 8000ac4:	d906      	bls.n	8000ad4 <__aeabi_dmul+0x238>
 8000ac6:	468a      	mov	sl, r1
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0249      	lsls	r1, r1, #9
 8000acc:	4689      	mov	r9, r1
 8000ace:	44ca      	add	sl, r9
 8000ad0:	4651      	mov	r1, sl
 8000ad2:	9103      	str	r1, [sp, #12]
 8000ad4:	0c29      	lsrs	r1, r5, #16
 8000ad6:	9104      	str	r1, [sp, #16]
 8000ad8:	4641      	mov	r1, r8
 8000ada:	0409      	lsls	r1, r1, #16
 8000adc:	042d      	lsls	r5, r5, #16
 8000ade:	0c09      	lsrs	r1, r1, #16
 8000ae0:	4688      	mov	r8, r1
 8000ae2:	0029      	movs	r1, r5
 8000ae4:	0c25      	lsrs	r5, r4, #16
 8000ae6:	0424      	lsls	r4, r4, #16
 8000ae8:	4441      	add	r1, r8
 8000aea:	0c24      	lsrs	r4, r4, #16
 8000aec:	9105      	str	r1, [sp, #20]
 8000aee:	0021      	movs	r1, r4
 8000af0:	4341      	muls	r1, r0
 8000af2:	4688      	mov	r8, r1
 8000af4:	0021      	movs	r1, r4
 8000af6:	4379      	muls	r1, r7
 8000af8:	468a      	mov	sl, r1
 8000afa:	4368      	muls	r0, r5
 8000afc:	4641      	mov	r1, r8
 8000afe:	4450      	add	r0, sl
 8000b00:	4681      	mov	r9, r0
 8000b02:	0c08      	lsrs	r0, r1, #16
 8000b04:	4448      	add	r0, r9
 8000b06:	436f      	muls	r7, r5
 8000b08:	4582      	cmp	sl, r0
 8000b0a:	d903      	bls.n	8000b14 <__aeabi_dmul+0x278>
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	0249      	lsls	r1, r1, #9
 8000b10:	4689      	mov	r9, r1
 8000b12:	444f      	add	r7, r9
 8000b14:	0c01      	lsrs	r1, r0, #16
 8000b16:	4689      	mov	r9, r1
 8000b18:	0039      	movs	r1, r7
 8000b1a:	4449      	add	r1, r9
 8000b1c:	9102      	str	r1, [sp, #8]
 8000b1e:	4641      	mov	r1, r8
 8000b20:	040f      	lsls	r7, r1, #16
 8000b22:	9904      	ldr	r1, [sp, #16]
 8000b24:	0c3f      	lsrs	r7, r7, #16
 8000b26:	4688      	mov	r8, r1
 8000b28:	0400      	lsls	r0, r0, #16
 8000b2a:	19c0      	adds	r0, r0, r7
 8000b2c:	4480      	add	r8, r0
 8000b2e:	4641      	mov	r1, r8
 8000b30:	9104      	str	r1, [sp, #16]
 8000b32:	4659      	mov	r1, fp
 8000b34:	0c0f      	lsrs	r7, r1, #16
 8000b36:	0409      	lsls	r1, r1, #16
 8000b38:	0c09      	lsrs	r1, r1, #16
 8000b3a:	4688      	mov	r8, r1
 8000b3c:	4359      	muls	r1, r3
 8000b3e:	468a      	mov	sl, r1
 8000b40:	0039      	movs	r1, r7
 8000b42:	4351      	muls	r1, r2
 8000b44:	4689      	mov	r9, r1
 8000b46:	4641      	mov	r1, r8
 8000b48:	434a      	muls	r2, r1
 8000b4a:	4651      	mov	r1, sl
 8000b4c:	0c09      	lsrs	r1, r1, #16
 8000b4e:	468b      	mov	fp, r1
 8000b50:	437b      	muls	r3, r7
 8000b52:	18d2      	adds	r2, r2, r3
 8000b54:	445a      	add	r2, fp
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d903      	bls.n	8000b62 <__aeabi_dmul+0x2c6>
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	025b      	lsls	r3, r3, #9
 8000b5e:	469b      	mov	fp, r3
 8000b60:	44d9      	add	r9, fp
 8000b62:	4651      	mov	r1, sl
 8000b64:	0409      	lsls	r1, r1, #16
 8000b66:	0c09      	lsrs	r1, r1, #16
 8000b68:	468a      	mov	sl, r1
 8000b6a:	4641      	mov	r1, r8
 8000b6c:	4361      	muls	r1, r4
 8000b6e:	437c      	muls	r4, r7
 8000b70:	0c13      	lsrs	r3, r2, #16
 8000b72:	0412      	lsls	r2, r2, #16
 8000b74:	444b      	add	r3, r9
 8000b76:	4452      	add	r2, sl
 8000b78:	46a1      	mov	r9, r4
 8000b7a:	468a      	mov	sl, r1
 8000b7c:	003c      	movs	r4, r7
 8000b7e:	4641      	mov	r1, r8
 8000b80:	436c      	muls	r4, r5
 8000b82:	434d      	muls	r5, r1
 8000b84:	4651      	mov	r1, sl
 8000b86:	444d      	add	r5, r9
 8000b88:	0c0f      	lsrs	r7, r1, #16
 8000b8a:	197d      	adds	r5, r7, r5
 8000b8c:	45a9      	cmp	r9, r5
 8000b8e:	d903      	bls.n	8000b98 <__aeabi_dmul+0x2fc>
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	0249      	lsls	r1, r1, #9
 8000b94:	4688      	mov	r8, r1
 8000b96:	4444      	add	r4, r8
 8000b98:	9f04      	ldr	r7, [sp, #16]
 8000b9a:	9903      	ldr	r1, [sp, #12]
 8000b9c:	46b8      	mov	r8, r7
 8000b9e:	4441      	add	r1, r8
 8000ba0:	468b      	mov	fp, r1
 8000ba2:	4583      	cmp	fp, r0
 8000ba4:	4180      	sbcs	r0, r0
 8000ba6:	4241      	negs	r1, r0
 8000ba8:	4688      	mov	r8, r1
 8000baa:	4651      	mov	r1, sl
 8000bac:	0408      	lsls	r0, r1, #16
 8000bae:	042f      	lsls	r7, r5, #16
 8000bb0:	0c00      	lsrs	r0, r0, #16
 8000bb2:	183f      	adds	r7, r7, r0
 8000bb4:	4658      	mov	r0, fp
 8000bb6:	9902      	ldr	r1, [sp, #8]
 8000bb8:	1810      	adds	r0, r2, r0
 8000bba:	4689      	mov	r9, r1
 8000bbc:	4290      	cmp	r0, r2
 8000bbe:	4192      	sbcs	r2, r2
 8000bc0:	444f      	add	r7, r9
 8000bc2:	46ba      	mov	sl, r7
 8000bc4:	4252      	negs	r2, r2
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	4693      	mov	fp, r2
 8000bca:	44c2      	add	sl, r8
 8000bcc:	44d1      	add	r9, sl
 8000bce:	44cb      	add	fp, r9
 8000bd0:	428f      	cmp	r7, r1
 8000bd2:	41bf      	sbcs	r7, r7
 8000bd4:	45c2      	cmp	sl, r8
 8000bd6:	4189      	sbcs	r1, r1
 8000bd8:	4599      	cmp	r9, r3
 8000bda:	419b      	sbcs	r3, r3
 8000bdc:	4593      	cmp	fp, r2
 8000bde:	4192      	sbcs	r2, r2
 8000be0:	427f      	negs	r7, r7
 8000be2:	4249      	negs	r1, r1
 8000be4:	0c2d      	lsrs	r5, r5, #16
 8000be6:	4252      	negs	r2, r2
 8000be8:	430f      	orrs	r7, r1
 8000bea:	425b      	negs	r3, r3
 8000bec:	4313      	orrs	r3, r2
 8000bee:	197f      	adds	r7, r7, r5
 8000bf0:	18ff      	adds	r7, r7, r3
 8000bf2:	465b      	mov	r3, fp
 8000bf4:	193c      	adds	r4, r7, r4
 8000bf6:	0ddb      	lsrs	r3, r3, #23
 8000bf8:	9a05      	ldr	r2, [sp, #20]
 8000bfa:	0264      	lsls	r4, r4, #9
 8000bfc:	431c      	orrs	r4, r3
 8000bfe:	0243      	lsls	r3, r0, #9
 8000c00:	4313      	orrs	r3, r2
 8000c02:	1e5d      	subs	r5, r3, #1
 8000c04:	41ab      	sbcs	r3, r5
 8000c06:	465a      	mov	r2, fp
 8000c08:	0dc0      	lsrs	r0, r0, #23
 8000c0a:	4303      	orrs	r3, r0
 8000c0c:	0252      	lsls	r2, r2, #9
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	01e2      	lsls	r2, r4, #7
 8000c12:	d556      	bpl.n	8000cc2 <__aeabi_dmul+0x426>
 8000c14:	2001      	movs	r0, #1
 8000c16:	085a      	lsrs	r2, r3, #1
 8000c18:	4003      	ands	r3, r0
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	07e2      	lsls	r2, r4, #31
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	0864      	lsrs	r4, r4, #1
 8000c22:	485a      	ldr	r0, [pc, #360]	; (8000d8c <__aeabi_dmul+0x4f0>)
 8000c24:	4460      	add	r0, ip
 8000c26:	2800      	cmp	r0, #0
 8000c28:	dd4d      	ble.n	8000cc6 <__aeabi_dmul+0x42a>
 8000c2a:	075a      	lsls	r2, r3, #29
 8000c2c:	d009      	beq.n	8000c42 <__aeabi_dmul+0x3a6>
 8000c2e:	220f      	movs	r2, #15
 8000c30:	401a      	ands	r2, r3
 8000c32:	2a04      	cmp	r2, #4
 8000c34:	d005      	beq.n	8000c42 <__aeabi_dmul+0x3a6>
 8000c36:	1d1a      	adds	r2, r3, #4
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	419b      	sbcs	r3, r3
 8000c3c:	425b      	negs	r3, r3
 8000c3e:	18e4      	adds	r4, r4, r3
 8000c40:	0013      	movs	r3, r2
 8000c42:	01e2      	lsls	r2, r4, #7
 8000c44:	d504      	bpl.n	8000c50 <__aeabi_dmul+0x3b4>
 8000c46:	2080      	movs	r0, #128	; 0x80
 8000c48:	4a51      	ldr	r2, [pc, #324]	; (8000d90 <__aeabi_dmul+0x4f4>)
 8000c4a:	00c0      	lsls	r0, r0, #3
 8000c4c:	4014      	ands	r4, r2
 8000c4e:	4460      	add	r0, ip
 8000c50:	4a50      	ldr	r2, [pc, #320]	; (8000d94 <__aeabi_dmul+0x4f8>)
 8000c52:	4290      	cmp	r0, r2
 8000c54:	dd00      	ble.n	8000c58 <__aeabi_dmul+0x3bc>
 8000c56:	e6e3      	b.n	8000a20 <__aeabi_dmul+0x184>
 8000c58:	2501      	movs	r5, #1
 8000c5a:	08db      	lsrs	r3, r3, #3
 8000c5c:	0762      	lsls	r2, r4, #29
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	0264      	lsls	r4, r4, #9
 8000c62:	9b01      	ldr	r3, [sp, #4]
 8000c64:	4691      	mov	r9, r2
 8000c66:	0b22      	lsrs	r2, r4, #12
 8000c68:	0544      	lsls	r4, r0, #21
 8000c6a:	0d64      	lsrs	r4, r4, #21
 8000c6c:	401d      	ands	r5, r3
 8000c6e:	e67c      	b.n	800096a <__aeabi_dmul+0xce>
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	4659      	mov	r1, fp
 8000c74:	0312      	lsls	r2, r2, #12
 8000c76:	4211      	tst	r1, r2
 8000c78:	d008      	beq.n	8000c8c <__aeabi_dmul+0x3f0>
 8000c7a:	4214      	tst	r4, r2
 8000c7c:	d106      	bne.n	8000c8c <__aeabi_dmul+0x3f0>
 8000c7e:	4322      	orrs	r2, r4
 8000c80:	0312      	lsls	r2, r2, #12
 8000c82:	0b12      	lsrs	r2, r2, #12
 8000c84:	4645      	mov	r5, r8
 8000c86:	4699      	mov	r9, r3
 8000c88:	4c43      	ldr	r4, [pc, #268]	; (8000d98 <__aeabi_dmul+0x4fc>)
 8000c8a:	e66e      	b.n	800096a <__aeabi_dmul+0xce>
 8000c8c:	465b      	mov	r3, fp
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	0312      	lsls	r2, r2, #12
 8000c92:	0b12      	lsrs	r2, r2, #12
 8000c94:	4c40      	ldr	r4, [pc, #256]	; (8000d98 <__aeabi_dmul+0x4fc>)
 8000c96:	e668      	b.n	800096a <__aeabi_dmul+0xce>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	4654      	mov	r4, sl
 8000c9c:	3b28      	subs	r3, #40	; 0x28
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	e6b9      	b.n	8000a18 <__aeabi_dmul+0x17c>
 8000ca4:	f000 f98e 	bl	8000fc4 <__clzsi2>
 8000ca8:	3020      	adds	r0, #32
 8000caa:	e6a6      	b.n	80009fa <__aeabi_dmul+0x15e>
 8000cac:	0003      	movs	r3, r0
 8000cae:	3b28      	subs	r3, #40	; 0x28
 8000cb0:	409f      	lsls	r7, r3
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	46bb      	mov	fp, r7
 8000cb6:	4699      	mov	r9, r3
 8000cb8:	e68a      	b.n	80009d0 <__aeabi_dmul+0x134>
 8000cba:	f000 f983 	bl	8000fc4 <__clzsi2>
 8000cbe:	3020      	adds	r0, #32
 8000cc0:	e674      	b.n	80009ac <__aeabi_dmul+0x110>
 8000cc2:	46b4      	mov	ip, r6
 8000cc4:	e7ad      	b.n	8000c22 <__aeabi_dmul+0x386>
 8000cc6:	2501      	movs	r5, #1
 8000cc8:	1a2a      	subs	r2, r5, r0
 8000cca:	2a38      	cmp	r2, #56	; 0x38
 8000ccc:	dd06      	ble.n	8000cdc <__aeabi_dmul+0x440>
 8000cce:	9b01      	ldr	r3, [sp, #4]
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	401d      	ands	r5, r3
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	4699      	mov	r9, r3
 8000cda:	e646      	b.n	800096a <__aeabi_dmul+0xce>
 8000cdc:	2a1f      	cmp	r2, #31
 8000cde:	dc21      	bgt.n	8000d24 <__aeabi_dmul+0x488>
 8000ce0:	2520      	movs	r5, #32
 8000ce2:	0020      	movs	r0, r4
 8000ce4:	1aad      	subs	r5, r5, r2
 8000ce6:	001e      	movs	r6, r3
 8000ce8:	40ab      	lsls	r3, r5
 8000cea:	40a8      	lsls	r0, r5
 8000cec:	40d6      	lsrs	r6, r2
 8000cee:	1e5d      	subs	r5, r3, #1
 8000cf0:	41ab      	sbcs	r3, r5
 8000cf2:	4330      	orrs	r0, r6
 8000cf4:	4318      	orrs	r0, r3
 8000cf6:	40d4      	lsrs	r4, r2
 8000cf8:	0743      	lsls	r3, r0, #29
 8000cfa:	d009      	beq.n	8000d10 <__aeabi_dmul+0x474>
 8000cfc:	230f      	movs	r3, #15
 8000cfe:	4003      	ands	r3, r0
 8000d00:	2b04      	cmp	r3, #4
 8000d02:	d005      	beq.n	8000d10 <__aeabi_dmul+0x474>
 8000d04:	0003      	movs	r3, r0
 8000d06:	1d18      	adds	r0, r3, #4
 8000d08:	4298      	cmp	r0, r3
 8000d0a:	419b      	sbcs	r3, r3
 8000d0c:	425b      	negs	r3, r3
 8000d0e:	18e4      	adds	r4, r4, r3
 8000d10:	0223      	lsls	r3, r4, #8
 8000d12:	d521      	bpl.n	8000d58 <__aeabi_dmul+0x4bc>
 8000d14:	2501      	movs	r5, #1
 8000d16:	9b01      	ldr	r3, [sp, #4]
 8000d18:	2401      	movs	r4, #1
 8000d1a:	401d      	ands	r5, r3
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	2200      	movs	r2, #0
 8000d20:	4699      	mov	r9, r3
 8000d22:	e622      	b.n	800096a <__aeabi_dmul+0xce>
 8000d24:	251f      	movs	r5, #31
 8000d26:	0021      	movs	r1, r4
 8000d28:	426d      	negs	r5, r5
 8000d2a:	1a28      	subs	r0, r5, r0
 8000d2c:	40c1      	lsrs	r1, r0
 8000d2e:	0008      	movs	r0, r1
 8000d30:	2a20      	cmp	r2, #32
 8000d32:	d01d      	beq.n	8000d70 <__aeabi_dmul+0x4d4>
 8000d34:	355f      	adds	r5, #95	; 0x5f
 8000d36:	1aaa      	subs	r2, r5, r2
 8000d38:	4094      	lsls	r4, r2
 8000d3a:	4323      	orrs	r3, r4
 8000d3c:	1e5c      	subs	r4, r3, #1
 8000d3e:	41a3      	sbcs	r3, r4
 8000d40:	2507      	movs	r5, #7
 8000d42:	4303      	orrs	r3, r0
 8000d44:	401d      	ands	r5, r3
 8000d46:	2200      	movs	r2, #0
 8000d48:	2d00      	cmp	r5, #0
 8000d4a:	d009      	beq.n	8000d60 <__aeabi_dmul+0x4c4>
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	2400      	movs	r4, #0
 8000d50:	401a      	ands	r2, r3
 8000d52:	0018      	movs	r0, r3
 8000d54:	2a04      	cmp	r2, #4
 8000d56:	d1d6      	bne.n	8000d06 <__aeabi_dmul+0x46a>
 8000d58:	0003      	movs	r3, r0
 8000d5a:	0765      	lsls	r5, r4, #29
 8000d5c:	0264      	lsls	r4, r4, #9
 8000d5e:	0b22      	lsrs	r2, r4, #12
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	432b      	orrs	r3, r5
 8000d64:	2501      	movs	r5, #1
 8000d66:	4699      	mov	r9, r3
 8000d68:	9b01      	ldr	r3, [sp, #4]
 8000d6a:	2400      	movs	r4, #0
 8000d6c:	401d      	ands	r5, r3
 8000d6e:	e5fc      	b.n	800096a <__aeabi_dmul+0xce>
 8000d70:	2400      	movs	r4, #0
 8000d72:	e7e2      	b.n	8000d3a <__aeabi_dmul+0x49e>
 8000d74:	2280      	movs	r2, #128	; 0x80
 8000d76:	2501      	movs	r5, #1
 8000d78:	0312      	lsls	r2, r2, #12
 8000d7a:	4322      	orrs	r2, r4
 8000d7c:	9901      	ldr	r1, [sp, #4]
 8000d7e:	0312      	lsls	r2, r2, #12
 8000d80:	0b12      	lsrs	r2, r2, #12
 8000d82:	400d      	ands	r5, r1
 8000d84:	4699      	mov	r9, r3
 8000d86:	4c04      	ldr	r4, [pc, #16]	; (8000d98 <__aeabi_dmul+0x4fc>)
 8000d88:	e5ef      	b.n	800096a <__aeabi_dmul+0xce>
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	000003ff 	.word	0x000003ff
 8000d90:	feffffff 	.word	0xfeffffff
 8000d94:	000007fe 	.word	0x000007fe
 8000d98:	000007ff 	.word	0x000007ff

08000d9c <__aeabi_ui2d>:
 8000d9c:	b510      	push	{r4, lr}
 8000d9e:	1e04      	subs	r4, r0, #0
 8000da0:	d028      	beq.n	8000df4 <__aeabi_ui2d+0x58>
 8000da2:	f000 f90f 	bl	8000fc4 <__clzsi2>
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <__aeabi_ui2d+0x60>)
 8000da8:	4a15      	ldr	r2, [pc, #84]	; (8000e00 <__aeabi_ui2d+0x64>)
 8000daa:	1a1b      	subs	r3, r3, r0
 8000dac:	1ad2      	subs	r2, r2, r3
 8000dae:	2a1f      	cmp	r2, #31
 8000db0:	dd15      	ble.n	8000dde <__aeabi_ui2d+0x42>
 8000db2:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <__aeabi_ui2d+0x68>)
 8000db4:	1ad2      	subs	r2, r2, r3
 8000db6:	4094      	lsls	r4, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	0324      	lsls	r4, r4, #12
 8000dbc:	055b      	lsls	r3, r3, #21
 8000dbe:	0b24      	lsrs	r4, r4, #12
 8000dc0:	0d5b      	lsrs	r3, r3, #21
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	0010      	movs	r0, r2
 8000dc6:	0324      	lsls	r4, r4, #12
 8000dc8:	0d0a      	lsrs	r2, r1, #20
 8000dca:	0b24      	lsrs	r4, r4, #12
 8000dcc:	0512      	lsls	r2, r2, #20
 8000dce:	4322      	orrs	r2, r4
 8000dd0:	4c0d      	ldr	r4, [pc, #52]	; (8000e08 <__aeabi_ui2d+0x6c>)
 8000dd2:	051b      	lsls	r3, r3, #20
 8000dd4:	4022      	ands	r2, r4
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	0859      	lsrs	r1, r3, #1
 8000ddc:	bd10      	pop	{r4, pc}
 8000dde:	0021      	movs	r1, r4
 8000de0:	4091      	lsls	r1, r2
 8000de2:	000a      	movs	r2, r1
 8000de4:	210b      	movs	r1, #11
 8000de6:	1a08      	subs	r0, r1, r0
 8000de8:	40c4      	lsrs	r4, r0
 8000dea:	055b      	lsls	r3, r3, #21
 8000dec:	0324      	lsls	r4, r4, #12
 8000dee:	0b24      	lsrs	r4, r4, #12
 8000df0:	0d5b      	lsrs	r3, r3, #21
 8000df2:	e7e6      	b.n	8000dc2 <__aeabi_ui2d+0x26>
 8000df4:	2300      	movs	r3, #0
 8000df6:	2400      	movs	r4, #0
 8000df8:	2200      	movs	r2, #0
 8000dfa:	e7e2      	b.n	8000dc2 <__aeabi_ui2d+0x26>
 8000dfc:	0000041e 	.word	0x0000041e
 8000e00:	00000433 	.word	0x00000433
 8000e04:	00000413 	.word	0x00000413
 8000e08:	800fffff 	.word	0x800fffff

08000e0c <__aeabi_f2d>:
 8000e0c:	0041      	lsls	r1, r0, #1
 8000e0e:	0e09      	lsrs	r1, r1, #24
 8000e10:	1c4b      	adds	r3, r1, #1
 8000e12:	b570      	push	{r4, r5, r6, lr}
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	0246      	lsls	r6, r0, #9
 8000e18:	0a75      	lsrs	r5, r6, #9
 8000e1a:	0fc4      	lsrs	r4, r0, #31
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	dd14      	ble.n	8000e4a <__aeabi_f2d+0x3e>
 8000e20:	23e0      	movs	r3, #224	; 0xe0
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	076d      	lsls	r5, r5, #29
 8000e26:	0b36      	lsrs	r6, r6, #12
 8000e28:	18cb      	adds	r3, r1, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	0d0a      	lsrs	r2, r1, #20
 8000e2e:	0028      	movs	r0, r5
 8000e30:	0512      	lsls	r2, r2, #20
 8000e32:	4d1c      	ldr	r5, [pc, #112]	; (8000ea4 <__aeabi_f2d+0x98>)
 8000e34:	4332      	orrs	r2, r6
 8000e36:	055b      	lsls	r3, r3, #21
 8000e38:	402a      	ands	r2, r5
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	07e4      	lsls	r4, r4, #31
 8000e42:	085b      	lsrs	r3, r3, #1
 8000e44:	4323      	orrs	r3, r4
 8000e46:	0019      	movs	r1, r3
 8000e48:	bd70      	pop	{r4, r5, r6, pc}
 8000e4a:	2900      	cmp	r1, #0
 8000e4c:	d114      	bne.n	8000e78 <__aeabi_f2d+0x6c>
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d01e      	beq.n	8000e90 <__aeabi_f2d+0x84>
 8000e52:	0028      	movs	r0, r5
 8000e54:	f000 f8b6 	bl	8000fc4 <__clzsi2>
 8000e58:	280a      	cmp	r0, #10
 8000e5a:	dc1c      	bgt.n	8000e96 <__aeabi_f2d+0x8a>
 8000e5c:	230b      	movs	r3, #11
 8000e5e:	002a      	movs	r2, r5
 8000e60:	1a1b      	subs	r3, r3, r0
 8000e62:	40da      	lsrs	r2, r3
 8000e64:	0003      	movs	r3, r0
 8000e66:	3315      	adds	r3, #21
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <__aeabi_f2d+0x9c>)
 8000e6c:	0312      	lsls	r2, r2, #12
 8000e6e:	1a1b      	subs	r3, r3, r0
 8000e70:	055b      	lsls	r3, r3, #21
 8000e72:	0b16      	lsrs	r6, r2, #12
 8000e74:	0d5b      	lsrs	r3, r3, #21
 8000e76:	e7d8      	b.n	8000e2a <__aeabi_f2d+0x1e>
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d006      	beq.n	8000e8a <__aeabi_f2d+0x7e>
 8000e7c:	0b32      	lsrs	r2, r6, #12
 8000e7e:	2680      	movs	r6, #128	; 0x80
 8000e80:	0336      	lsls	r6, r6, #12
 8000e82:	076d      	lsls	r5, r5, #29
 8000e84:	4316      	orrs	r6, r2
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <__aeabi_f2d+0xa0>)
 8000e88:	e7cf      	b.n	8000e2a <__aeabi_f2d+0x1e>
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <__aeabi_f2d+0xa0>)
 8000e8c:	2600      	movs	r6, #0
 8000e8e:	e7cc      	b.n	8000e2a <__aeabi_f2d+0x1e>
 8000e90:	2300      	movs	r3, #0
 8000e92:	2600      	movs	r6, #0
 8000e94:	e7c9      	b.n	8000e2a <__aeabi_f2d+0x1e>
 8000e96:	0003      	movs	r3, r0
 8000e98:	002a      	movs	r2, r5
 8000e9a:	3b0b      	subs	r3, #11
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	e7e3      	b.n	8000e6a <__aeabi_f2d+0x5e>
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	800fffff 	.word	0x800fffff
 8000ea8:	00000389 	.word	0x00000389
 8000eac:	000007ff 	.word	0x000007ff

08000eb0 <__aeabi_d2f>:
 8000eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eb2:	004c      	lsls	r4, r1, #1
 8000eb4:	0d64      	lsrs	r4, r4, #21
 8000eb6:	030b      	lsls	r3, r1, #12
 8000eb8:	1c62      	adds	r2, r4, #1
 8000eba:	0f45      	lsrs	r5, r0, #29
 8000ebc:	0a5b      	lsrs	r3, r3, #9
 8000ebe:	0552      	lsls	r2, r2, #21
 8000ec0:	432b      	orrs	r3, r5
 8000ec2:	0fc9      	lsrs	r1, r1, #31
 8000ec4:	00c5      	lsls	r5, r0, #3
 8000ec6:	0d52      	lsrs	r2, r2, #21
 8000ec8:	2a01      	cmp	r2, #1
 8000eca:	dd28      	ble.n	8000f1e <__aeabi_d2f+0x6e>
 8000ecc:	4a3a      	ldr	r2, [pc, #232]	; (8000fb8 <__aeabi_d2f+0x108>)
 8000ece:	18a6      	adds	r6, r4, r2
 8000ed0:	2efe      	cmp	r6, #254	; 0xfe
 8000ed2:	dc1b      	bgt.n	8000f0c <__aeabi_d2f+0x5c>
 8000ed4:	2e00      	cmp	r6, #0
 8000ed6:	dd3e      	ble.n	8000f56 <__aeabi_d2f+0xa6>
 8000ed8:	0180      	lsls	r0, r0, #6
 8000eda:	0002      	movs	r2, r0
 8000edc:	1e50      	subs	r0, r2, #1
 8000ede:	4182      	sbcs	r2, r0
 8000ee0:	0f6d      	lsrs	r5, r5, #29
 8000ee2:	432a      	orrs	r2, r5
 8000ee4:	00db      	lsls	r3, r3, #3
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	075a      	lsls	r2, r3, #29
 8000eea:	d004      	beq.n	8000ef6 <__aeabi_d2f+0x46>
 8000eec:	220f      	movs	r2, #15
 8000eee:	401a      	ands	r2, r3
 8000ef0:	2a04      	cmp	r2, #4
 8000ef2:	d000      	beq.n	8000ef6 <__aeabi_d2f+0x46>
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	04d2      	lsls	r2, r2, #19
 8000efa:	401a      	ands	r2, r3
 8000efc:	d05a      	beq.n	8000fb4 <__aeabi_d2f+0x104>
 8000efe:	3601      	adds	r6, #1
 8000f00:	2eff      	cmp	r6, #255	; 0xff
 8000f02:	d003      	beq.n	8000f0c <__aeabi_d2f+0x5c>
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	0a5b      	lsrs	r3, r3, #9
 8000f08:	b2f4      	uxtb	r4, r6
 8000f0a:	e001      	b.n	8000f10 <__aeabi_d2f+0x60>
 8000f0c:	24ff      	movs	r4, #255	; 0xff
 8000f0e:	2300      	movs	r3, #0
 8000f10:	0258      	lsls	r0, r3, #9
 8000f12:	05e4      	lsls	r4, r4, #23
 8000f14:	0a40      	lsrs	r0, r0, #9
 8000f16:	07c9      	lsls	r1, r1, #31
 8000f18:	4320      	orrs	r0, r4
 8000f1a:	4308      	orrs	r0, r1
 8000f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f1e:	2c00      	cmp	r4, #0
 8000f20:	d007      	beq.n	8000f32 <__aeabi_d2f+0x82>
 8000f22:	431d      	orrs	r5, r3
 8000f24:	d0f2      	beq.n	8000f0c <__aeabi_d2f+0x5c>
 8000f26:	2080      	movs	r0, #128	; 0x80
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	0480      	lsls	r0, r0, #18
 8000f2c:	4303      	orrs	r3, r0
 8000f2e:	26ff      	movs	r6, #255	; 0xff
 8000f30:	e7da      	b.n	8000ee8 <__aeabi_d2f+0x38>
 8000f32:	432b      	orrs	r3, r5
 8000f34:	d003      	beq.n	8000f3e <__aeabi_d2f+0x8e>
 8000f36:	2305      	movs	r3, #5
 8000f38:	08db      	lsrs	r3, r3, #3
 8000f3a:	2cff      	cmp	r4, #255	; 0xff
 8000f3c:	d003      	beq.n	8000f46 <__aeabi_d2f+0x96>
 8000f3e:	025b      	lsls	r3, r3, #9
 8000f40:	0a5b      	lsrs	r3, r3, #9
 8000f42:	b2e4      	uxtb	r4, r4
 8000f44:	e7e4      	b.n	8000f10 <__aeabi_d2f+0x60>
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d032      	beq.n	8000fb0 <__aeabi_d2f+0x100>
 8000f4a:	2080      	movs	r0, #128	; 0x80
 8000f4c:	03c0      	lsls	r0, r0, #15
 8000f4e:	4303      	orrs	r3, r0
 8000f50:	025b      	lsls	r3, r3, #9
 8000f52:	0a5b      	lsrs	r3, r3, #9
 8000f54:	e7dc      	b.n	8000f10 <__aeabi_d2f+0x60>
 8000f56:	0032      	movs	r2, r6
 8000f58:	3217      	adds	r2, #23
 8000f5a:	db14      	blt.n	8000f86 <__aeabi_d2f+0xd6>
 8000f5c:	2280      	movs	r2, #128	; 0x80
 8000f5e:	271e      	movs	r7, #30
 8000f60:	0412      	lsls	r2, r2, #16
 8000f62:	4313      	orrs	r3, r2
 8000f64:	1bbf      	subs	r7, r7, r6
 8000f66:	2f1f      	cmp	r7, #31
 8000f68:	dc0f      	bgt.n	8000f8a <__aeabi_d2f+0xda>
 8000f6a:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <__aeabi_d2f+0x10c>)
 8000f6c:	4694      	mov	ip, r2
 8000f6e:	4464      	add	r4, ip
 8000f70:	002a      	movs	r2, r5
 8000f72:	40a5      	lsls	r5, r4
 8000f74:	002e      	movs	r6, r5
 8000f76:	40a3      	lsls	r3, r4
 8000f78:	1e75      	subs	r5, r6, #1
 8000f7a:	41ae      	sbcs	r6, r5
 8000f7c:	40fa      	lsrs	r2, r7
 8000f7e:	4333      	orrs	r3, r6
 8000f80:	4313      	orrs	r3, r2
 8000f82:	2600      	movs	r6, #0
 8000f84:	e7b0      	b.n	8000ee8 <__aeabi_d2f+0x38>
 8000f86:	2400      	movs	r4, #0
 8000f88:	e7d5      	b.n	8000f36 <__aeabi_d2f+0x86>
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4252      	negs	r2, r2
 8000f8e:	1b96      	subs	r6, r2, r6
 8000f90:	001a      	movs	r2, r3
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	2f20      	cmp	r7, #32
 8000f96:	d009      	beq.n	8000fac <__aeabi_d2f+0xfc>
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <__aeabi_d2f+0x110>)
 8000f9a:	4684      	mov	ip, r0
 8000f9c:	4464      	add	r4, ip
 8000f9e:	40a3      	lsls	r3, r4
 8000fa0:	432b      	orrs	r3, r5
 8000fa2:	1e5d      	subs	r5, r3, #1
 8000fa4:	41ab      	sbcs	r3, r5
 8000fa6:	2600      	movs	r6, #0
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	e79d      	b.n	8000ee8 <__aeabi_d2f+0x38>
 8000fac:	2300      	movs	r3, #0
 8000fae:	e7f7      	b.n	8000fa0 <__aeabi_d2f+0xf0>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	e7ad      	b.n	8000f10 <__aeabi_d2f+0x60>
 8000fb4:	0034      	movs	r4, r6
 8000fb6:	e7bf      	b.n	8000f38 <__aeabi_d2f+0x88>
 8000fb8:	fffffc80 	.word	0xfffffc80
 8000fbc:	fffffc82 	.word	0xfffffc82
 8000fc0:	fffffca2 	.word	0xfffffca2

08000fc4 <__clzsi2>:
 8000fc4:	211c      	movs	r1, #28
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	041b      	lsls	r3, r3, #16
 8000fca:	4298      	cmp	r0, r3
 8000fcc:	d301      	bcc.n	8000fd2 <__clzsi2+0xe>
 8000fce:	0c00      	lsrs	r0, r0, #16
 8000fd0:	3910      	subs	r1, #16
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	4298      	cmp	r0, r3
 8000fd6:	d301      	bcc.n	8000fdc <__clzsi2+0x18>
 8000fd8:	0a00      	lsrs	r0, r0, #8
 8000fda:	3908      	subs	r1, #8
 8000fdc:	091b      	lsrs	r3, r3, #4
 8000fde:	4298      	cmp	r0, r3
 8000fe0:	d301      	bcc.n	8000fe6 <__clzsi2+0x22>
 8000fe2:	0900      	lsrs	r0, r0, #4
 8000fe4:	3904      	subs	r1, #4
 8000fe6:	a202      	add	r2, pc, #8	; (adr r2, 8000ff0 <__clzsi2+0x2c>)
 8000fe8:	5c10      	ldrb	r0, [r2, r0]
 8000fea:	1840      	adds	r0, r0, r1
 8000fec:	4770      	bx	lr
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	02020304 	.word	0x02020304
 8000ff4:	01010101 	.word	0x01010101
	...

08001000 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001002:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480d      	ldr	r0, [pc, #52]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490e      	ldr	r1, [pc, #56]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0b      	ldr	r2, [pc, #44]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0b      	ldr	r4, [pc, #44]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800102a:	f000 f981 	bl	8001330 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800102e:	f001 fabd 	bl	80025ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001032:	f000 f93f 	bl	80012b4 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   r0, =_estack
 8001038:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001044:	08003628 	.word	0x08003628
  ldr r2, =_sbss
 8001048:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800104c:	20000974 	.word	0x20000974

08001050 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_IRQHandler>

08001052 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8001052:	b570      	push	{r4, r5, r6, lr}
 8001054:	000e      	movs	r6, r1
 8001056:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	000c      	movs	r4, r1
 800105a:	1ba3      	subs	r3, r4, r6
 800105c:	429d      	cmp	r5, r3
 800105e:	dc01      	bgt.n	8001064 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001060:	0028      	movs	r0, r5
 8001062:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001064:	e000      	b.n	8001068 <_read+0x16>
 8001066:	bf00      	nop
 8001068:	7020      	strb	r0, [r4, #0]
 800106a:	3401      	adds	r4, #1
 800106c:	e7f5      	b.n	800105a <_read+0x8>

0800106e <_write>:

int _write(int file, char *ptr, int len)
{
 800106e:	b570      	push	{r4, r5, r6, lr}
 8001070:	000e      	movs	r6, r1
 8001072:	0015      	movs	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	000c      	movs	r4, r1
 8001076:	1ba3      	subs	r3, r4, r6
 8001078:	429d      	cmp	r5, r3
 800107a:	dc01      	bgt.n	8001080 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800107c:	0028      	movs	r0, r5
 800107e:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001080:	7820      	ldrb	r0, [r4, #0]
 8001082:	e000      	b.n	8001086 <_write+0x18>
 8001084:	bf00      	nop
 8001086:	3401      	adds	r4, #1
 8001088:	e7f5      	b.n	8001076 <_write+0x8>
	...

0800108c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800108c:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <_sbrk+0x2c>)
{
 800108e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8001090:	6819      	ldr	r1, [r3, #0]
{
 8001092:	0002      	movs	r2, r0
	if (heap_end == 0)
 8001094:	2900      	cmp	r1, #0
 8001096:	d101      	bne.n	800109c <_sbrk+0x10>
		heap_end = &end;
 8001098:	4908      	ldr	r1, [pc, #32]	; (80010bc <_sbrk+0x30>)
 800109a:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800109c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800109e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80010a0:	1882      	adds	r2, r0, r2
 80010a2:	428a      	cmp	r2, r1
 80010a4:	d906      	bls.n	80010b4 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80010a6:	f001 fa7b 	bl	80025a0 <__errno>
 80010aa:	230c      	movs	r3, #12
 80010ac:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80010ae:	2001      	movs	r0, #1
 80010b0:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80010b2:	bd10      	pop	{r4, pc}
	heap_end += incr;
 80010b4:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80010b6:	e7fc      	b.n	80010b2 <_sbrk+0x26>
 80010b8:	20000084 	.word	0x20000084
 80010bc:	20000974 	.word	0x20000974

080010c0 <_close>:

int _close(int file)
{
	return -1;
}
 80010c0:	2001      	movs	r0, #1
 80010c2:	4240      	negs	r0, r0
 80010c4:	4770      	bx	lr

080010c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	019b      	lsls	r3, r3, #6
	return 0;
}
 80010ca:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80010cc:	604b      	str	r3, [r1, #4]
}
 80010ce:	4770      	bx	lr

080010d0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80010d0:	2001      	movs	r0, #1
 80010d2:	4770      	bx	lr

080010d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80010d4:	2000      	movs	r0, #0
 80010d6:	4770      	bx	lr

080010d8 <adc_driver_init>:
	
	//ADC INPUT PIN A0 ==>  GPIOA - 0. pin
	
	// Enable GPIOA Clock

	__HAL_RCC_GPIOA_CLK_ENABLE();	
 80010d8:	2080      	movs	r0, #128	; 0x80
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <adc_driver_init+0x98>)
 80010dc:	0280      	lsls	r0, r0, #10
 80010de:	6959      	ldr	r1, [r3, #20]
{
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 80010e2:	4301      	orrs	r1, r0
 80010e4:	6159      	str	r1, [r3, #20]
 80010e6:	695a      	ldr	r2, [r3, #20]

	__HAL_RCC_ADC1_CLK_ENABLE();
	
	// Enable HSI14 Mhz ADC Clock
	
 __HAL_RCC_HSI14ADC_ENABLE();
 80010e8:	2604      	movs	r6, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 80010ea:	4002      	ands	r2, r0
	__HAL_RCC_ADC1_CLK_ENABLE();
 80010ec:	2080      	movs	r0, #128	; 0x80
{
 80010ee:	b089      	sub	sp, #36	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_ADC1_CLK_ENABLE();
 80010f4:	6999      	ldr	r1, [r3, #24]
 80010f6:	0080      	lsls	r0, r0, #2
 80010f8:	4301      	orrs	r1, r0
 80010fa:	6199      	str	r1, [r3, #24]
 80010fc:	699a      	ldr	r2, [r3, #24]

	// GPIOA - PA0: Select Mode: Analog mode 
	gpio_init.Pin = GPIO_PIN_0;
 80010fe:	2701      	movs	r7, #1
	__HAL_RCC_ADC1_CLK_ENABLE();
 8001100:	4002      	ands	r2, r0
 8001102:	9202      	str	r2, [sp, #8]
 8001104:	9a02      	ldr	r2, [sp, #8]
 __HAL_RCC_HSI14ADC_ENABLE();
 8001106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	gpio_init.Mode = GPIO_MODE_ANALOG;
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8001108:	2090      	movs	r0, #144	; 0x90
 __HAL_RCC_HSI14ADC_ENABLE();
 800110a:	43b2      	bics	r2, r6
 800110c:	635a      	str	r2, [r3, #52]	; 0x34
	gpio_init.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8001110:	a903      	add	r1, sp, #12
 8001112:	05c0      	lsls	r0, r0, #23
	gpio_init.Mode = GPIO_MODE_ANALOG;
 8001114:	9304      	str	r3, [sp, #16]
	gpio_init.Pin = GPIO_PIN_0;
 8001116:	9703      	str	r7, [sp, #12]
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8001118:	f000 fd5c 	bl	8001bd4 <HAL_GPIO_Init>
	
	
	AdcHandle.Instance          = ADC1;
 800111c:	4c15      	ldr	r4, [pc, #84]	; (8001174 <adc_driver_init+0x9c>)
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <adc_driver_init+0xa0>)
  
	if (HAL_ADC_DeInit(&AdcHandle) != HAL_OK)
 8001120:	0020      	movs	r0, r4
	AdcHandle.Instance          = ADC1;
 8001122:	6023      	str	r3, [r4, #0]
	if (HAL_ADC_DeInit(&AdcHandle) != HAL_OK)
 8001124:	f000 fb66 	bl	80017f4 <HAL_ADC_DeInit>
  AdcHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;           /* EOC flag picked-up to indicate conversion end */
  AdcHandle.Init.LowPowerAutoPowerOff  = DISABLE;
  AdcHandle.Init.LowPowerAutoWait      = DISABLE;                       /* Auto-delayed conversion feature disabled */
  AdcHandle.Init.ContinuousConvMode    = ENABLE;                        /* Continuous mode enabled (automatic conversion restart after each conversion) */
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
  AdcHandle.Init.ExternalTrigConv      = ADC_SOFTWARE_START;            /* Software start to trig the 1st conversion manually, without external event */
 8001128:	23c2      	movs	r3, #194	; 0xc2
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV1;      		/* Synchronous clock mode, input ADC clock with prscaler 2 */
 800112a:	2500      	movs	r5, #0
  AdcHandle.Init.ExternalTrigConv      = ADC_SOFTWARE_START;            /* Software start to trig the 1st conversion manually, without external event */
 800112c:	33ff      	adds	r3, #255	; 0xff
 800112e:	62a3      	str	r3, [r4, #40]	; 0x28
  AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE; /* Parameter discarded because software trigger chosen */
  AdcHandle.Init.DMAContinuousRequests = DISABLE;                       /* ADC DMA continuous request to match with DMA circular mode */
  AdcHandle.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;      /* DR register is overwritten with the last conversion result in case of overrun */
  AdcHandle.Init.SamplingTimeCommon    = ADC_SAMPLETIME_71CYCLES_5;
 8001130:	3bbc      	subs	r3, #188	; 0xbc
 8001132:	3bff      	subs	r3, #255	; 0xff

  /* 1-  Init ADC */
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8001134:	0020      	movs	r0, r4
  AdcHandle.Init.SamplingTimeCommon    = ADC_SAMPLETIME_71CYCLES_5;
 8001136:	63a3      	str	r3, [r4, #56]	; 0x38
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV1;      		/* Synchronous clock mode, input ADC clock with prscaler 2 */
 8001138:	6065      	str	r5, [r4, #4]
  AdcHandle.Init.Resolution            = ADC_RESOLUTION_12B;            /* 12-bit resolution for converted data */
 800113a:	60a5      	str	r5, [r4, #8]
  AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;           /* Right-alignment for converted data */
 800113c:	60e5      	str	r5, [r4, #12]
  AdcHandle.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;    /* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 800113e:	6127      	str	r7, [r4, #16]
  AdcHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;           /* EOC flag picked-up to indicate conversion end */
 8001140:	6166      	str	r6, [r4, #20]
  AdcHandle.Init.LowPowerAutoPowerOff  = DISABLE;
 8001142:	61e5      	str	r5, [r4, #28]
  AdcHandle.Init.LowPowerAutoWait      = DISABLE;                       /* Auto-delayed conversion feature disabled */
 8001144:	61a5      	str	r5, [r4, #24]
  AdcHandle.Init.ContinuousConvMode    = ENABLE;                        /* Continuous mode enabled (automatic conversion restart after each conversion) */
 8001146:	6227      	str	r7, [r4, #32]
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
 8001148:	6265      	str	r5, [r4, #36]	; 0x24
  AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE; /* Parameter discarded because software trigger chosen */
 800114a:	62e5      	str	r5, [r4, #44]	; 0x2c
  AdcHandle.Init.DMAContinuousRequests = DISABLE;                       /* ADC DMA continuous request to match with DMA circular mode */
 800114c:	6325      	str	r5, [r4, #48]	; 0x30
  AdcHandle.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;      /* DR register is overwritten with the last conversion result in case of overrun */
 800114e:	6365      	str	r5, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8001150:	f000 faa8 	bl	80016a4 <HAL_ADC_Init>
    //Error_Handler();
  }
  
  
  /* ### - 2 - Start calibration ############################################ */
  if (HAL_ADCEx_Calibration_Start(&AdcHandle) != HAL_OK)
 8001154:	0020      	movs	r0, r4
 8001156:	f000 fc9d 	bl	8001a94 <HAL_ADCEx_Calibration_Start>
    //Error_Handler();
  }
  
  /* ### - 3 - Channel configuration ######################################## */
  sConfig.Channel      = ADC_CHANNEL_0;               /* Channel to be converted */
  sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 800115a:	2380      	movs	r3, #128	; 0x80
  sConfig.Channel      = ADC_CHANNEL_0;               /* Channel to be converted */
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <adc_driver_init+0xa4>)
  sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 800115e:	015b      	lsls	r3, r3, #5
	
  if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8001160:	0020      	movs	r0, r4
  sConfig.Channel      = ADC_CHANNEL_0;               /* Channel to be converted */
 8001162:	600d      	str	r5, [r1, #0]
  sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 8001164:	604b      	str	r3, [r1, #4]
  if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8001166:	f000 fc1f 	bl	80019a8 <HAL_ADC_ConfigChannel>
  {
    //Error_Handler();
  }
	
	
 }
 800116a:	b009      	add	sp, #36	; 0x24
 800116c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	40021000 	.word	0x40021000
 8001174:	20000094 	.word	0x20000094
 8001178:	40012400 	.word	0x40012400
 800117c:	200000e0 	.word	0x200000e0

08001180 <adc_get_result>:

int32_t adc_get_result(void)
{
 8001180:	b510      	push	{r4, lr}
	int32_t result = 0;
	HAL_StatusTypeDef retVal;
	
	HAL_ADC_Start(&AdcHandle);
 8001182:	4c08      	ldr	r4, [pc, #32]	; (80011a4 <adc_get_result+0x24>)
 8001184:	0020      	movs	r0, r4
 8001186:	f000 fb81 	bl	800188c <HAL_ADC_Start>
	
	retVal  = HAL_ADC_PollForConversion(&AdcHandle,100);
 800118a:	2164      	movs	r1, #100	; 0x64
 800118c:	0020      	movs	r0, r4
 800118e:	f000 fba9 	bl	80018e4 <HAL_ADC_PollForConversion>
 8001192:	0003      	movs	r3, r0
		result = HAL_ADC_GetValue(&AdcHandle);
	
	}
	else
	{
		return HAL_ERROR; // error
 8001194:	2001      	movs	r0, #1
	if(retVal == HAL_OK)
 8001196:	2b00      	cmp	r3, #0
 8001198:	d102      	bne.n	80011a0 <adc_get_result+0x20>
		result = HAL_ADC_GetValue(&AdcHandle);
 800119a:	0020      	movs	r0, r4
 800119c:	f000 fc00 	bl	80019a0 <HAL_ADC_GetValue>
	}
	
	return result;				
}
 80011a0:	bd10      	pop	{r4, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	20000094 	.word	0x20000094

080011a8 <button_init>:
#include "stm32f070xb.h"
#include "stm32f0xx_hal.h"


void button_init()
{
 80011a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//BUTTON ==>  GPIOC - 13. pin
	GPIO_InitTypeDef gpio_init;
	
	// Enable Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();	
 80011aa:	2080      	movs	r0, #128	; 0x80
 80011ac:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <button_init+0x34>)
 80011ae:	0300      	lsls	r0, r0, #12
 80011b0:	6951      	ldr	r1, [r2, #20]
 80011b2:	4301      	orrs	r1, r0
 80011b4:	6151      	str	r1, [r2, #20]
 80011b6:	6953      	ldr	r3, [r2, #20]
	
	gpio_init.Mode = GPIO_MODE_INPUT;
	gpio_init.Pin = GPIO_PIN_13;
 80011b8:	2280      	movs	r2, #128	; 0x80
	__HAL_RCC_GPIOC_CLK_ENABLE();	
 80011ba:	4003      	ands	r3, r0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	9b00      	ldr	r3, [sp, #0]
	gpio_init.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
	gpio_init.Pin = GPIO_PIN_13;
 80011c2:	0192      	lsls	r2, r2, #6
	gpio_init.Mode = GPIO_MODE_INPUT;
 80011c4:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_NOPULL;
 80011c6:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_MEDIUM;

  HAL_GPIO_Init(GPIOC,&gpio_init);	
 80011c8:	a901      	add	r1, sp, #4
	gpio_init.Speed = GPIO_SPEED_MEDIUM;
 80011ca:	3301      	adds	r3, #1
  HAL_GPIO_Init(GPIOC,&gpio_init);	
 80011cc:	4804      	ldr	r0, [pc, #16]	; (80011e0 <button_init+0x38>)
	gpio_init.Pin = GPIO_PIN_13;
 80011ce:	9201      	str	r2, [sp, #4]
	gpio_init.Speed = GPIO_SPEED_MEDIUM;
 80011d0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOC,&gpio_init);	
 80011d2:	f000 fcff 	bl	8001bd4 <HAL_GPIO_Init>
	
}
 80011d6:	b007      	add	sp, #28
 80011d8:	bd00      	pop	{pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	40021000 	.word	0x40021000
 80011e0:	48000800 	.word	0x48000800

080011e4 <button_get_state>:

int32_t button_get_state(void)
{
	//BUTTON ==>  GPIOC - 13. pin
	GPIO_PinState state;
	state = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 80011e4:	2180      	movs	r1, #128	; 0x80
{
 80011e6:	b510      	push	{r4, lr}
	state = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 80011e8:	0189      	lsls	r1, r1, #6
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <button_get_state+0x14>)
 80011ec:	f000 fda2 	bl	8001d34 <HAL_GPIO_ReadPin>
	
	if( state == GPIO_PIN_SET )
 80011f0:	3801      	subs	r0, #1
 80011f2:	4243      	negs	r3, r0
 80011f4:	4158      	adcs	r0, r3
	}
	else
	{
		return BUTTON_ON;
	}	
}
 80011f6:	bd10      	pop	{r4, pc}
 80011f8:	48000800 	.word	0x48000800

080011fc <user_led_init>:
#include "stm32f070xb.h"
#include "stm32f0xx_hal.h"


void user_led_init()
{
 80011fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//LED2 ==>  GPIOA - 5. pin
	GPIO_InitTypeDef gpio_init;
		
	// Enable Clock
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 80011fe:	2080      	movs	r0, #128	; 0x80
 8001200:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <user_led_init+0x34>)
 8001202:	0280      	lsls	r0, r0, #10
 8001204:	6951      	ldr	r1, [r2, #20]
 8001206:	4301      	orrs	r1, r0
 8001208:	6151      	str	r1, [r2, #20]
 800120a:	6953      	ldr	r3, [r2, #20]
	gpio_init.Pin = GPIO_PIN_5;
	gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
	gpio_init.Pull = GPIO_NOPULL;
	gpio_init.Speed = GPIO_SPEED_LOW;
	
	HAL_GPIO_Init(GPIOA,&gpio_init);
 800120c:	a901      	add	r1, sp, #4
	__HAL_RCC_GPIOA_CLK_ENABLE();	
 800120e:	4003      	ands	r3, r0
 8001210:	9300      	str	r3, [sp, #0]
 8001212:	9b00      	ldr	r3, [sp, #0]
	gpio_init.Pin = GPIO_PIN_5;
 8001214:	2320      	movs	r3, #32
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8001216:	2090      	movs	r0, #144	; 0x90
	gpio_init.Pin = GPIO_PIN_5;
 8001218:	9301      	str	r3, [sp, #4]
	gpio_init.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	3b1f      	subs	r3, #31
 800121c:	9302      	str	r3, [sp, #8]
	gpio_init.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8001220:	05c0      	lsls	r0, r0, #23
	gpio_init.Pull = GPIO_NOPULL;
 8001222:	9303      	str	r3, [sp, #12]
	gpio_init.Speed = GPIO_SPEED_LOW;
 8001224:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(GPIOA,&gpio_init);
 8001226:	f000 fcd5 	bl	8001bd4 <HAL_GPIO_Init>
}
 800122a:	b007      	add	sp, #28
 800122c:	bd00      	pop	{pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	40021000 	.word	0x40021000

08001234 <user_led_toggle>:


void user_led_toggle()
{
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);	
 8001234:	2090      	movs	r0, #144	; 0x90
{
 8001236:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);	
 8001238:	2120      	movs	r1, #32
 800123a:	05c0      	lsls	r0, r0, #23
 800123c:	f000 fd80 	bl	8001d40 <HAL_GPIO_TogglePin>
}
 8001240:	bd10      	pop	{r4, pc}
	...

08001244 <send_adc_string>:
			HAL_Delay(100);			
  }
}

void send_adc_string(void)
{
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t adc = 0;
	float voltage = 0.0;
	static uint32_t time;
	time++;
 8001246:	4c14      	ldr	r4, [pc, #80]	; (8001298 <send_adc_string+0x54>)
{
 8001248:	b085      	sub	sp, #20
	time++;
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	6023      	str	r3, [r4, #0]
	adc = adc_get_result();
 8001250:	f7ff ff96 	bl	8001180 <adc_get_result>
 8001254:	0005      	movs	r5, r0
	voltage = (adc / 4095.0) * 3.3;
 8001256:	f7ff fda1 	bl	8000d9c <__aeabi_ui2d>
 800125a:	2200      	movs	r2, #0
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <send_adc_string+0x58>)
 800125e:	f7fe ffe9 	bl	8000234 <__aeabi_ddiv>
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <send_adc_string+0x5c>)
 8001264:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <send_adc_string+0x60>)
 8001266:	f7ff fb19 	bl	800089c <__aeabi_dmul>
 800126a:	f7ff fe21 	bl	8000eb0 <__aeabi_d2f>
	
	printf("zaman:%d ADC Verisi:%d %2.2f V Buton Durum:%s\n\r",time,adc,voltage,button_get_state()?"OFF":"ON");
 800126e:	f7ff fdcd 	bl	8000e0c <__aeabi_f2d>
 8001272:	6824      	ldr	r4, [r4, #0]
 8001274:	0006      	movs	r6, r0
 8001276:	000f      	movs	r7, r1
 8001278:	f7ff ffb4 	bl	80011e4 <button_get_state>
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <send_adc_string+0x64>)
 800127e:	2800      	cmp	r0, #0
 8001280:	d100      	bne.n	8001284 <send_adc_string+0x40>
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <send_adc_string+0x68>)
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	9600      	str	r6, [sp, #0]
 8001288:	9701      	str	r7, [sp, #4]
 800128a:	002a      	movs	r2, r5
 800128c:	0021      	movs	r1, r4
 800128e:	4808      	ldr	r0, [pc, #32]	; (80012b0 <send_adc_string+0x6c>)
 8001290:	f001 f9c2 	bl	8002618 <iprintf>
}
 8001294:	b005      	add	sp, #20
 8001296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001298:	20000088 	.word	0x20000088
 800129c:	40affe00 	.word	0x40affe00
 80012a0:	400a6666 	.word	0x400a6666
 80012a4:	66666666 	.word	0x66666666
 80012a8:	08003534 	.word	0x08003534
 80012ac:	08003538 	.word	0x08003538
 80012b0:	0800353b 	.word	0x0800353b

080012b4 <main>:
{
 80012b4:	b530      	push	{r4, r5, lr}
 80012b6:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80012b8:	f000 f91a 	bl	80014f0 <HAL_Init>
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* No HSE Oscillator on Nucleo, Activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue  = RCC_HSICALIBRATION_DEFAULT;  
 80012bc:	2310      	movs	r3, #16
 80012be:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80012ca:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
 80012ce:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80012d0:	035b      	lsls	r3, r3, #13
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80012d2:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012d4:	9404      	str	r4, [sp, #16]
  RCC_OscInitStruct.HSIState          = RCC_HSI_ON;
 80012d6:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80012da:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80012dc:	f000 fd34 	bl	8001d48 <HAL_RCC_OscConfig>
 80012e0:	2800      	cmp	r0, #0
 80012e2:	d000      	beq.n	80012e6 <main+0x32>
 80012e4:	e7fe      	b.n	80012e4 <main+0x30>
  {
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80012e6:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e8:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ea:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 80012ec:	0029      	movs	r1, r5
 80012ee:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 80012f0:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 80012f4:	f000 ff40 	bl	8002178 <HAL_RCC_ClockConfig>
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d000      	beq.n	80012fe <main+0x4a>
 80012fc:	e7fe      	b.n	80012fc <main+0x48>
	UART_Init();	
 80012fe:	f000 f84b 	bl	8001398 <UART_Init>
	user_led_init();
 8001302:	f7ff ff7b 	bl	80011fc <user_led_init>
  button_init();
 8001306:	f7ff ff4f 	bl	80011a8 <button_init>
	adc_driver_init();
 800130a:	f7ff fee5 	bl	80010d8 <adc_driver_init>
			user_led_toggle();
 800130e:	f7ff ff91 	bl	8001234 <user_led_toggle>
			send_adc_string();
 8001312:	f7ff ff97 	bl	8001244 <send_adc_string>
			HAL_Delay(100);			
 8001316:	2064      	movs	r0, #100	; 0x64
 8001318:	f000 f908 	bl	800152c <HAL_Delay>
 800131c:	e7f7      	b.n	800130e <main+0x5a>

0800131e <NMI_Handler>:
 800131e:	4770      	bx	lr

08001320 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001320:	e7fe      	b.n	8001320 <HardFault_Handler>

08001322 <SVC_Handler>:
 8001322:	4770      	bx	lr

08001324 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8001324:	4770      	bx	lr

08001326 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001326:	b510      	push	{r4, lr}
  HAL_IncTick();
 8001328:	f000 f8f2 	bl	8001510 <HAL_IncTick>
}
 800132c:	bd10      	pop	{r4, pc}
	...

08001330 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001330:	2101      	movs	r1, #1
 8001332:	4b13      	ldr	r3, [pc, #76]	; (8001380 <SystemInit+0x50>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001334:	4813      	ldr	r0, [pc, #76]	; (8001384 <SystemInit+0x54>)
  RCC->CR |= (uint32_t)0x00000001U;
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	4002      	ands	r2, r0
 8001340:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4810      	ldr	r0, [pc, #64]	; (8001388 <SystemInit+0x58>)
 8001346:	4002      	ands	r2, r0
 8001348:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	480f      	ldr	r0, [pc, #60]	; (800138c <SystemInit+0x5c>)
 800134e:	4002      	ands	r2, r0
 8001350:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	480e      	ldr	r0, [pc, #56]	; (8001390 <SystemInit+0x60>)
 8001356:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001358:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800135a:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800135c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800135e:	4382      	bics	r2, r0
 8001360:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
  /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 8001362:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <SystemInit+0x64>)
 8001366:	4002      	ands	r2, r0
 8001368:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set default USB clock to PLLCLK, since there is no HSI48 */
  RCC->CFGR3 |= (uint32_t)0x00000080U;  
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800136e:	4302      	orrs	r2, r0
 8001370:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8001372:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001374:	438a      	bics	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]

}
 800137c:	4770      	bx	lr
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	40021000 	.word	0x40021000
 8001384:	08ffb80c 	.word	0x08ffb80c
 8001388:	fef6ffff 	.word	0xfef6ffff
 800138c:	fffbffff 	.word	0xfffbffff
 8001390:	ffc0ffff 	.word	0xffc0ffff
 8001394:	fffffe6c 	.word	0xfffffe6c

08001398 <UART_Init>:
	
GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */  
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001398:	2280      	movs	r2, #128	; 0x80
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <UART_Init+0xa8>)
{
 800139c:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800139e:	6959      	ldr	r1, [r3, #20]
 80013a0:	0292      	lsls	r2, r2, #10
 80013a2:	4311      	orrs	r1, r2
 80013a4:	6159      	str	r1, [r3, #20]
 80013a6:	6959      	ldr	r1, [r3, #20]
{
 80013a8:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	4011      	ands	r1, r2
 80013ac:	9101      	str	r1, [sp, #4]
 80013ae:	9901      	ldr	r1, [sp, #4]

  /* Enable USARTx clock */
  __HAL_RCC_USART2_CLK_ENABLE(); 
 80013b0:	69d9      	ldr	r1, [r3, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
  
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_USART2_CLK_ENABLE(); 
 80013b4:	4311      	orrs	r1, r2
 80013b6:	61d9      	str	r1, [r3, #28]
 80013b8:	69db      	ldr	r3, [r3, #28]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80013ba:	2501      	movs	r5, #1
  __HAL_RCC_USART2_CLK_ENABLE(); 
 80013bc:	401a      	ands	r2, r3
 80013be:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80013c0:	2602      	movs	r6, #2
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80013c2:	2403      	movs	r4, #3
  __HAL_RCC_USART2_CLK_ENABLE(); 
 80013c4:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin       = GPIO_PIN_2;
 80013c6:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	a903      	add	r1, sp, #12
 80013ca:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin       = GPIO_PIN_2;
 80013cc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80013ce:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80013d0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80013d2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013d4:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f000 fbfd 	bl	8001bd4 <HAL_GPIO_Init>
	
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013da:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013dc:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013de:	05c0      	lsls	r0, r0, #23
 80013e0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e2:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80013e4:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80013e6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80013e8:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80013ea:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f000 fbf2 	bl	8001bd4 <HAL_GPIO_Init>
      - Parity = None
      - BaudRate = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USART2;
	
  UartHandle.Init.BaudRate   = 9600;
 80013f0:	2396      	movs	r3, #150	; 0x96
  UartHandle.Instance        = USART2;
 80013f2:	4c14      	ldr	r4, [pc, #80]	; (8001444 <UART_Init+0xac>)
  UartHandle.Init.BaudRate   = 9600;
 80013f4:	019b      	lsls	r3, r3, #6
 80013f6:	6063      	str	r3, [r4, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
  UartHandle.Init.Parity     = UART_PARITY_NONE;
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80013f8:	220c      	movs	r2, #12
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80013fa:	2300      	movs	r3, #0
  UartHandle.Instance        = USART2;
 80013fc:	4e12      	ldr	r6, [pc, #72]	; (8001448 <UART_Init+0xb0>)
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; 
	
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 80013fe:	0020      	movs	r0, r4
  UartHandle.Instance        = USART2;
 8001400:	6026      	str	r6, [r4, #0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	60a3      	str	r3, [r4, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8001404:	60e3      	str	r3, [r4, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8001406:	6123      	str	r3, [r4, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8001408:	61a3      	str	r3, [r4, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 800140a:	6162      	str	r2, [r4, #20]
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; 
 800140c:	6263      	str	r3, [r4, #36]	; 0x24
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 800140e:	f000 ff61 	bl	80022d4 <HAL_UART_DeInit>
 8001412:	2800      	cmp	r0, #0
 8001414:	d000      	beq.n	8001418 <UART_Init+0x80>
 8001416:	e7fe      	b.n	8001416 <UART_Init+0x7e>
  {
    //ERROR
		UART_Error_Handler();
  }  
	
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8001418:	0020      	movs	r0, r4
 800141a:	f001 f885 	bl	8002528 <HAL_UART_Init>
 800141e:	1e01      	subs	r1, r0, #0
 8001420:	d000      	beq.n	8001424 <UART_Init+0x8c>
 8001422:	e7fe      	b.n	8001422 <UART_Init+0x8a>
		//ERROR
    UART_Error_Handler();
  }
	
/* 4- Enable UART Receive Data Register Not Empty */
   SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8001424:	2320      	movs	r3, #32
 8001426:	6832      	ldr	r2, [r6, #0]

	
	/* 5 - Enable UART Interrupt in NVIC */
	
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8001428:	201c      	movs	r0, #28
   SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 800142a:	4313      	orrs	r3, r2
 800142c:	6033      	str	r3, [r6, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 800142e:	002a      	movs	r2, r5
 8001430:	f000 fb7c 	bl	8001b2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001434:	201c      	movs	r0, #28
 8001436:	f000 fba9 	bl	8001b8c <HAL_NVIC_EnableIRQ>
}
 800143a:	b008      	add	sp, #32
 800143c:	bd70      	pop	{r4, r5, r6, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	40021000 	.word	0x40021000
 8001444:	200000ec 	.word	0x200000ec
 8001448:	40004400 	.word	0x40004400

0800144c <USART2_IRQHandler>:
  uint32_t control_reg1 = USART2->CR1;
  uint32_t rx_data = 0;
	
	
    /* UART in mode Receiver */
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 800144c:	2120      	movs	r1, #32
  uint32_t isrflags = USART2->ISR;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <USART2_IRQHandler+0x6c>)
{  
 8001450:	b530      	push	{r4, r5, lr}
  uint32_t isrflags = USART2->ISR;
 8001452:	69dc      	ldr	r4, [r3, #28]
 8001454:	0018      	movs	r0, r3
  uint32_t control_reg1 = USART2->CR1;
 8001456:	681a      	ldr	r2, [r3, #0]
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 8001458:	420c      	tst	r4, r1
 800145a:	d014      	beq.n	8001486 <USART2_IRQHandler+0x3a>
 800145c:	420a      	tst	r2, r1
 800145e:	d012      	beq.n	8001486 <USART2_IRQHandler+0x3a>
    {
			rx_data = (uint16_t) USART2->RDR;
			
			/* Read one byte from the receive data register */ 
			
			UART_BufferRX.buffer[UART_BufferRX.head_pointer] = rx_data;
 8001460:	2280      	movs	r2, #128	; 0x80
			rx_data = (uint16_t) USART2->RDR;
 8001462:	8c98      	ldrh	r0, [r3, #36]	; 0x24
			UART_BufferRX.buffer[UART_BufferRX.head_pointer] = rx_data;
 8001464:	4b15      	ldr	r3, [pc, #84]	; (80014bc <USART2_IRQHandler+0x70>)
 8001466:	00d2      	lsls	r2, r2, #3
 8001468:	5899      	ldr	r1, [r3, r2]
			rx_data = (uint16_t) USART2->RDR;
 800146a:	b280      	uxth	r0, r0
			UART_BufferRX.buffer[UART_BufferRX.head_pointer] = rx_data;
 800146c:	0089      	lsls	r1, r1, #2
 800146e:	50c8      	str	r0, [r1, r3]
			
			UART_BufferRX.head_pointer = UART_BufferRX.head_pointer + 1;
 8001470:	5899      	ldr	r1, [r3, r2]
 8001472:	3101      	adds	r1, #1
 8001474:	5099      	str	r1, [r3, r2]
		if(UART_BufferTX.head_pointer != UART_BufferTX.tail_pointer)
		{
			// Send one byte from Transmit buffer
			USART2->TDR = UART_BufferTX.buffer[UART_BufferTX.tail_pointer++];
			
			if(UART_BufferTX.tail_pointer == BUFFER_SIZE)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	5898      	ldr	r0, [r3, r2]
 800147a:	0049      	lsls	r1, r1, #1
 800147c:	4288      	cmp	r0, r1
 800147e:	d101      	bne.n	8001484 <USART2_IRQHandler+0x38>
			{
				UART_BufferTX.tail_pointer = 0;
 8001480:	2100      	movs	r1, #0
 8001482:	5099      	str	r1, [r3, r2]
		}			
		
    return;
  }
	
}
 8001484:	bd30      	pop	{r4, r5, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((control_reg1 & USART_CR1_TXEIE) != RESET))
 8001486:	2180      	movs	r1, #128	; 0x80
 8001488:	420c      	tst	r4, r1
 800148a:	d0fb      	beq.n	8001484 <USART2_IRQHandler+0x38>
 800148c:	420a      	tst	r2, r1
 800148e:	d0f9      	beq.n	8001484 <USART2_IRQHandler+0x38>
		if(UART_BufferTX.head_pointer != UART_BufferTX.tail_pointer)
 8001490:	2280      	movs	r2, #128	; 0x80
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <USART2_IRQHandler+0x74>)
 8001494:	00d2      	lsls	r2, r2, #3
 8001496:	589d      	ldr	r5, [r3, r2]
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <USART2_IRQHandler+0x78>)
 800149a:	589c      	ldr	r4, [r3, r2]
 800149c:	42a5      	cmp	r5, r4
 800149e:	d007      	beq.n	80014b0 <USART2_IRQHandler+0x64>
			USART2->TDR = UART_BufferTX.buffer[UART_BufferTX.tail_pointer++];
 80014a0:	5899      	ldr	r1, [r3, r2]
 80014a2:	1c4c      	adds	r4, r1, #1
 80014a4:	509c      	str	r4, [r3, r2]
 80014a6:	0089      	lsls	r1, r1, #2
 80014a8:	58c9      	ldr	r1, [r1, r3]
 80014aa:	b289      	uxth	r1, r1
 80014ac:	8501      	strh	r1, [r0, #40]	; 0x28
 80014ae:	e7e2      	b.n	8001476 <USART2_IRQHandler+0x2a>
      CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
 80014b0:	6803      	ldr	r3, [r0, #0]
 80014b2:	438b      	bics	r3, r1
 80014b4:	6003      	str	r3, [r0, #0]
 80014b6:	e7e5      	b.n	8001484 <USART2_IRQHandler+0x38>
 80014b8:	40004400 	.word	0x40004400
 80014bc:	2000015c 	.word	0x2000015c
 80014c0:	20000564 	.word	0x20000564
 80014c4:	00000404 	.word	0x00000404

080014c8 <HAL_MspInit>:
 80014c8:	4770      	bx	lr

080014ca <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ca:	b510      	push	{r4, lr}
 80014cc:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80014ce:	f000 fee9 	bl	80022a4 <HAL_RCC_GetHCLKFreq>
 80014d2:	21fa      	movs	r1, #250	; 0xfa
 80014d4:	0089      	lsls	r1, r1, #2
 80014d6:	f7fe fe21 	bl	800011c <__udivsi3>
 80014da:	f000 fb61 	bl	8001ba0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80014de:	2001      	movs	r0, #1
 80014e0:	2200      	movs	r2, #0
 80014e2:	0021      	movs	r1, r4
 80014e4:	4240      	negs	r0, r0
 80014e6:	f000 fb21 	bl	8001b2c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80014ea:	2000      	movs	r0, #0
 80014ec:	bd10      	pop	{r4, pc}
	...

080014f0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f0:	2310      	movs	r3, #16
 80014f2:	4a06      	ldr	r2, [pc, #24]	; (800150c <HAL_Init+0x1c>)
{
 80014f4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014fa:	430b      	orrs	r3, r1
 80014fc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fe:	f7ff ffe4 	bl	80014ca <HAL_InitTick>
  HAL_MspInit();
 8001502:	f7ff ffe1 	bl	80014c8 <HAL_MspInit>
}
 8001506:	2000      	movs	r0, #0
 8001508:	bd10      	pop	{r4, pc}
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	40022000 	.word	0x40022000

08001510 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001510:	4a02      	ldr	r2, [pc, #8]	; (800151c <HAL_IncTick+0xc>)
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	4770      	bx	lr
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	2000096c 	.word	0x2000096c

08001520 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001520:	4b01      	ldr	r3, [pc, #4]	; (8001528 <HAL_GetTick+0x8>)
 8001522:	6818      	ldr	r0, [r3, #0]
}
 8001524:	4770      	bx	lr
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	2000096c 	.word	0x2000096c

0800152c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800152c:	b513      	push	{r0, r1, r4, lr}
 800152e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8001530:	f7ff fff6 	bl	8001520 <HAL_GetTick>
 8001534:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001536:	f7ff fff3 	bl	8001520 <HAL_GetTick>
 800153a:	9b01      	ldr	r3, [sp, #4]
 800153c:	1b00      	subs	r0, r0, r4
 800153e:	4298      	cmp	r0, r3
 8001540:	d3f9      	bcc.n	8001536 <HAL_Delay+0xa>
  {
  }
}
 8001542:	bd13      	pop	{r0, r1, r4, pc}

08001544 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001544:	2103      	movs	r1, #3
 8001546:	6803      	ldr	r3, [r0, #0]
{
 8001548:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 800154a:	689a      	ldr	r2, [r3, #8]
{
 800154c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800154e:	400a      	ands	r2, r1
 8001550:	2a01      	cmp	r2, #1
 8001552:	d001      	beq.n	8001558 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001554:	2000      	movs	r0, #0
}
 8001556:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001558:	6819      	ldr	r1, [r3, #0]
 800155a:	4211      	tst	r1, r2
 800155c:	d102      	bne.n	8001564 <ADC_Disable+0x20>
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	0412      	lsls	r2, r2, #16
 8001562:	d5f7      	bpl.n	8001554 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001564:	2205      	movs	r2, #5
 8001566:	689d      	ldr	r5, [r3, #8]
 8001568:	4015      	ands	r5, r2
 800156a:	2d01      	cmp	r5, #1
 800156c:	d11a      	bne.n	80015a4 <ADC_Disable+0x60>
      __HAL_ADC_DISABLE(hadc);
 800156e:	2202      	movs	r2, #2
 8001570:	6899      	ldr	r1, [r3, #8]
 8001572:	430a      	orrs	r2, r1
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	2203      	movs	r2, #3
 8001578:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800157a:	f7ff ffd1 	bl	8001520 <HAL_GetTick>
 800157e:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001580:	6823      	ldr	r3, [r4, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	422b      	tst	r3, r5
 8001586:	d0e5      	beq.n	8001554 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001588:	f7ff ffca 	bl	8001520 <HAL_GetTick>
 800158c:	1b80      	subs	r0, r0, r6
 800158e:	2802      	cmp	r0, #2
 8001590:	d9f6      	bls.n	8001580 <ADC_Disable+0x3c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001592:	2310      	movs	r3, #16
 8001594:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001596:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001598:	4313      	orrs	r3, r2
 800159a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800159c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800159e:	431d      	orrs	r5, r3
 80015a0:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 80015a2:	e7d8      	b.n	8001556 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a4:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015a6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80015aa:	4313      	orrs	r3, r2
 80015ac:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80015b0:	4303      	orrs	r3, r0
 80015b2:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80015b4:	e7cf      	b.n	8001556 <ADC_Disable+0x12>
	...

080015b8 <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 80015b8:	2300      	movs	r3, #0
{
 80015ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015bc:	2103      	movs	r1, #3
  __IO uint32_t wait_loop_index = 0U;
 80015be:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c0:	6803      	ldr	r3, [r0, #0]
{
 80015c2:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	400a      	ands	r2, r1
 80015c8:	2a01      	cmp	r2, #1
 80015ca:	d107      	bne.n	80015dc <ADC_Enable+0x24>
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	4211      	tst	r1, r2
 80015d0:	d001      	beq.n	80015d6 <ADC_Enable+0x1e>
  return HAL_OK;
 80015d2:	2000      	movs	r0, #0
}
 80015d4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	0412      	lsls	r2, r2, #16
 80015da:	d4fa      	bmi.n	80015d2 <ADC_Enable+0x1a>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80015dc:	6899      	ldr	r1, [r3, #8]
 80015de:	4a19      	ldr	r2, [pc, #100]	; (8001644 <ADC_Enable+0x8c>)
 80015e0:	4211      	tst	r1, r2
 80015e2:	d008      	beq.n	80015f6 <ADC_Enable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e4:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015e8:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80015ea:	4313      	orrs	r3, r2
 80015ec:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80015f0:	4303      	orrs	r3, r0
 80015f2:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 80015f4:	e7ee      	b.n	80015d4 <ADC_Enable+0x1c>
    __HAL_ADC_ENABLE(hadc);
 80015f6:	2201      	movs	r2, #1
 80015f8:	6899      	ldr	r1, [r3, #8]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80015fe:	4b12      	ldr	r3, [pc, #72]	; (8001648 <ADC_Enable+0x90>)
 8001600:	4912      	ldr	r1, [pc, #72]	; (800164c <ADC_Enable+0x94>)
 8001602:	6818      	ldr	r0, [r3, #0]
 8001604:	f7fe fd8a 	bl	800011c <__udivsi3>
 8001608:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 800160a:	9b01      	ldr	r3, [sp, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d115      	bne.n	800163c <ADC_Enable+0x84>
    tickstart = HAL_GetTick();
 8001610:	f7ff ff86 	bl	8001520 <HAL_GetTick>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001614:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 8001616:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	422b      	tst	r3, r5
 800161e:	d1d8      	bne.n	80015d2 <ADC_Enable+0x1a>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001620:	f7ff ff7e 	bl	8001520 <HAL_GetTick>
 8001624:	1b80      	subs	r0, r0, r6
 8001626:	2802      	cmp	r0, #2
 8001628:	d9f6      	bls.n	8001618 <ADC_Enable+0x60>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800162a:	2310      	movs	r3, #16
 800162c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        return HAL_ERROR;
 800162e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001630:	4313      	orrs	r3, r2
 8001632:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001634:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001636:	432b      	orrs	r3, r5
 8001638:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 800163a:	e7cb      	b.n	80015d4 <ADC_Enable+0x1c>
      wait_loop_index--;
 800163c:	9b01      	ldr	r3, [sp, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	e7e2      	b.n	800160a <ADC_Enable+0x52>
 8001644:	80000017 	.word	0x80000017
 8001648:	20000000 	.word	0x20000000
 800164c:	000f4240 	.word	0x000f4240

08001650 <ADC_ConversionStop>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001650:	2204      	movs	r2, #4
 8001652:	6803      	ldr	r3, [r0, #0]
{
 8001654:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001656:	6899      	ldr	r1, [r3, #8]
{
 8001658:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800165a:	4211      	tst	r1, r2
 800165c:	d101      	bne.n	8001662 <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800165e:	2000      	movs	r0, #0
}
 8001660:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001662:	6899      	ldr	r1, [r3, #8]
 8001664:	4211      	tst	r1, r2
 8001666:	d006      	beq.n	8001676 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001668:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800166a:	0792      	lsls	r2, r2, #30
 800166c:	d403      	bmi.n	8001676 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800166e:	2210      	movs	r2, #16
 8001670:	6899      	ldr	r1, [r3, #8]
 8001672:	430a      	orrs	r2, r1
 8001674:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001676:	f7ff ff53 	bl	8001520 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800167a:	2504      	movs	r5, #4
    tickstart = HAL_GetTick();
 800167c:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800167e:	6823      	ldr	r3, [r4, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	422b      	tst	r3, r5
 8001684:	d0eb      	beq.n	800165e <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001686:	f7ff ff4b 	bl	8001520 <HAL_GetTick>
 800168a:	1b80      	subs	r0, r0, r6
 800168c:	2802      	cmp	r0, #2
 800168e:	d9f6      	bls.n	800167e <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001690:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001692:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001694:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001696:	4313      	orrs	r3, r2
 8001698:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800169a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800169c:	4303      	orrs	r3, r0
 800169e:	64a3      	str	r3, [r4, #72]	; 0x48
 80016a0:	e7de      	b.n	8001660 <ADC_ConversionStop+0x10>

080016a2 <HAL_ADC_MspInit>:
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_Init>:
{
 80016a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016a6:	0004      	movs	r4, r0
    return HAL_ERROR;
 80016a8:	2001      	movs	r0, #1
  if(hadc == NULL)
 80016aa:	2c00      	cmp	r4, #0
 80016ac:	d072      	beq.n	8001794 <HAL_ADC_Init+0xf0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d106      	bne.n	80016c2 <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80016b4:	0022      	movs	r2, r4
 80016b6:	3240      	adds	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	64a3      	str	r3, [r4, #72]	; 0x48
    HAL_ADC_MspInit(hadc);
 80016ba:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80016bc:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80016be:	f7ff fff0 	bl	80016a2 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016c4:	06db      	lsls	r3, r3, #27
 80016c6:	d500      	bpl.n	80016ca <HAL_ADC_Init+0x26>
 80016c8:	e079      	b.n	80017be <HAL_ADC_Init+0x11a>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80016ca:	2204      	movs	r2, #4
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	6898      	ldr	r0, [r3, #8]
 80016d0:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 80016d2:	d000      	beq.n	80016d6 <HAL_ADC_Init+0x32>
 80016d4:	e073      	b.n	80017be <HAL_ADC_Init+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 80016d6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80016d8:	4942      	ldr	r1, [pc, #264]	; (80017e4 <HAL_ADC_Init+0x140>)
 80016da:	4011      	ands	r1, r2
 80016dc:	2202      	movs	r2, #2
 80016de:	430a      	orrs	r2, r1
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016e0:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 80016e2:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	400a      	ands	r2, r1
 80016e8:	2a01      	cmp	r2, #1
 80016ea:	d000      	beq.n	80016ee <HAL_ADC_Init+0x4a>
 80016ec:	e06d      	b.n	80017ca <HAL_ADC_Init+0x126>
 80016ee:	6819      	ldr	r1, [r3, #0]
 80016f0:	4211      	tst	r1, r2
 80016f2:	d102      	bne.n	80016fa <HAL_ADC_Init+0x56>
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	0412      	lsls	r2, r2, #16
 80016f8:	d567      	bpl.n	80017ca <HAL_ADC_Init+0x126>
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	493a      	ldr	r1, [pc, #232]	; (80017e8 <HAL_ADC_Init+0x144>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80016fe:	6a25      	ldr	r5, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001700:	400a      	ands	r2, r1
 8001702:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001704:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8001706:	036f      	lsls	r7, r5, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8001708:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800170a:	69e2      	ldr	r2, [r4, #28]
 800170c:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800170e:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8001710:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001712:	3a01      	subs	r2, #1
 8001714:	1e56      	subs	r6, r2, #1
 8001716:	41b2      	sbcs	r2, r6
 8001718:	0316      	lsls	r6, r2, #12
 800171a:	68e2      	ldr	r2, [r4, #12]
 800171c:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800171e:	6922      	ldr	r2, [r4, #16]
 8001720:	430f      	orrs	r7, r1
 8001722:	2a02      	cmp	r2, #2
 8001724:	d100      	bne.n	8001728 <HAL_ADC_Init+0x84>
 8001726:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8001728:	6b22      	ldr	r2, [r4, #48]	; 0x30
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800172a:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800172c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800172e:	433a      	orrs	r2, r7
 8001730:	4332      	orrs	r2, r6
 8001732:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001734:	2901      	cmp	r1, #1
 8001736:	d104      	bne.n	8001742 <HAL_ADC_Init+0x9e>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001738:	2d00      	cmp	r5, #0
 800173a:	d12c      	bne.n	8001796 <HAL_ADC_Init+0xf2>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	0249      	lsls	r1, r1, #9
 8001740:	430a      	orrs	r2, r1
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001742:	20c2      	movs	r0, #194	; 0xc2
 8001744:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001746:	30ff      	adds	r0, #255	; 0xff
 8001748:	4281      	cmp	r1, r0
 800174a:	d002      	beq.n	8001752 <HAL_ADC_Init+0xae>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800174c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800174e:	4301      	orrs	r1, r0
 8001750:	430a      	orrs	r2, r1
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001752:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001754:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001756:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001758:	4311      	orrs	r1, r2
 800175a:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800175c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800175e:	4281      	cmp	r1, r0
 8001760:	d002      	beq.n	8001768 <HAL_ADC_Init+0xc4>
 8001762:	1e48      	subs	r0, r1, #1
 8001764:	2806      	cmp	r0, #6
 8001766:	d807      	bhi.n	8001778 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001768:	2507      	movs	r5, #7
 800176a:	6958      	ldr	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800176c:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800176e:	43a8      	bics	r0, r5
 8001770:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001772:	6958      	ldr	r0, [r3, #20]
 8001774:	4301      	orrs	r1, r0
 8001776:	6159      	str	r1, [r3, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	491c      	ldr	r1, [pc, #112]	; (80017ec <HAL_ADC_Init+0x148>)
 800177c:	400b      	ands	r3, r1
 800177e:	429a      	cmp	r2, r3
 8001780:	d111      	bne.n	80017a6 <HAL_ADC_Init+0x102>
      ADC_CLEAR_ERRORCODE(hadc);
 8001782:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8001784:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001786:	64a0      	str	r0, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8001788:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800178a:	4393      	bics	r3, r2
 800178c:	001a      	movs	r2, r3
 800178e:	2301      	movs	r3, #1
 8001790:	4313      	orrs	r3, r2
 8001792:	6463      	str	r3, [r4, #68]	; 0x44
}
 8001794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001796:	2020      	movs	r0, #32
 8001798:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800179a:	4328      	orrs	r0, r5
 800179c:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80017a0:	4301      	orrs	r1, r0
 80017a2:	64a1      	str	r1, [r4, #72]	; 0x48
 80017a4:	e7cd      	b.n	8001742 <HAL_ADC_Init+0x9e>
      ADC_STATE_CLR_SET(hadc->State,
 80017a6:	2212      	movs	r2, #18
 80017a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017aa:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80017ac:	4393      	bics	r3, r2
 80017ae:	001a      	movs	r2, r3
 80017b0:	2310      	movs	r3, #16
 80017b2:	4313      	orrs	r3, r2
 80017b4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80017b8:	4303      	orrs	r3, r0
 80017ba:	64a3      	str	r3, [r4, #72]	; 0x48
 80017bc:	e7ea      	b.n	8001794 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017be:	2310      	movs	r3, #16
 80017c0:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80017c2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c4:	4313      	orrs	r3, r2
 80017c6:	6463      	str	r3, [r4, #68]	; 0x44
 80017c8:	e7e4      	b.n	8001794 <HAL_ADC_Init+0xf0>
      MODIFY_REG(hadc->Instance->CFGR1,
 80017ca:	2118      	movs	r1, #24
 80017cc:	68da      	ldr	r2, [r3, #12]
 80017ce:	438a      	bics	r2, r1
 80017d0:	68a1      	ldr	r1, [r4, #8]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80017d6:	6919      	ldr	r1, [r3, #16]
 80017d8:	6862      	ldr	r2, [r4, #4]
 80017da:	0089      	lsls	r1, r1, #2
 80017dc:	0889      	lsrs	r1, r1, #2
 80017de:	4311      	orrs	r1, r2
 80017e0:	6119      	str	r1, [r3, #16]
 80017e2:	e78a      	b.n	80016fa <HAL_ADC_Init+0x56>
 80017e4:	fffffefd 	.word	0xfffffefd
 80017e8:	fffe0219 	.word	0xfffe0219
 80017ec:	833fffe7 	.word	0x833fffe7

080017f0 <HAL_ADC_MspDeInit>:
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_ADC_DeInit>:
{
 80017f4:	b570      	push	{r4, r5, r6, lr}
 80017f6:	0004      	movs	r4, r0
     return HAL_ERROR;
 80017f8:	2501      	movs	r5, #1
  if(hadc == NULL)
 80017fa:	2800      	cmp	r0, #0
 80017fc:	d011      	beq.n	8001822 <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80017fe:	2302      	movs	r3, #2
 8001800:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001802:	4313      	orrs	r3, r2
 8001804:	6443      	str	r3, [r0, #68]	; 0x44
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001806:	f7ff ff23 	bl	8001650 <ADC_ConversionStop>
 800180a:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 800180c:	d133      	bne.n	8001876 <HAL_ADC_DeInit+0x82>
    tmp_hal_status = ADC_Disable(hadc);
 800180e:	0020      	movs	r0, r4
 8001810:	f7ff fe98 	bl	8001544 <ADC_Disable>
 8001814:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8001816:	2801      	cmp	r0, #1
 8001818:	d105      	bne.n	8001826 <HAL_ADC_DeInit+0x32>
{
 800181a:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 800181c:	2300      	movs	r3, #0
 800181e:	3440      	adds	r4, #64	; 0x40
 8001820:	7023      	strb	r3, [r4, #0]
}
 8001822:	0028      	movs	r0, r5
 8001824:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8001826:	2301      	movs	r3, #1
 8001828:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 800182a:	219f      	movs	r1, #159	; 0x9f
 800182c:	6823      	ldr	r3, [r4, #0]
    HAL_ADC_MspDeInit(hadc);
 800182e:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	438a      	bics	r2, r1
 8001834:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD   | ADC_FLAG_OVR  |
 8001836:	6019      	str	r1, [r3, #0]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_DISCEN |
 8001838:	68da      	ldr	r2, [r3, #12]
 800183a:	4910      	ldr	r1, [pc, #64]	; (800187c <HAL_ADC_DeInit+0x88>)
 800183c:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 800183e:	2107      	movs	r1, #7
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_DISCEN |
 8001840:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8001842:	691a      	ldr	r2, [r3, #16]
 8001844:	0092      	lsls	r2, r2, #2
 8001846:	0892      	lsrs	r2, r2, #2
 8001848:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	438a      	bics	r2, r1
 800184e:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 8001850:	6a1a      	ldr	r2, [r3, #32]
 8001852:	490b      	ldr	r1, [pc, #44]	; (8001880 <HAL_ADC_DeInit+0x8c>)
 8001854:	400a      	ands	r2, r1
 8001856:	621a      	str	r2, [r3, #32]
    hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 8001858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    ADC->CCR &= ~(ADC_CCR_ALL);
 800185a:	490a      	ldr	r1, [pc, #40]	; (8001884 <HAL_ADC_DeInit+0x90>)
    hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 800185c:	0cd2      	lsrs	r2, r2, #19
 800185e:	04d2      	lsls	r2, r2, #19
 8001860:	629a      	str	r2, [r3, #40]	; 0x28
    ADC->CCR &= ~(ADC_CCR_ALL);
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_ADC_DeInit+0x94>)
 8001864:	6813      	ldr	r3, [r2, #0]
 8001866:	400b      	ands	r3, r1
 8001868:	6013      	str	r3, [r2, #0]
    HAL_ADC_MspDeInit(hadc);
 800186a:	f7ff ffc1 	bl	80017f0 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800186e:	2300      	movs	r3, #0
 8001870:	64a3      	str	r3, [r4, #72]	; 0x48
    hadc->State = HAL_ADC_STATE_RESET; 
 8001872:	6463      	str	r3, [r4, #68]	; 0x44
 8001874:	e7d2      	b.n	800181c <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 8001876:	2801      	cmp	r0, #1
 8001878:	d0cf      	beq.n	800181a <HAL_ADC_DeInit+0x26>
 800187a:	e7d6      	b.n	800182a <HAL_ADC_DeInit+0x36>
 800187c:	833e0200 	.word	0x833e0200
 8001880:	f000f000 	.word	0xf000f000
 8001884:	ff3fffff 	.word	0xff3fffff
 8001888:	40012708 	.word	0x40012708

0800188c <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800188c:	6803      	ldr	r3, [r0, #0]
{
 800188e:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001890:	689b      	ldr	r3, [r3, #8]
{
 8001892:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8001894:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001896:	075b      	lsls	r3, r3, #29
 8001898:	d41a      	bmi.n	80018d0 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 800189a:	0025      	movs	r5, r4
 800189c:	3540      	adds	r5, #64	; 0x40
 800189e:	782b      	ldrb	r3, [r5, #0]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d015      	beq.n	80018d0 <HAL_ADC_Start+0x44>
 80018a4:	2301      	movs	r3, #1
 80018a6:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80018a8:	69e3      	ldr	r3, [r4, #28]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d111      	bne.n	80018d2 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80018ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018b0:	4a0b      	ldr	r2, [pc, #44]	; (80018e0 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80018b2:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80018b4:	401a      	ands	r2, r3
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018bc:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80018be:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018c0:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80018c2:	64a0      	str	r0, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80018c4:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018c6:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80018c8:	6899      	ldr	r1, [r3, #8]
 80018ca:	3a18      	subs	r2, #24
 80018cc:	430a      	orrs	r2, r1
 80018ce:	609a      	str	r2, [r3, #8]
}
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80018d2:	0020      	movs	r0, r4
 80018d4:	f7ff fe70 	bl	80015b8 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80018d8:	2800      	cmp	r0, #0
 80018da:	d1f9      	bne.n	80018d0 <HAL_ADC_Start+0x44>
 80018dc:	e7e7      	b.n	80018ae <HAL_ADC_Start+0x22>
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	fffff0fe 	.word	0xfffff0fe

080018e4 <HAL_ADC_PollForConversion>:
{
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018e6:	6945      	ldr	r5, [r0, #20]
{
 80018e8:	0004      	movs	r4, r0
 80018ea:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80018ec:	2d08      	cmp	r5, #8
 80018ee:	d00d      	beq.n	800190c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80018f0:	6803      	ldr	r3, [r0, #0]
 80018f2:	2001      	movs	r0, #1
 80018f4:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80018f6:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80018f8:	4203      	tst	r3, r0
 80018fa:	d007      	beq.n	800190c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018fc:	2320      	movs	r3, #32
 80018fe:	6c62      	ldr	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 8001900:	3440      	adds	r4, #64	; 0x40
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001902:	4313      	orrs	r3, r2
 8001904:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8001906:	2300      	movs	r3, #0
 8001908:	7023      	strb	r3, [r4, #0]
}
 800190a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 800190c:	f7ff fe08 	bl	8001520 <HAL_GetTick>
 8001910:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001912:	6823      	ldr	r3, [r4, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	422a      	tst	r2, r5
 8001918:	d023      	beq.n	8001962 <HAL_ADC_PollForConversion+0x7e>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	430a      	orrs	r2, r1
 8001922:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001924:	22c0      	movs	r2, #192	; 0xc0
 8001926:	68d9      	ldr	r1, [r3, #12]
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	4211      	tst	r1, r2
 800192c:	d112      	bne.n	8001954 <HAL_ADC_PollForConversion+0x70>
 800192e:	6a22      	ldr	r2, [r4, #32]
 8001930:	2a00      	cmp	r2, #0
 8001932:	d10f      	bne.n	8001954 <HAL_ADC_PollForConversion+0x70>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	0712      	lsls	r2, r2, #28
 8001938:	d50c      	bpl.n	8001954 <HAL_ADC_PollForConversion+0x70>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	0752      	lsls	r2, r2, #29
 800193e:	d423      	bmi.n	8001988 <HAL_ADC_PollForConversion+0xa4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001940:	210c      	movs	r1, #12
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	438a      	bics	r2, r1
 8001946:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8001948:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800194a:	4914      	ldr	r1, [pc, #80]	; (800199c <HAL_ADC_PollForConversion+0xb8>)
 800194c:	4011      	ands	r1, r2
 800194e:	2201      	movs	r2, #1
 8001950:	430a      	orrs	r2, r1
 8001952:	6462      	str	r2, [r4, #68]	; 0x44
  return HAL_OK;
 8001954:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001956:	69a2      	ldr	r2, [r4, #24]
 8001958:	4282      	cmp	r2, r0
 800195a:	d1d6      	bne.n	800190a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800195c:	220c      	movs	r2, #12
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e7d3      	b.n	800190a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8001962:	1c72      	adds	r2, r6, #1
 8001964:	d0d6      	beq.n	8001914 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001966:	2e00      	cmp	r6, #0
 8001968:	d108      	bne.n	800197c <HAL_ADC_PollForConversion+0x98>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800196a:	2304      	movs	r3, #4
 800196c:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800196e:	3440      	adds	r4, #64	; 0x40
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001970:	4313      	orrs	r3, r2
 8001972:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8001974:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8001976:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8001978:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 800197a:	e7c6      	b.n	800190a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800197c:	f7ff fdd0 	bl	8001520 <HAL_GetTick>
 8001980:	1bc0      	subs	r0, r0, r7
 8001982:	4286      	cmp	r6, r0
 8001984:	d2c5      	bcs.n	8001912 <HAL_ADC_PollForConversion+0x2e>
 8001986:	e7f0      	b.n	800196a <HAL_ADC_PollForConversion+0x86>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001988:	2220      	movs	r2, #32
 800198a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800198c:	430a      	orrs	r2, r1
 800198e:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001990:	2201      	movs	r2, #1
 8001992:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001994:	430a      	orrs	r2, r1
 8001996:	64a2      	str	r2, [r4, #72]	; 0x48
 8001998:	e7dc      	b.n	8001954 <HAL_ADC_PollForConversion+0x70>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	fffffefe 	.word	0xfffffefe

080019a0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80019a0:	6803      	ldr	r3, [r0, #0]
 80019a2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_ADC_ConfigChannel>:
{
 80019a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0U;
 80019aa:	2300      	movs	r3, #0
  __HAL_LOCK(hadc);
 80019ac:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80019ae:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80019b0:	3440      	adds	r4, #64	; 0x40
 80019b2:	7823      	ldrb	r3, [r4, #0]
{
 80019b4:	0005      	movs	r5, r0
  __HAL_LOCK(hadc);
 80019b6:	2002      	movs	r0, #2
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d02b      	beq.n	8001a14 <HAL_ADC_ConfigChannel+0x6c>
 80019bc:	2301      	movs	r3, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019be:	682a      	ldr	r2, [r5, #0]
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019c0:	6bae      	ldr	r6, [r5, #56]	; 0x38
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019c2:	6890      	ldr	r0, [r2, #8]
  __HAL_LOCK(hadc);
 80019c4:	7023      	strb	r3, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019c6:	0740      	lsls	r0, r0, #29
 80019c8:	d452      	bmi.n	8001a70 <HAL_ADC_ConfigChannel+0xc8>
    if (sConfig->Rank != ADC_RANK_NONE)
 80019ca:	482c      	ldr	r0, [pc, #176]	; (8001a7c <HAL_ADC_ConfigChannel+0xd4>)
 80019cc:	684f      	ldr	r7, [r1, #4]
 80019ce:	680d      	ldr	r5, [r1, #0]
 80019d0:	4287      	cmp	r7, r0
 80019d2:	d03b      	beq.n	8001a4c <HAL_ADC_ConfigChannel+0xa4>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019d4:	40ab      	lsls	r3, r5
 80019d6:	0018      	movs	r0, r3
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019d8:	2380      	movs	r3, #128	; 0x80
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019da:	6a97      	ldr	r7, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019dc:	055b      	lsls	r3, r3, #21
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80019de:	4338      	orrs	r0, r7
 80019e0:	6290      	str	r0, [r2, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019e2:	429e      	cmp	r6, r3
 80019e4:	d00f      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x5e>
 80019e6:	3e01      	subs	r6, #1
 80019e8:	2e06      	cmp	r6, #6
 80019ea:	d90c      	bls.n	8001a06 <HAL_ADC_ConfigChannel+0x5e>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80019ec:	688b      	ldr	r3, [r1, #8]
 80019ee:	2107      	movs	r1, #7
 80019f0:	6950      	ldr	r0, [r2, #20]
 80019f2:	4008      	ands	r0, r1
 80019f4:	4283      	cmp	r3, r0
 80019f6:	d006      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x5e>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019f8:	6950      	ldr	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80019fa:	400b      	ands	r3, r1
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80019fc:	4388      	bics	r0, r1
 80019fe:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001a00:	6950      	ldr	r0, [r2, #20]
 8001a02:	4303      	orrs	r3, r0
 8001a04:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a06:	002b      	movs	r3, r5
 8001a08:	3b10      	subs	r3, #16
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d903      	bls.n	8001a16 <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a0e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001a10:	2300      	movs	r3, #0
 8001a12:	7023      	strb	r3, [r4, #0]
}
 8001a14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <HAL_ADC_ConfigChannel+0xd8>)
 8001a18:	2280      	movs	r2, #128	; 0x80
 8001a1a:	6819      	ldr	r1, [r3, #0]
 8001a1c:	2d10      	cmp	r5, #16
 8001a1e:	d013      	beq.n	8001a48 <HAL_ADC_ConfigChannel+0xa0>
 8001a20:	03d2      	lsls	r2, r2, #15
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a26:	2d10      	cmp	r5, #16
 8001a28:	d1f1      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_ADC_ConfigChannel+0xdc>)
 8001a2c:	4916      	ldr	r1, [pc, #88]	; (8001a88 <HAL_ADC_ConfigChannel+0xe0>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f7fe fb74 	bl	800011c <__udivsi3>
 8001a34:	230a      	movs	r3, #10
 8001a36:	4358      	muls	r0, r3
 8001a38:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0e6      	beq.n	8001a0e <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8001a40:	9b01      	ldr	r3, [sp, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	e7f8      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x92>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a48:	0412      	lsls	r2, r2, #16
 8001a4a:	e7ea      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x7a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a4c:	40ab      	lsls	r3, r5
 8001a4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a50:	4399      	bics	r1, r3
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a52:	002b      	movs	r3, r5
 8001a54:	3b10      	subs	r3, #16
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001a56:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d8d8      	bhi.n	8001a0e <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <HAL_ADC_ConfigChannel+0xd8>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	2d10      	cmp	r5, #16
 8001a62:	d003      	beq.n	8001a6c <HAL_ADC_ConfigChannel+0xc4>
 8001a64:	4909      	ldr	r1, [pc, #36]	; (8001a8c <HAL_ADC_ConfigChannel+0xe4>)
 8001a66:	400a      	ands	r2, r1
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	e7d0      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x66>
 8001a6c:	4908      	ldr	r1, [pc, #32]	; (8001a90 <HAL_ADC_ConfigChannel+0xe8>)
 8001a6e:	e7fa      	b.n	8001a66 <HAL_ADC_ConfigChannel+0xbe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a70:	2220      	movs	r2, #32
 8001a72:	6c69      	ldr	r1, [r5, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001a74:	0018      	movs	r0, r3
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a76:	430a      	orrs	r2, r1
 8001a78:	646a      	str	r2, [r5, #68]	; 0x44
 8001a7a:	e7c9      	b.n	8001a10 <HAL_ADC_ConfigChannel+0x68>
 8001a7c:	00001001 	.word	0x00001001
 8001a80:	40012708 	.word	0x40012708
 8001a84:	20000000 	.word	0x20000000
 8001a88:	000f4240 	.word	0x000f4240
 8001a8c:	ffbfffff 	.word	0xffbfffff
 8001a90:	ff7fffff 	.word	0xff7fffff

08001a94 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001a94:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a96:	0005      	movs	r5, r0
 8001a98:	3540      	adds	r5, #64	; 0x40
 8001a9a:	782b      	ldrb	r3, [r5, #0]
{
 8001a9c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d039      	beq.n	8001b18 <HAL_ADCEx_Calibration_Start+0x84>
 8001aa4:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001aa6:	2103      	movs	r1, #3
  __HAL_LOCK(hadc);
 8001aa8:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	400a      	ands	r2, r1
 8001ab0:	2a01      	cmp	r2, #1
 8001ab2:	d105      	bne.n	8001ac0 <HAL_ADCEx_Calibration_Start+0x2c>
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d12f      	bne.n	8001b1a <HAL_ADCEx_Calibration_Start+0x86>
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	0412      	lsls	r2, r2, #16
 8001abe:	d42c      	bmi.n	8001b1a <HAL_ADCEx_Calibration_Start+0x86>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001ac0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001ac2:	4919      	ldr	r1, [pc, #100]	; (8001b28 <HAL_ADCEx_Calibration_Start+0x94>)
 8001ac4:	4011      	ands	r1, r2
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	6462      	str	r2, [r4, #68]	; 0x44
                      HAL_ADC_STATE_REG_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	6899      	ldr	r1, [r3, #8]
 8001ad0:	0612      	lsls	r2, r2, #24
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001ad6:	f7ff fd23 	bl	8001520 <HAL_GetTick>
 8001ada:	0006      	movs	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001adc:	6823      	ldr	r3, [r4, #0]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <HAL_ADCEx_Calibration_Start+0x66>
        return HAL_ERROR;
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8001aea:	4393      	bics	r3, r2
 8001aec:	001a      	movs	r2, r3
 8001aee:	2301      	movs	r3, #1
 8001af0:	4313      	orrs	r3, r2
 8001af2:	6463      	str	r3, [r4, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af4:	2300      	movs	r3, #0
 8001af6:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8001af8:	e00e      	b.n	8001b18 <HAL_ADCEx_Calibration_Start+0x84>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001afa:	f7ff fd11 	bl	8001520 <HAL_GetTick>
 8001afe:	1b80      	subs	r0, r0, r6
 8001b00:	2802      	cmp	r0, #2
 8001b02:	d9eb      	bls.n	8001adc <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 8001b04:	2212      	movs	r2, #18
 8001b06:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8001b08:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8001b0a:	4393      	bics	r3, r2
 8001b0c:	001a      	movs	r2, r3
 8001b0e:	2310      	movs	r3, #16
 8001b10:	4313      	orrs	r3, r2
 8001b12:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 8001b14:	2300      	movs	r3, #0
 8001b16:	702b      	strb	r3, [r5, #0]
}
 8001b18:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b1a:	2320      	movs	r3, #32
 8001b1c:	6c62      	ldr	r2, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8001b1e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b20:	4313      	orrs	r3, r2
 8001b22:	6463      	str	r3, [r4, #68]	; 0x44
 8001b24:	e7e6      	b.n	8001af4 <HAL_ADCEx_Calibration_Start+0x60>
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	fffffefd 	.word	0xfffffefd

08001b2c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001b30:	2800      	cmp	r0, #0
 8001b32:	da14      	bge.n	8001b5e <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b34:	230f      	movs	r3, #15
 8001b36:	b2c0      	uxtb	r0, r0
 8001b38:	4003      	ands	r3, r0
 8001b3a:	3b08      	subs	r3, #8
 8001b3c:	4a11      	ldr	r2, [pc, #68]	; (8001b84 <HAL_NVIC_SetPriority+0x58>)
 8001b3e:	089b      	lsrs	r3, r3, #2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	189b      	adds	r3, r3, r2
 8001b44:	2203      	movs	r2, #3
 8001b46:	4010      	ands	r0, r2
 8001b48:	4090      	lsls	r0, r2
 8001b4a:	32fc      	adds	r2, #252	; 0xfc
 8001b4c:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b4e:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b50:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b52:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b54:	69dc      	ldr	r4, [r3, #28]
 8001b56:	43ac      	bics	r4, r5
 8001b58:	4321      	orrs	r1, r4
 8001b5a:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001b5c:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b5e:	2503      	movs	r5, #3
 8001b60:	0883      	lsrs	r3, r0, #2
 8001b62:	4028      	ands	r0, r5
 8001b64:	40a8      	lsls	r0, r5
 8001b66:	35fc      	adds	r5, #252	; 0xfc
 8001b68:	002e      	movs	r6, r5
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_NVIC_SetPriority+0x5c>)
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	189b      	adds	r3, r3, r2
 8001b70:	22c0      	movs	r2, #192	; 0xc0
 8001b72:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b74:	4029      	ands	r1, r5
 8001b76:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	589c      	ldr	r4, [r3, r2]
 8001b7c:	43b4      	bics	r4, r6
 8001b7e:	4321      	orrs	r1, r4
 8001b80:	5099      	str	r1, [r3, r2]
 8001b82:	e7eb      	b.n	8001b5c <HAL_NVIC_SetPriority+0x30>
 8001b84:	e000ed00 	.word	0xe000ed00
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001b8c:	231f      	movs	r3, #31
 8001b8e:	4018      	ands	r0, r3
 8001b90:	3b1e      	subs	r3, #30
 8001b92:	4083      	lsls	r3, r0
 8001b94:	4a01      	ldr	r2, [pc, #4]	; (8001b9c <HAL_NVIC_EnableIRQ+0x10>)
 8001b96:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b98:	4770      	bx	lr
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	e000e100 	.word	0xe000e100

08001ba0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_SYSTICK_Config+0x28>)
 8001ba2:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ba4:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d80d      	bhi.n	8001bc6 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001baa:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bae:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bb0:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb2:	6a03      	ldr	r3, [r0, #32]
 8001bb4:	0609      	lsls	r1, r1, #24
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	430b      	orrs	r3, r1
 8001bbc:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bbe:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc0:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc2:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc4:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001bc6:	4770      	bx	lr
 8001bc8:	00ffffff 	.word	0x00ffffff
 8001bcc:	e000e010 	.word	0xe000e010
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001bd6:	680b      	ldr	r3, [r1, #0]
{ 
 8001bd8:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001bda:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8001bdc:	2300      	movs	r3, #0
{ 
 8001bde:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001be0:	9a02      	ldr	r2, [sp, #8]
 8001be2:	40da      	lsrs	r2, r3
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8001be6:	b007      	add	sp, #28
 8001be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bea:	2201      	movs	r2, #1
 8001bec:	409a      	lsls	r2, r3
 8001bee:	9203      	str	r2, [sp, #12]
 8001bf0:	9903      	ldr	r1, [sp, #12]
 8001bf2:	9a02      	ldr	r2, [sp, #8]
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8001bf8:	d100      	bne.n	8001bfc <HAL_GPIO_Init+0x28>
 8001bfa:	e08c      	b.n	8001d16 <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8001bfc:	9a01      	ldr	r2, [sp, #4]
 8001bfe:	2110      	movs	r1, #16
 8001c00:	6852      	ldr	r2, [r2, #4]
 8001c02:	0016      	movs	r6, r2
 8001c04:	438e      	bics	r6, r1
 8001c06:	2e02      	cmp	r6, #2
 8001c08:	d10e      	bne.n	8001c28 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001c0a:	2507      	movs	r5, #7
 8001c0c:	401d      	ands	r5, r3
 8001c0e:	00ad      	lsls	r5, r5, #2
 8001c10:	3901      	subs	r1, #1
 8001c12:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8001c14:	08dc      	lsrs	r4, r3, #3
 8001c16:	00a4      	lsls	r4, r4, #2
 8001c18:	1904      	adds	r4, r0, r4
 8001c1a:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8001c1c:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8001c1e:	9901      	ldr	r1, [sp, #4]
 8001c20:	6909      	ldr	r1, [r1, #16]
 8001c22:	40a9      	lsls	r1, r5
 8001c24:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8001c26:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001c28:	2403      	movs	r4, #3
 8001c2a:	005f      	lsls	r7, r3, #1
 8001c2c:	40bc      	lsls	r4, r7
 8001c2e:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8001c30:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c32:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001c34:	4025      	ands	r5, r4
 8001c36:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c38:	2503      	movs	r5, #3
 8001c3a:	4015      	ands	r5, r2
 8001c3c:	40bd      	lsls	r5, r7
 8001c3e:	4661      	mov	r1, ip
 8001c40:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 8001c42:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c44:	2e01      	cmp	r6, #1
 8001c46:	d80f      	bhi.n	8001c68 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001c48:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8001c4a:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001c4c:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c4e:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001c50:	40bd      	lsls	r5, r7
 8001c52:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8001c54:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c56:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001c58:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c5a:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001c5c:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c5e:	2101      	movs	r1, #1
 8001c60:	400d      	ands	r5, r1
 8001c62:	409d      	lsls	r5, r3
 8001c64:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 8001c66:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001c68:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001c6a:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6c:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001c6e:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001c70:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001c72:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001c74:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001c76:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001c78:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001c7a:	420a      	tst	r2, r1
 8001c7c:	d04b      	beq.n	8001d16 <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	2101      	movs	r1, #1
 8001c80:	4c26      	ldr	r4, [pc, #152]	; (8001d1c <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c82:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c84:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c86:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c88:	430d      	orrs	r5, r1
 8001c8a:	61a5      	str	r5, [r4, #24]
 8001c8c:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8001c8e:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c90:	400c      	ands	r4, r1
 8001c92:	9405      	str	r4, [sp, #20]
 8001c94:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001c96:	240f      	movs	r4, #15
 8001c98:	4921      	ldr	r1, [pc, #132]	; (8001d20 <HAL_GPIO_Init+0x14c>)
 8001c9a:	00ad      	lsls	r5, r5, #2
 8001c9c:	00b6      	lsls	r6, r6, #2
 8001c9e:	186d      	adds	r5, r5, r1
 8001ca0:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca2:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8001ca4:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca6:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001ca8:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001caa:	2400      	movs	r4, #0
 8001cac:	4288      	cmp	r0, r1
 8001cae:	d00c      	beq.n	8001cca <HAL_GPIO_Init+0xf6>
 8001cb0:	491c      	ldr	r1, [pc, #112]	; (8001d24 <HAL_GPIO_Init+0x150>)
 8001cb2:	3401      	adds	r4, #1
 8001cb4:	4288      	cmp	r0, r1
 8001cb6:	d008      	beq.n	8001cca <HAL_GPIO_Init+0xf6>
 8001cb8:	491b      	ldr	r1, [pc, #108]	; (8001d28 <HAL_GPIO_Init+0x154>)
 8001cba:	3401      	adds	r4, #1
 8001cbc:	4288      	cmp	r0, r1
 8001cbe:	d004      	beq.n	8001cca <HAL_GPIO_Init+0xf6>
 8001cc0:	491a      	ldr	r1, [pc, #104]	; (8001d2c <HAL_GPIO_Init+0x158>)
 8001cc2:	3403      	adds	r4, #3
 8001cc4:	4288      	cmp	r0, r1
 8001cc6:	d100      	bne.n	8001cca <HAL_GPIO_Init+0xf6>
 8001cc8:	3c02      	subs	r4, #2
 8001cca:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ccc:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8001cd0:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cd2:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8001cd4:	4c16      	ldr	r4, [pc, #88]	; (8001d30 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cd6:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 8001cd8:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 8001cda:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cdc:	03d1      	lsls	r1, r2, #15
 8001cde:	d401      	bmi.n	8001ce4 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ce0:	003e      	movs	r6, r7
 8001ce2:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8001ce4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 8001ce6:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 8001ce8:	9e00      	ldr	r6, [sp, #0]
 8001cea:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cec:	0391      	lsls	r1, r2, #14
 8001cee:	d401      	bmi.n	8001cf4 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001cf0:	003e      	movs	r6, r7
 8001cf2:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8001cf4:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 8001cf6:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 8001cf8:	9e00      	ldr	r6, [sp, #0]
 8001cfa:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfc:	02d1      	lsls	r1, r2, #11
 8001cfe:	d401      	bmi.n	8001d04 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001d00:	003e      	movs	r6, r7
 8001d02:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8001d04:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 8001d06:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 8001d08:	9f00      	ldr	r7, [sp, #0]
 8001d0a:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d0c:	0292      	lsls	r2, r2, #10
 8001d0e:	d401      	bmi.n	8001d14 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001d10:	402e      	ands	r6, r5
 8001d12:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8001d14:	60e7      	str	r7, [r4, #12]
    position++;
 8001d16:	3301      	adds	r3, #1
 8001d18:	e762      	b.n	8001be0 <HAL_GPIO_Init+0xc>
 8001d1a:	46c0      	nop			; (mov r8, r8)
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40010000 	.word	0x40010000
 8001d24:	48000400 	.word	0x48000400
 8001d28:	48000800 	.word	0x48000800
 8001d2c:	48000c00 	.word	0x48000c00
 8001d30:	40010400 	.word	0x40010400

08001d34 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d34:	6900      	ldr	r0, [r0, #16]
 8001d36:	4008      	ands	r0, r1
 8001d38:	1e41      	subs	r1, r0, #1
 8001d3a:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001d3c:	b2c0      	uxtb	r0, r0
  }
 8001d3e:	4770      	bx	lr

08001d40 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001d40:	6943      	ldr	r3, [r0, #20]
 8001d42:	4059      	eors	r1, r3
 8001d44:	6141      	str	r1, [r0, #20]
}
 8001d46:	4770      	bx	lr

08001d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	6803      	ldr	r3, [r0, #0]
{
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d50:	07db      	lsls	r3, r3, #31
 8001d52:	d42f      	bmi.n	8001db4 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d54:	682b      	ldr	r3, [r5, #0]
 8001d56:	079b      	lsls	r3, r3, #30
 8001d58:	d500      	bpl.n	8001d5c <HAL_RCC_OscConfig+0x14>
 8001d5a:	e086      	b.n	8001e6a <HAL_RCC_OscConfig+0x122>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5c:	682b      	ldr	r3, [r5, #0]
 8001d5e:	071b      	lsls	r3, r3, #28
 8001d60:	d500      	bpl.n	8001d64 <HAL_RCC_OscConfig+0x1c>
 8001d62:	e0c6      	b.n	8001ef2 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	075b      	lsls	r3, r3, #29
 8001d68:	d500      	bpl.n	8001d6c <HAL_RCC_OscConfig+0x24>
 8001d6a:	e0e9      	b.n	8001f40 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	06db      	lsls	r3, r3, #27
 8001d70:	d51a      	bpl.n	8001da8 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d72:	696a      	ldr	r2, [r5, #20]
 8001d74:	4cba      	ldr	r4, [pc, #744]	; (8002060 <HAL_RCC_OscConfig+0x318>)
 8001d76:	2304      	movs	r3, #4
 8001d78:	2a01      	cmp	r2, #1
 8001d7a:	d000      	beq.n	8001d7e <HAL_RCC_OscConfig+0x36>
 8001d7c:	e155      	b.n	800202a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d7e:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d80:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d82:	430b      	orrs	r3, r1
 8001d84:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d88:	431a      	orrs	r2, r3
 8001d8a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001d8c:	f7ff fbc8 	bl	8001520 <HAL_GetTick>
 8001d90:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d94:	4233      	tst	r3, r6
 8001d96:	d100      	bne.n	8001d9a <HAL_RCC_OscConfig+0x52>
 8001d98:	e140      	b.n	800201c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d9a:	21f8      	movs	r1, #248	; 0xf8
 8001d9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001d9e:	69ab      	ldr	r3, [r5, #24]
 8001da0:	438a      	bics	r2, r1
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4313      	orrs	r3, r2
 8001da6:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001da8:	6a29      	ldr	r1, [r5, #32]
 8001daa:	2900      	cmp	r1, #0
 8001dac:	d000      	beq.n	8001db0 <HAL_RCC_OscConfig+0x68>
 8001dae:	e163      	b.n	8002078 <HAL_RCC_OscConfig+0x330>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001db0:	2000      	movs	r0, #0
 8001db2:	e018      	b.n	8001de6 <HAL_RCC_OscConfig+0x9e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001db4:	210c      	movs	r1, #12
 8001db6:	4caa      	ldr	r4, [pc, #680]	; (8002060 <HAL_RCC_OscConfig+0x318>)
 8001db8:	6862      	ldr	r2, [r4, #4]
 8001dba:	400a      	ands	r2, r1
 8001dbc:	2a04      	cmp	r2, #4
 8001dbe:	d00b      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001dc0:	6863      	ldr	r3, [r4, #4]
 8001dc2:	400b      	ands	r3, r1
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d110      	bne.n	8001dea <HAL_RCC_OscConfig+0xa2>
 8001dc8:	22c0      	movs	r2, #192	; 0xc0
 8001dca:	6863      	ldr	r3, [r4, #4]
 8001dcc:	0252      	lsls	r2, r2, #9
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2280      	movs	r2, #128	; 0x80
 8001dd2:	0252      	lsls	r2, r2, #9
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d108      	bne.n	8001dea <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	039b      	lsls	r3, r3, #14
 8001ddc:	d5ba      	bpl.n	8001d54 <HAL_RCC_OscConfig+0xc>
 8001dde:	686b      	ldr	r3, [r5, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1b7      	bne.n	8001d54 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001de4:	2001      	movs	r0, #1
}
 8001de6:	b005      	add	sp, #20
 8001de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dea:	686b      	ldr	r3, [r5, #4]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d113      	bne.n	8001e18 <HAL_RCC_OscConfig+0xd0>
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	025b      	lsls	r3, r3, #9
 8001df6:	4313      	orrs	r3, r2
 8001df8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb91 	bl	8001520 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001e00:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	02b6      	lsls	r6, r6, #10
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	4233      	tst	r3, r6
 8001e08:	d1a4      	bne.n	8001d54 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0a:	f7ff fb89 	bl	8001520 <HAL_GetTick>
 8001e0e:	1bc0      	subs	r0, r0, r7
 8001e10:	2864      	cmp	r0, #100	; 0x64
 8001e12:	d9f7      	bls.n	8001e04 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8001e14:	2003      	movs	r0, #3
 8001e16:	e7e6      	b.n	8001de6 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d116      	bne.n	8001e4a <HAL_RCC_OscConfig+0x102>
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	4a91      	ldr	r2, [pc, #580]	; (8002064 <HAL_RCC_OscConfig+0x31c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e20:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e22:	4013      	ands	r3, r2
 8001e24:	6023      	str	r3, [r4, #0]
 8001e26:	6823      	ldr	r3, [r4, #0]
 8001e28:	4a8f      	ldr	r2, [pc, #572]	; (8002068 <HAL_RCC_OscConfig+0x320>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e30:	f7ff fb76 	bl	8001520 <HAL_GetTick>
 8001e34:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	4233      	tst	r3, r6
 8001e3a:	d100      	bne.n	8001e3e <HAL_RCC_OscConfig+0xf6>
 8001e3c:	e78a      	b.n	8001d54 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e3e:	f7ff fb6f 	bl	8001520 <HAL_GetTick>
 8001e42:	1bc0      	subs	r0, r0, r7
 8001e44:	2864      	cmp	r0, #100	; 0x64
 8001e46:	d9f6      	bls.n	8001e36 <HAL_RCC_OscConfig+0xee>
 8001e48:	e7e4      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d105      	bne.n	8001e5a <HAL_RCC_OscConfig+0x112>
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	02db      	lsls	r3, r3, #11
 8001e54:	4313      	orrs	r3, r2
 8001e56:	6023      	str	r3, [r4, #0]
 8001e58:	e7ca      	b.n	8001df0 <HAL_RCC_OscConfig+0xa8>
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	4a81      	ldr	r2, [pc, #516]	; (8002064 <HAL_RCC_OscConfig+0x31c>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	6023      	str	r3, [r4, #0]
 8001e62:	6823      	ldr	r3, [r4, #0]
 8001e64:	4a80      	ldr	r2, [pc, #512]	; (8002068 <HAL_RCC_OscConfig+0x320>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	e7c6      	b.n	8001df8 <HAL_RCC_OscConfig+0xb0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	4c7c      	ldr	r4, [pc, #496]	; (8002060 <HAL_RCC_OscConfig+0x318>)
 8001e6e:	6863      	ldr	r3, [r4, #4]
 8001e70:	4213      	tst	r3, r2
 8001e72:	d00b      	beq.n	8001e8c <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e74:	6863      	ldr	r3, [r4, #4]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d115      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x160>
 8001e7c:	22c0      	movs	r2, #192	; 0xc0
 8001e7e:	6863      	ldr	r3, [r4, #4]
 8001e80:	0252      	lsls	r2, r2, #9
 8001e82:	4013      	ands	r3, r2
 8001e84:	2280      	movs	r2, #128	; 0x80
 8001e86:	0212      	lsls	r2, r2, #8
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	079b      	lsls	r3, r3, #30
 8001e90:	d502      	bpl.n	8001e98 <HAL_RCC_OscConfig+0x150>
 8001e92:	68eb      	ldr	r3, [r5, #12]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d1a5      	bne.n	8001de4 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	21f8      	movs	r1, #248	; 0xf8
 8001e9a:	6822      	ldr	r2, [r4, #0]
 8001e9c:	692b      	ldr	r3, [r5, #16]
 8001e9e:	438a      	bics	r2, r1
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	6023      	str	r3, [r4, #0]
 8001ea6:	e759      	b.n	8001d5c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea8:	68ea      	ldr	r2, [r5, #12]
 8001eaa:	2301      	movs	r3, #1
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d00f      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fb32 	bl	8001520 <HAL_GetTick>
 8001ebc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	4233      	tst	r3, r6
 8001ec2:	d1e9      	bne.n	8001e98 <HAL_RCC_OscConfig+0x150>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fb2c 	bl	8001520 <HAL_GetTick>
 8001ec8:	1bc0      	subs	r0, r0, r7
 8001eca:	2802      	cmp	r0, #2
 8001ecc:	d9f7      	bls.n	8001ebe <HAL_RCC_OscConfig+0x176>
 8001ece:	e7a1      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_DISABLE();
 8001ed0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ed2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001ed4:	439a      	bics	r2, r3
 8001ed6:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fb22 	bl	8001520 <HAL_GetTick>
 8001edc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	4233      	tst	r3, r6
 8001ee2:	d100      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x19e>
 8001ee4:	e73a      	b.n	8001d5c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee6:	f7ff fb1b 	bl	8001520 <HAL_GetTick>
 8001eea:	1bc0      	subs	r0, r0, r7
 8001eec:	2802      	cmp	r0, #2
 8001eee:	d9f6      	bls.n	8001ede <HAL_RCC_OscConfig+0x196>
 8001ef0:	e790      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ef2:	69ea      	ldr	r2, [r5, #28]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	4c5a      	ldr	r4, [pc, #360]	; (8002060 <HAL_RCC_OscConfig+0x318>)
 8001ef8:	2a00      	cmp	r2, #0
 8001efa:	d010      	beq.n	8001f1e <HAL_RCC_OscConfig+0x1d6>
      __HAL_RCC_LSI_ENABLE();
 8001efc:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efe:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8001f00:	4313      	orrs	r3, r2
 8001f02:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001f04:	f7ff fb0c 	bl	8001520 <HAL_GetTick>
 8001f08:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f0c:	4233      	tst	r3, r6
 8001f0e:	d000      	beq.n	8001f12 <HAL_RCC_OscConfig+0x1ca>
 8001f10:	e728      	b.n	8001d64 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f12:	f7ff fb05 	bl	8001520 <HAL_GetTick>
 8001f16:	1bc0      	subs	r0, r0, r7
 8001f18:	2802      	cmp	r0, #2
 8001f1a:	d9f6      	bls.n	8001f0a <HAL_RCC_OscConfig+0x1c2>
 8001f1c:	e77a      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_LSI_DISABLE();
 8001f1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001f22:	439a      	bics	r2, r3
 8001f24:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001f26:	f7ff fafb 	bl	8001520 <HAL_GetTick>
 8001f2a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f2e:	4233      	tst	r3, r6
 8001f30:	d100      	bne.n	8001f34 <HAL_RCC_OscConfig+0x1ec>
 8001f32:	e717      	b.n	8001d64 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff faf4 	bl	8001520 <HAL_GetTick>
 8001f38:	1bc0      	subs	r0, r0, r7
 8001f3a:	2802      	cmp	r0, #2
 8001f3c:	d9f6      	bls.n	8001f2c <HAL_RCC_OscConfig+0x1e4>
 8001f3e:	e769      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f40:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001f42:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f44:	4c46      	ldr	r4, [pc, #280]	; (8002060 <HAL_RCC_OscConfig+0x318>)
 8001f46:	0552      	lsls	r2, r2, #21
 8001f48:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4c:	4213      	tst	r3, r2
 8001f4e:	d108      	bne.n	8001f62 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f50:	69e3      	ldr	r3, [r4, #28]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61e3      	str	r3, [r4, #28]
 8001f56:	69e3      	ldr	r3, [r4, #28]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	9303      	str	r3, [sp, #12]
 8001f5c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f62:	2780      	movs	r7, #128	; 0x80
 8001f64:	4e41      	ldr	r6, [pc, #260]	; (800206c <HAL_RCC_OscConfig+0x324>)
 8001f66:	007f      	lsls	r7, r7, #1
 8001f68:	6833      	ldr	r3, [r6, #0]
 8001f6a:	423b      	tst	r3, r7
 8001f6c:	d006      	beq.n	8001f7c <HAL_RCC_OscConfig+0x234>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6e:	68ab      	ldr	r3, [r5, #8]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d113      	bne.n	8001f9c <HAL_RCC_OscConfig+0x254>
 8001f74:	6a22      	ldr	r2, [r4, #32]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	6223      	str	r3, [r4, #32]
 8001f7a:	e030      	b.n	8001fde <HAL_RCC_OscConfig+0x296>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7c:	6833      	ldr	r3, [r6, #0]
 8001f7e:	433b      	orrs	r3, r7
 8001f80:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001f82:	f7ff facd 	bl	8001520 <HAL_GetTick>
 8001f86:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f88:	6833      	ldr	r3, [r6, #0]
 8001f8a:	423b      	tst	r3, r7
 8001f8c:	d1ef      	bne.n	8001f6e <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff fac7 	bl	8001520 <HAL_GetTick>
 8001f92:	9b01      	ldr	r3, [sp, #4]
 8001f94:	1ac0      	subs	r0, r0, r3
 8001f96:	2864      	cmp	r0, #100	; 0x64
 8001f98:	d9f6      	bls.n	8001f88 <HAL_RCC_OscConfig+0x240>
 8001f9a:	e73b      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
 8001f9c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d114      	bne.n	8001fcc <HAL_RCC_OscConfig+0x284>
 8001fa2:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa4:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fa6:	4393      	bics	r3, r2
 8001fa8:	6223      	str	r3, [r4, #32]
 8001faa:	6a23      	ldr	r3, [r4, #32]
 8001fac:	3203      	adds	r2, #3
 8001fae:	4393      	bics	r3, r2
 8001fb0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fab5 	bl	8001520 <HAL_GetTick>
 8001fb6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	6a23      	ldr	r3, [r4, #32]
 8001fba:	423b      	tst	r3, r7
 8001fbc:	d025      	beq.n	800200a <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fbe:	f7ff faaf 	bl	8001520 <HAL_GetTick>
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <HAL_RCC_OscConfig+0x328>)
 8001fc4:	1b80      	subs	r0, r0, r6
 8001fc6:	4298      	cmp	r0, r3
 8001fc8:	d9f6      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x270>
 8001fca:	e723      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	2b05      	cmp	r3, #5
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x2a0>
 8001fd0:	6a21      	ldr	r1, [r4, #32]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	6223      	str	r3, [r4, #32]
 8001fd8:	6a23      	ldr	r3, [r4, #32]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8001fde:	f7ff fa9f 	bl	8001520 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8001fe4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe6:	e00d      	b.n	8002004 <HAL_RCC_OscConfig+0x2bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe8:	6a23      	ldr	r3, [r4, #32]
 8001fea:	4393      	bics	r3, r2
 8001fec:	2204      	movs	r2, #4
 8001fee:	6223      	str	r3, [r4, #32]
 8001ff0:	6a23      	ldr	r3, [r4, #32]
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	e7c0      	b.n	8001f78 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff fa93 	bl	8001520 <HAL_GetTick>
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x328>)
 8001ffc:	1b80      	subs	r0, r0, r6
 8001ffe:	4298      	cmp	r0, r3
 8002000:	d900      	bls.n	8002004 <HAL_RCC_OscConfig+0x2bc>
 8002002:	e707      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002004:	6a23      	ldr	r3, [r4, #32]
 8002006:	423b      	tst	r3, r7
 8002008:	d0f5      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 800200a:	9b00      	ldr	r3, [sp, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d000      	beq.n	8002012 <HAL_RCC_OscConfig+0x2ca>
 8002010:	e6ac      	b.n	8001d6c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002012:	69e3      	ldr	r3, [r4, #28]
 8002014:	4a17      	ldr	r2, [pc, #92]	; (8002074 <HAL_RCC_OscConfig+0x32c>)
 8002016:	4013      	ands	r3, r2
 8002018:	61e3      	str	r3, [r4, #28]
 800201a:	e6a7      	b.n	8001d6c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800201c:	f7ff fa80 	bl	8001520 <HAL_GetTick>
 8002020:	1bc0      	subs	r0, r0, r7
 8002022:	2802      	cmp	r0, #2
 8002024:	d800      	bhi.n	8002028 <HAL_RCC_OscConfig+0x2e0>
 8002026:	e6b4      	b.n	8001d92 <HAL_RCC_OscConfig+0x4a>
 8002028:	e6f4      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800202a:	3205      	adds	r2, #5
 800202c:	d103      	bne.n	8002036 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_HSI14ADC_ENABLE();
 800202e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002030:	439a      	bics	r2, r3
 8002032:	6362      	str	r2, [r4, #52]	; 0x34
 8002034:	e6b1      	b.n	8001d9a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8002036:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002038:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 800203a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 800203c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 800203e:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8002040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002042:	4393      	bics	r3, r2
 8002044:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002046:	f7ff fa6b 	bl	8001520 <HAL_GetTick>
 800204a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800204c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800204e:	4233      	tst	r3, r6
 8002050:	d100      	bne.n	8002054 <HAL_RCC_OscConfig+0x30c>
 8002052:	e6a9      	b.n	8001da8 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002054:	f7ff fa64 	bl	8001520 <HAL_GetTick>
 8002058:	1bc0      	subs	r0, r0, r7
 800205a:	2802      	cmp	r0, #2
 800205c:	d9f6      	bls.n	800204c <HAL_RCC_OscConfig+0x304>
 800205e:	e6d9      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
 8002060:	40021000 	.word	0x40021000
 8002064:	fffeffff 	.word	0xfffeffff
 8002068:	fffbffff 	.word	0xfffbffff
 800206c:	40007000 	.word	0x40007000
 8002070:	00001388 	.word	0x00001388
 8002074:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002078:	220c      	movs	r2, #12
 800207a:	4c26      	ldr	r4, [pc, #152]	; (8002114 <HAL_RCC_OscConfig+0x3cc>)
      return HAL_ERROR;
 800207c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800207e:	6863      	ldr	r3, [r4, #4]
 8002080:	4013      	ands	r3, r2
 8002082:	2b08      	cmp	r3, #8
 8002084:	d100      	bne.n	8002088 <HAL_RCC_OscConfig+0x340>
 8002086:	e6ae      	b.n	8001de6 <HAL_RCC_OscConfig+0x9e>
        __HAL_RCC_PLL_DISABLE();
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	4a23      	ldr	r2, [pc, #140]	; (8002118 <HAL_RCC_OscConfig+0x3d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002090:	2902      	cmp	r1, #2
 8002092:	d12f      	bne.n	80020f4 <HAL_RCC_OscConfig+0x3ac>
        tickstart = HAL_GetTick();
 8002094:	f7ff fa44 	bl	8001520 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002098:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800209a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209c:	04b6      	lsls	r6, r6, #18
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	4233      	tst	r3, r6
 80020a2:	d121      	bne.n	80020e8 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a4:	220f      	movs	r2, #15
 80020a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020a8:	4393      	bics	r3, r2
 80020aa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80020ac:	4313      	orrs	r3, r2
 80020ae:	62e3      	str	r3, [r4, #44]	; 0x2c
 80020b0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80020b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80020b4:	6862      	ldr	r2, [r4, #4]
 80020b6:	430b      	orrs	r3, r1
 80020b8:	4918      	ldr	r1, [pc, #96]	; (800211c <HAL_RCC_OscConfig+0x3d4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020ba:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020bc:	400a      	ands	r2, r1
 80020be:	4313      	orrs	r3, r2
 80020c0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	6822      	ldr	r2, [r4, #0]
 80020c6:	045b      	lsls	r3, r3, #17
 80020c8:	4313      	orrs	r3, r2
 80020ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020cc:	f7ff fa28 	bl	8001520 <HAL_GetTick>
 80020d0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020d2:	04ad      	lsls	r5, r5, #18
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	422b      	tst	r3, r5
 80020d8:	d000      	beq.n	80020dc <HAL_RCC_OscConfig+0x394>
 80020da:	e669      	b.n	8001db0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020dc:	f7ff fa20 	bl	8001520 <HAL_GetTick>
 80020e0:	1b80      	subs	r0, r0, r6
 80020e2:	2802      	cmp	r0, #2
 80020e4:	d9f6      	bls.n	80020d4 <HAL_RCC_OscConfig+0x38c>
 80020e6:	e695      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e8:	f7ff fa1a 	bl	8001520 <HAL_GetTick>
 80020ec:	1bc0      	subs	r0, r0, r7
 80020ee:	2802      	cmp	r0, #2
 80020f0:	d9d5      	bls.n	800209e <HAL_RCC_OscConfig+0x356>
 80020f2:	e68f      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 80020f4:	f7ff fa14 	bl	8001520 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 80020fa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020fc:	04ad      	lsls	r5, r5, #18
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	422b      	tst	r3, r5
 8002102:	d100      	bne.n	8002106 <HAL_RCC_OscConfig+0x3be>
 8002104:	e654      	b.n	8001db0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff fa0b 	bl	8001520 <HAL_GetTick>
 800210a:	1b80      	subs	r0, r0, r6
 800210c:	2802      	cmp	r0, #2
 800210e:	d9f6      	bls.n	80020fe <HAL_RCC_OscConfig+0x3b6>
 8002110:	e680      	b.n	8001e14 <HAL_RCC_OscConfig+0xcc>
 8002112:	46c0      	nop			; (mov r8, r8)
 8002114:	40021000 	.word	0x40021000
 8002118:	feffffff 	.word	0xfeffffff
 800211c:	ffc27fff 	.word	0xffc27fff

08002120 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002122:	4d12      	ldr	r5, [pc, #72]	; (800216c <HAL_RCC_GetSysClockFreq+0x4c>)
{
 8002124:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002126:	2210      	movs	r2, #16
 8002128:	0029      	movs	r1, r5
 800212a:	4668      	mov	r0, sp
 800212c:	f000 fa62 	bl	80025f4 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002130:	0029      	movs	r1, r5
 8002132:	ac04      	add	r4, sp, #16
 8002134:	3110      	adds	r1, #16
 8002136:	2210      	movs	r2, #16
 8002138:	0020      	movs	r0, r4
 800213a:	f000 fa5b 	bl	80025f4 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800213e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8002140:	490b      	ldr	r1, [pc, #44]	; (8002170 <HAL_RCC_GetSysClockFreq+0x50>)
 8002142:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002144:	401a      	ands	r2, r3
 8002146:	2a08      	cmp	r2, #8
 8002148:	d10d      	bne.n	8002166 <HAL_RCC_GetSysClockFreq+0x46>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800214a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800214c:	210f      	movs	r1, #15
 800214e:	4668      	mov	r0, sp
 8002150:	0c9b      	lsrs	r3, r3, #18
 8002152:	400b      	ands	r3, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002154:	400a      	ands	r2, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002156:	5cc5      	ldrb	r5, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002158:	5ca1      	ldrb	r1, [r4, r2]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <HAL_RCC_GetSysClockFreq+0x54>)
 800215c:	f7fd ffde 	bl	800011c <__udivsi3>
 8002160:	4368      	muls	r0, r5
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002162:	b009      	add	sp, #36	; 0x24
 8002164:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <HAL_RCC_GetSysClockFreq+0x54>)
  return sysclockfreq;
 8002168:	e7fb      	b.n	8002162 <HAL_RCC_GetSysClockFreq+0x42>
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	08003494 	.word	0x08003494
 8002170:	40021000 	.word	0x40021000
 8002174:	007a1200 	.word	0x007a1200

08002178 <HAL_RCC_ClockConfig>:
{
 8002178:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800217a:	2201      	movs	r2, #1
 800217c:	4c43      	ldr	r4, [pc, #268]	; (800228c <HAL_RCC_ClockConfig+0x114>)
{
 800217e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002180:	6823      	ldr	r3, [r4, #0]
{
 8002182:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002184:	4013      	ands	r3, r2
 8002186:	428b      	cmp	r3, r1
 8002188:	d31c      	bcc.n	80021c4 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800218a:	6832      	ldr	r2, [r6, #0]
 800218c:	0793      	lsls	r3, r2, #30
 800218e:	d423      	bmi.n	80021d8 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002190:	07d3      	lsls	r3, r2, #31
 8002192:	d429      	bmi.n	80021e8 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002194:	2301      	movs	r3, #1
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	401a      	ands	r2, r3
 800219a:	4297      	cmp	r7, r2
 800219c:	d367      	bcc.n	800226e <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219e:	6833      	ldr	r3, [r6, #0]
 80021a0:	4c3b      	ldr	r4, [pc, #236]	; (8002290 <HAL_RCC_ClockConfig+0x118>)
 80021a2:	075b      	lsls	r3, r3, #29
 80021a4:	d46a      	bmi.n	800227c <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021a6:	f7ff ffbb 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80021aa:	6863      	ldr	r3, [r4, #4]
 80021ac:	4a39      	ldr	r2, [pc, #228]	; (8002294 <HAL_RCC_ClockConfig+0x11c>)
 80021ae:	061b      	lsls	r3, r3, #24
 80021b0:	0f1b      	lsrs	r3, r3, #28
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	40d8      	lsrs	r0, r3
 80021b6:	4b38      	ldr	r3, [pc, #224]	; (8002298 <HAL_RCC_ClockConfig+0x120>)
 80021b8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021ba:	2003      	movs	r0, #3
 80021bc:	f7ff f985 	bl	80014ca <HAL_InitTick>
  return HAL_OK;
 80021c0:	2000      	movs	r0, #0
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	4393      	bics	r3, r2
 80021c8:	430b      	orrs	r3, r1
 80021ca:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	4013      	ands	r3, r2
 80021d0:	4299      	cmp	r1, r3
 80021d2:	d0da      	beq.n	800218a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 80021d4:	2001      	movs	r0, #1
}
 80021d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d8:	20f0      	movs	r0, #240	; 0xf0
 80021da:	492d      	ldr	r1, [pc, #180]	; (8002290 <HAL_RCC_ClockConfig+0x118>)
 80021dc:	684b      	ldr	r3, [r1, #4]
 80021de:	4383      	bics	r3, r0
 80021e0:	68b0      	ldr	r0, [r6, #8]
 80021e2:	4303      	orrs	r3, r0
 80021e4:	604b      	str	r3, [r1, #4]
 80021e6:	e7d3      	b.n	8002190 <HAL_RCC_ClockConfig+0x18>
 80021e8:	4d29      	ldr	r5, [pc, #164]	; (8002290 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ea:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ec:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ee:	2a01      	cmp	r2, #1
 80021f0:	d11a      	bne.n	8002228 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	039b      	lsls	r3, r3, #14
 80021f4:	d5ee      	bpl.n	80021d4 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	2103      	movs	r1, #3
 80021f8:	686b      	ldr	r3, [r5, #4]
 80021fa:	438b      	bics	r3, r1
 80021fc:	4313      	orrs	r3, r2
 80021fe:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8002200:	f7ff f98e 	bl	8001520 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002204:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002206:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002208:	2b01      	cmp	r3, #1
 800220a:	d115      	bne.n	8002238 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800220c:	220c      	movs	r2, #12
 800220e:	686b      	ldr	r3, [r5, #4]
 8002210:	4013      	ands	r3, r2
 8002212:	2b04      	cmp	r3, #4
 8002214:	d0be      	beq.n	8002194 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002216:	f7ff f983 	bl	8001520 <HAL_GetTick>
 800221a:	9b01      	ldr	r3, [sp, #4]
 800221c:	1ac0      	subs	r0, r0, r3
 800221e:	4b1f      	ldr	r3, [pc, #124]	; (800229c <HAL_RCC_ClockConfig+0x124>)
 8002220:	4298      	cmp	r0, r3
 8002222:	d9f3      	bls.n	800220c <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8002224:	2003      	movs	r0, #3
 8002226:	e7d6      	b.n	80021d6 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002228:	2a02      	cmp	r2, #2
 800222a:	d102      	bne.n	8002232 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222c:	019b      	lsls	r3, r3, #6
 800222e:	d4e2      	bmi.n	80021f6 <HAL_RCC_ClockConfig+0x7e>
 8002230:	e7d0      	b.n	80021d4 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	079b      	lsls	r3, r3, #30
 8002234:	d4df      	bmi.n	80021f6 <HAL_RCC_ClockConfig+0x7e>
 8002236:	e7cd      	b.n	80021d4 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002238:	2b02      	cmp	r3, #2
 800223a:	d012      	beq.n	8002262 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800223c:	220c      	movs	r2, #12
 800223e:	686b      	ldr	r3, [r5, #4]
 8002240:	4213      	tst	r3, r2
 8002242:	d0a7      	beq.n	8002194 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7ff f96c 	bl	8001520 <HAL_GetTick>
 8002248:	9b01      	ldr	r3, [sp, #4]
 800224a:	1ac0      	subs	r0, r0, r3
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <HAL_RCC_ClockConfig+0x124>)
 800224e:	4298      	cmp	r0, r3
 8002250:	d9f4      	bls.n	800223c <HAL_RCC_ClockConfig+0xc4>
 8002252:	e7e7      	b.n	8002224 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7ff f964 	bl	8001520 <HAL_GetTick>
 8002258:	9b01      	ldr	r3, [sp, #4]
 800225a:	1ac0      	subs	r0, r0, r3
 800225c:	4b0f      	ldr	r3, [pc, #60]	; (800229c <HAL_RCC_ClockConfig+0x124>)
 800225e:	4298      	cmp	r0, r3
 8002260:	d8e0      	bhi.n	8002224 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002262:	220c      	movs	r2, #12
 8002264:	686b      	ldr	r3, [r5, #4]
 8002266:	4013      	ands	r3, r2
 8002268:	2b08      	cmp	r3, #8
 800226a:	d1f3      	bne.n	8002254 <HAL_RCC_ClockConfig+0xdc>
 800226c:	e792      	b.n	8002194 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	6822      	ldr	r2, [r4, #0]
 8002270:	439a      	bics	r2, r3
 8002272:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002274:	6822      	ldr	r2, [r4, #0]
 8002276:	421a      	tst	r2, r3
 8002278:	d1ac      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x5c>
 800227a:	e790      	b.n	800219e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800227c:	6863      	ldr	r3, [r4, #4]
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_RCC_ClockConfig+0x128>)
 8002280:	4013      	ands	r3, r2
 8002282:	68f2      	ldr	r2, [r6, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	6063      	str	r3, [r4, #4]
 8002288:	e78d      	b.n	80021a6 <HAL_RCC_ClockConfig+0x2e>
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	40022000 	.word	0x40022000
 8002290:	40021000 	.word	0x40021000
 8002294:	0800356b 	.word	0x0800356b
 8002298:	20000000 	.word	0x20000000
 800229c:	00001388 	.word	0x00001388
 80022a0:	fffff8ff 	.word	0xfffff8ff

080022a4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80022a4:	4b01      	ldr	r3, [pc, #4]	; (80022ac <HAL_RCC_GetHCLKFreq+0x8>)
 80022a6:	6818      	ldr	r0, [r3, #0]
}
 80022a8:	4770      	bx	lr
 80022aa:	46c0      	nop			; (mov r8, r8)
 80022ac:	20000000 	.word	0x20000000

080022b0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80022b0:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80022b2:	4a05      	ldr	r2, [pc, #20]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	055b      	lsls	r3, r3, #21
 80022b8:	0f5b      	lsrs	r3, r3, #29
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	4a03      	ldr	r2, [pc, #12]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80022be:	6810      	ldr	r0, [r2, #0]
 80022c0:	40d8      	lsrs	r0, r3
}    
 80022c2:	4770      	bx	lr
 80022c4:	40021000 	.word	0x40021000
 80022c8:	0800357b 	.word	0x0800357b
 80022cc:	20000000 	.word	0x20000000

080022d0 <HAL_UART_MspInit>:
 80022d0:	4770      	bx	lr

080022d2 <HAL_UART_MspDeInit>:
 80022d2:	4770      	bx	lr

080022d4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	0005      	movs	r5, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80022d8:	2001      	movs	r0, #1
  if(huart == NULL)
 80022da:	2d00      	cmp	r5, #0
 80022dc:	d016      	beq.n	800230c <HAL_UART_DeInit+0x38>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80022de:	002e      	movs	r6, r5
 80022e0:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 80022e2:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 80022e4:	3669      	adds	r6, #105	; 0x69
 80022e6:	7033      	strb	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 80022e8:	682b      	ldr	r3, [r5, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	4382      	bics	r2, r0
 80022ee:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
  huart->Instance->CR3 = 0x0U;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80022f0:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 80022f2:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80022f4:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80022f6:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80022f8:	f7ff ffeb 	bl	80022d2 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState    = HAL_UART_STATE_RESET;
  huart->RxState   = HAL_UART_STATE_RESET;
 80022fc:	002b      	movs	r3, r5

  /* Process Unlock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 80022fe:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002300:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->RxState   = HAL_UART_STATE_RESET;
 8002302:	336a      	adds	r3, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8002304:	3568      	adds	r5, #104	; 0x68
  huart->gState    = HAL_UART_STATE_RESET;
 8002306:	7034      	strb	r4, [r6, #0]
  huart->RxState   = HAL_UART_STATE_RESET;
 8002308:	701c      	strb	r4, [r3, #0]
  __HAL_UNLOCK(huart);
 800230a:	702c      	strb	r4, [r5, #0]
}
 800230c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002310:	b570      	push	{r4, r5, r6, lr}
 8002312:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002314:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002316:	69c2      	ldr	r2, [r0, #28]
 8002318:	6883      	ldr	r3, [r0, #8]
 800231a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800231c:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800231e:	4303      	orrs	r3, r0
 8002320:	6960      	ldr	r0, [r4, #20]
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002322:	4e42      	ldr	r6, [pc, #264]	; (800242c <UART_SetConfig+0x11c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002324:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002326:	4842      	ldr	r0, [pc, #264]	; (8002430 <UART_SetConfig+0x120>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002328:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800232a:	4001      	ands	r1, r0
 800232c:	430b      	orrs	r3, r1
 800232e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002330:	686b      	ldr	r3, [r5, #4]
 8002332:	4940      	ldr	r1, [pc, #256]	; (8002434 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002334:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002336:	400b      	ands	r3, r1
 8002338:	68e1      	ldr	r1, [r4, #12]
 800233a:	430b      	orrs	r3, r1
 800233c:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800233e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002340:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002342:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002344:	483c      	ldr	r0, [pc, #240]	; (8002438 <UART_SetConfig+0x128>)
 8002346:	4001      	ands	r1, r0
 8002348:	430b      	orrs	r3, r1
 800234a:	60ab      	str	r3, [r5, #8]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002350:	42b5      	cmp	r5, r6
 8002352:	d110      	bne.n	8002376 <UART_SetConfig+0x66>
 8002354:	2003      	movs	r0, #3
 8002356:	4939      	ldr	r1, [pc, #228]	; (800243c <UART_SetConfig+0x12c>)
 8002358:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800235a:	4001      	ands	r1, r0
 800235c:	4838      	ldr	r0, [pc, #224]	; (8002440 <UART_SetConfig+0x130>)
 800235e:	5c40      	ldrb	r0, [r0, r1]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002360:	429a      	cmp	r2, r3
 8002362:	d137      	bne.n	80023d4 <UART_SetConfig+0xc4>
  {
    switch (clocksource)
 8002364:	2808      	cmp	r0, #8
 8002366:	d832      	bhi.n	80023ce <UART_SetConfig+0xbe>
 8002368:	f7fd fece 	bl	8000108 <__gnu_thumb1_case_uqi>
 800236c:	31163110 	.word	0x31163110
 8002370:	31313129 	.word	0x31313129
 8002374:	2c          	.byte	0x2c
 8002375:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002376:	4933      	ldr	r1, [pc, #204]	; (8002444 <UART_SetConfig+0x134>)
 8002378:	428d      	cmp	r5, r1
 800237a:	d005      	beq.n	8002388 <UART_SetConfig+0x78>
 800237c:	4932      	ldr	r1, [pc, #200]	; (8002448 <UART_SetConfig+0x138>)
 800237e:	428d      	cmp	r5, r1
 8002380:	d002      	beq.n	8002388 <UART_SetConfig+0x78>
 8002382:	4932      	ldr	r1, [pc, #200]	; (800244c <UART_SetConfig+0x13c>)
 8002384:	428d      	cmp	r5, r1
 8002386:	d14c      	bne.n	8002422 <UART_SetConfig+0x112>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002388:	429a      	cmp	r2, r3
 800238a:	d12c      	bne.n	80023e6 <UART_SetConfig+0xd6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800238c:	f7ff ff90 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002390:	6863      	ldr	r3, [r4, #4]
 8002392:	0040      	lsls	r0, r0, #1
 8002394:	085b      	lsrs	r3, r3, #1
 8002396:	e002      	b.n	800239e <UART_SetConfig+0x8e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002398:	6863      	ldr	r3, [r4, #4]
 800239a:	0858      	lsrs	r0, r3, #1
 800239c:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <UART_SetConfig+0x140>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800239e:	18c0      	adds	r0, r0, r3
 80023a0:	6861      	ldr	r1, [r4, #4]
 80023a2:	f7fd febb 	bl	800011c <__udivsi3>
 80023a6:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80023a8:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80023aa:	220f      	movs	r2, #15
 80023ac:	0019      	movs	r1, r3
 80023ae:	4391      	bics	r1, r2
 80023b0:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023b2:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 80023b4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023b6:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 80023bc:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80023be:	f7ff feaf 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80023c2:	e7e5      	b.n	8002390 <UART_SetConfig+0x80>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80023c4:	6863      	ldr	r3, [r4, #4]
 80023c6:	0858      	lsrs	r0, r3, #1
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	025b      	lsls	r3, r3, #9
 80023cc:	e7e7      	b.n	800239e <UART_SetConfig+0x8e>
        ret = HAL_ERROR;
 80023ce:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	e7ea      	b.n	80023aa <UART_SetConfig+0x9a>
    switch (clocksource)
 80023d4:	2808      	cmp	r0, #8
 80023d6:	d826      	bhi.n	8002426 <UART_SetConfig+0x116>
 80023d8:	f7fd fe96 	bl	8000108 <__gnu_thumb1_case_uqi>
 80023dc:	25102505 	.word	0x25102505
 80023e0:	25252519 	.word	0x25252519
 80023e4:	1e          	.byte	0x1e
 80023e5:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80023e6:	f7ff ff63 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 80023ea:	6861      	ldr	r1, [r4, #4]
 80023ec:	084b      	lsrs	r3, r1, #1
 80023ee:	1818      	adds	r0, r3, r0
 80023f0:	f7fd fe94 	bl	800011c <__udivsi3>
 80023f4:	b280      	uxth	r0, r0
 80023f6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80023f8:	2000      	movs	r0, #0
        break;
 80023fa:	e7df      	b.n	80023bc <UART_SetConfig+0xac>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80023fc:	6861      	ldr	r1, [r4, #4]
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <UART_SetConfig+0x144>)
 8002400:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002402:	18c0      	adds	r0, r0, r3
 8002404:	f7fd fe8a 	bl	800011c <__udivsi3>
 8002408:	b280      	uxth	r0, r0
 800240a:	60f0      	str	r0, [r6, #12]
 800240c:	e7f4      	b.n	80023f8 <UART_SetConfig+0xe8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800240e:	f7ff fe87 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8002412:	6861      	ldr	r1, [r4, #4]
 8002414:	084b      	lsrs	r3, r1, #1
 8002416:	e7f4      	b.n	8002402 <UART_SetConfig+0xf2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	6861      	ldr	r1, [r4, #4]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	0848      	lsrs	r0, r1, #1
 8002420:	e7ef      	b.n	8002402 <UART_SetConfig+0xf2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002422:	429a      	cmp	r2, r3
 8002424:	d0d3      	beq.n	80023ce <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8002426:	2001      	movs	r0, #1
  return ret;
 8002428:	e7c8      	b.n	80023bc <UART_SetConfig+0xac>
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	40013800 	.word	0x40013800
 8002430:	efff69f3 	.word	0xefff69f3
 8002434:	ffffcfff 	.word	0xffffcfff
 8002438:	fffff4ff 	.word	0xfffff4ff
 800243c:	40021000 	.word	0x40021000
 8002440:	08003583 	.word	0x08003583
 8002444:	40004400 	.word	0x40004400
 8002448:	40004800 	.word	0x40004800
 800244c:	40004c00 	.word	0x40004c00
 8002450:	00f42400 	.word	0x00f42400
 8002454:	007a1200 	.word	0x007a1200

08002458 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002458:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800245a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800245c:	07da      	lsls	r2, r3, #31
 800245e:	d506      	bpl.n	800246e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002460:	6801      	ldr	r1, [r0, #0]
 8002462:	4c28      	ldr	r4, [pc, #160]	; (8002504 <UART_AdvFeatureConfig+0xac>)
 8002464:	684a      	ldr	r2, [r1, #4]
 8002466:	4022      	ands	r2, r4
 8002468:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800246a:	4322      	orrs	r2, r4
 800246c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800246e:	079a      	lsls	r2, r3, #30
 8002470:	d506      	bpl.n	8002480 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002472:	6801      	ldr	r1, [r0, #0]
 8002474:	4c24      	ldr	r4, [pc, #144]	; (8002508 <UART_AdvFeatureConfig+0xb0>)
 8002476:	684a      	ldr	r2, [r1, #4]
 8002478:	4022      	ands	r2, r4
 800247a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800247c:	4322      	orrs	r2, r4
 800247e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002480:	075a      	lsls	r2, r3, #29
 8002482:	d506      	bpl.n	8002492 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002484:	6801      	ldr	r1, [r0, #0]
 8002486:	4c21      	ldr	r4, [pc, #132]	; (800250c <UART_AdvFeatureConfig+0xb4>)
 8002488:	684a      	ldr	r2, [r1, #4]
 800248a:	4022      	ands	r2, r4
 800248c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800248e:	4322      	orrs	r2, r4
 8002490:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002492:	071a      	lsls	r2, r3, #28
 8002494:	d506      	bpl.n	80024a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002496:	6801      	ldr	r1, [r0, #0]
 8002498:	4c1d      	ldr	r4, [pc, #116]	; (8002510 <UART_AdvFeatureConfig+0xb8>)
 800249a:	684a      	ldr	r2, [r1, #4]
 800249c:	4022      	ands	r2, r4
 800249e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80024a0:	4322      	orrs	r2, r4
 80024a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024a4:	06da      	lsls	r2, r3, #27
 80024a6:	d506      	bpl.n	80024b6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024a8:	6801      	ldr	r1, [r0, #0]
 80024aa:	4c1a      	ldr	r4, [pc, #104]	; (8002514 <UART_AdvFeatureConfig+0xbc>)
 80024ac:	688a      	ldr	r2, [r1, #8]
 80024ae:	4022      	ands	r2, r4
 80024b0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80024b2:	4322      	orrs	r2, r4
 80024b4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024b6:	069a      	lsls	r2, r3, #26
 80024b8:	d506      	bpl.n	80024c8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024ba:	6801      	ldr	r1, [r0, #0]
 80024bc:	4c16      	ldr	r4, [pc, #88]	; (8002518 <UART_AdvFeatureConfig+0xc0>)
 80024be:	688a      	ldr	r2, [r1, #8]
 80024c0:	4022      	ands	r2, r4
 80024c2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80024c4:	4322      	orrs	r2, r4
 80024c6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80024c8:	065a      	lsls	r2, r3, #25
 80024ca:	d510      	bpl.n	80024ee <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80024cc:	6801      	ldr	r1, [r0, #0]
 80024ce:	4d13      	ldr	r5, [pc, #76]	; (800251c <UART_AdvFeatureConfig+0xc4>)
 80024d0:	684a      	ldr	r2, [r1, #4]
 80024d2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80024d4:	402a      	ands	r2, r5
 80024d6:	4322      	orrs	r2, r4
 80024d8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	0352      	lsls	r2, r2, #13
 80024de:	4294      	cmp	r4, r2
 80024e0:	d105      	bne.n	80024ee <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80024e2:	684a      	ldr	r2, [r1, #4]
 80024e4:	4c0e      	ldr	r4, [pc, #56]	; (8002520 <UART_AdvFeatureConfig+0xc8>)
 80024e6:	4022      	ands	r2, r4
 80024e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80024ea:	4322      	orrs	r2, r4
 80024ec:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80024ee:	061b      	lsls	r3, r3, #24
 80024f0:	d506      	bpl.n	8002500 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80024f2:	6802      	ldr	r2, [r0, #0]
 80024f4:	490b      	ldr	r1, [pc, #44]	; (8002524 <UART_AdvFeatureConfig+0xcc>)
 80024f6:	6853      	ldr	r3, [r2, #4]
 80024f8:	400b      	ands	r3, r1
 80024fa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80024fc:	430b      	orrs	r3, r1
 80024fe:	6053      	str	r3, [r2, #4]
  }
}
 8002500:	bd30      	pop	{r4, r5, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	fffdffff 	.word	0xfffdffff
 8002508:	fffeffff 	.word	0xfffeffff
 800250c:	fffbffff 	.word	0xfffbffff
 8002510:	ffff7fff 	.word	0xffff7fff
 8002514:	ffffefff 	.word	0xffffefff
 8002518:	ffffdfff 	.word	0xffffdfff
 800251c:	ffefffff 	.word	0xffefffff
 8002520:	ff9fffff 	.word	0xff9fffff
 8002524:	fff7ffff 	.word	0xfff7ffff

08002528 <HAL_UART_Init>:
{
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 800252c:	d101      	bne.n	8002532 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800252e:	2001      	movs	r0, #1
}
 8002530:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8002532:	0005      	movs	r5, r0
 8002534:	3569      	adds	r5, #105	; 0x69
 8002536:	782b      	ldrb	r3, [r5, #0]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d104      	bne.n	8002548 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800253e:	0002      	movs	r2, r0
 8002540:	3268      	adds	r2, #104	; 0x68
 8002542:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8002544:	f7ff fec4 	bl	80022d0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002548:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800254a:	2101      	movs	r1, #1
 800254c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800254e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8002550:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002552:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8002554:	438b      	bics	r3, r1
 8002556:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002558:	f7ff feda 	bl	8002310 <UART_SetConfig>
 800255c:	2801      	cmp	r0, #1
 800255e:	d0e6      	beq.n	800252e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8002566:	0020      	movs	r0, r4
 8002568:	f7ff ff76 	bl	8002458 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	490b      	ldr	r1, [pc, #44]	; (800259c <HAL_UART_Init+0x74>)
 8002570:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002572:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002574:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002576:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002578:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	438a      	bics	r2, r1
 800257e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002580:	2201      	movs	r2, #1
 8002582:	6819      	ldr	r1, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8002588:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 800258a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800258c:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 800258e:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002590:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8002592:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8002594:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8002596:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002598:	e7ca      	b.n	8002530 <HAL_UART_Init+0x8>
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	fffff7ff 	.word	0xfffff7ff

080025a0 <__errno>:
 80025a0:	4b01      	ldr	r3, [pc, #4]	; (80025a8 <__errno+0x8>)
 80025a2:	6818      	ldr	r0, [r3, #0]
 80025a4:	4770      	bx	lr
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	20000004 	.word	0x20000004

080025ac <__libc_init_array>:
 80025ac:	b570      	push	{r4, r5, r6, lr}
 80025ae:	2600      	movs	r6, #0
 80025b0:	4d0c      	ldr	r5, [pc, #48]	; (80025e4 <__libc_init_array+0x38>)
 80025b2:	4c0d      	ldr	r4, [pc, #52]	; (80025e8 <__libc_init_array+0x3c>)
 80025b4:	1b64      	subs	r4, r4, r5
 80025b6:	10a4      	asrs	r4, r4, #2
 80025b8:	42a6      	cmp	r6, r4
 80025ba:	d109      	bne.n	80025d0 <__libc_init_array+0x24>
 80025bc:	2600      	movs	r6, #0
 80025be:	f000 ff5d 	bl	800347c <_init>
 80025c2:	4d0a      	ldr	r5, [pc, #40]	; (80025ec <__libc_init_array+0x40>)
 80025c4:	4c0a      	ldr	r4, [pc, #40]	; (80025f0 <__libc_init_array+0x44>)
 80025c6:	1b64      	subs	r4, r4, r5
 80025c8:	10a4      	asrs	r4, r4, #2
 80025ca:	42a6      	cmp	r6, r4
 80025cc:	d105      	bne.n	80025da <__libc_init_array+0x2e>
 80025ce:	bd70      	pop	{r4, r5, r6, pc}
 80025d0:	00b3      	lsls	r3, r6, #2
 80025d2:	58eb      	ldr	r3, [r5, r3]
 80025d4:	4798      	blx	r3
 80025d6:	3601      	adds	r6, #1
 80025d8:	e7ee      	b.n	80025b8 <__libc_init_array+0xc>
 80025da:	00b3      	lsls	r3, r6, #2
 80025dc:	58eb      	ldr	r3, [r5, r3]
 80025de:	4798      	blx	r3
 80025e0:	3601      	adds	r6, #1
 80025e2:	e7f2      	b.n	80025ca <__libc_init_array+0x1e>
 80025e4:	08003620 	.word	0x08003620
 80025e8:	08003620 	.word	0x08003620
 80025ec:	08003620 	.word	0x08003620
 80025f0:	08003624 	.word	0x08003624

080025f4 <memcpy>:
 80025f4:	2300      	movs	r3, #0
 80025f6:	b510      	push	{r4, lr}
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d100      	bne.n	80025fe <memcpy+0xa>
 80025fc:	bd10      	pop	{r4, pc}
 80025fe:	5ccc      	ldrb	r4, [r1, r3]
 8002600:	54c4      	strb	r4, [r0, r3]
 8002602:	3301      	adds	r3, #1
 8002604:	e7f8      	b.n	80025f8 <memcpy+0x4>

08002606 <memset>:
 8002606:	0003      	movs	r3, r0
 8002608:	1882      	adds	r2, r0, r2
 800260a:	4293      	cmp	r3, r2
 800260c:	d100      	bne.n	8002610 <memset+0xa>
 800260e:	4770      	bx	lr
 8002610:	7019      	strb	r1, [r3, #0]
 8002612:	3301      	adds	r3, #1
 8002614:	e7f9      	b.n	800260a <memset+0x4>
	...

08002618 <iprintf>:
 8002618:	b40f      	push	{r0, r1, r2, r3}
 800261a:	4b0b      	ldr	r3, [pc, #44]	; (8002648 <iprintf+0x30>)
 800261c:	b513      	push	{r0, r1, r4, lr}
 800261e:	681c      	ldr	r4, [r3, #0]
 8002620:	2c00      	cmp	r4, #0
 8002622:	d005      	beq.n	8002630 <iprintf+0x18>
 8002624:	69a3      	ldr	r3, [r4, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <iprintf+0x18>
 800262a:	0020      	movs	r0, r4
 800262c:	f000 f850 	bl	80026d0 <__sinit>
 8002630:	ab05      	add	r3, sp, #20
 8002632:	9a04      	ldr	r2, [sp, #16]
 8002634:	68a1      	ldr	r1, [r4, #8]
 8002636:	0020      	movs	r0, r4
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	f000 f965 	bl	8002908 <_vfiprintf_r>
 800263e:	bc16      	pop	{r1, r2, r4}
 8002640:	bc08      	pop	{r3}
 8002642:	b004      	add	sp, #16
 8002644:	4718      	bx	r3
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	20000004 	.word	0x20000004

0800264c <_cleanup_r>:
 800264c:	b510      	push	{r4, lr}
 800264e:	4902      	ldr	r1, [pc, #8]	; (8002658 <_cleanup_r+0xc>)
 8002650:	f000 f8b2 	bl	80027b8 <_fwalk_reent>
 8002654:	bd10      	pop	{r4, pc}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	08003205 	.word	0x08003205

0800265c <std.isra.0>:
 800265c:	2300      	movs	r3, #0
 800265e:	b510      	push	{r4, lr}
 8002660:	0004      	movs	r4, r0
 8002662:	6003      	str	r3, [r0, #0]
 8002664:	6043      	str	r3, [r0, #4]
 8002666:	6083      	str	r3, [r0, #8]
 8002668:	8181      	strh	r1, [r0, #12]
 800266a:	6643      	str	r3, [r0, #100]	; 0x64
 800266c:	81c2      	strh	r2, [r0, #14]
 800266e:	6103      	str	r3, [r0, #16]
 8002670:	6143      	str	r3, [r0, #20]
 8002672:	6183      	str	r3, [r0, #24]
 8002674:	0019      	movs	r1, r3
 8002676:	2208      	movs	r2, #8
 8002678:	305c      	adds	r0, #92	; 0x5c
 800267a:	f7ff ffc4 	bl	8002606 <memset>
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <std.isra.0+0x38>)
 8002680:	6224      	str	r4, [r4, #32]
 8002682:	6263      	str	r3, [r4, #36]	; 0x24
 8002684:	4b04      	ldr	r3, [pc, #16]	; (8002698 <std.isra.0+0x3c>)
 8002686:	62a3      	str	r3, [r4, #40]	; 0x28
 8002688:	4b04      	ldr	r3, [pc, #16]	; (800269c <std.isra.0+0x40>)
 800268a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <std.isra.0+0x44>)
 800268e:	6323      	str	r3, [r4, #48]	; 0x30
 8002690:	bd10      	pop	{r4, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	08002e75 	.word	0x08002e75
 8002698:	08002e9d 	.word	0x08002e9d
 800269c:	08002ed5 	.word	0x08002ed5
 80026a0:	08002f01 	.word	0x08002f01

080026a4 <__sfmoreglue>:
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	2568      	movs	r5, #104	; 0x68
 80026a8:	1e4a      	subs	r2, r1, #1
 80026aa:	4355      	muls	r5, r2
 80026ac:	000e      	movs	r6, r1
 80026ae:	0029      	movs	r1, r5
 80026b0:	3174      	adds	r1, #116	; 0x74
 80026b2:	f000 f8a3 	bl	80027fc <_malloc_r>
 80026b6:	1e04      	subs	r4, r0, #0
 80026b8:	d008      	beq.n	80026cc <__sfmoreglue+0x28>
 80026ba:	2100      	movs	r1, #0
 80026bc:	002a      	movs	r2, r5
 80026be:	6001      	str	r1, [r0, #0]
 80026c0:	6046      	str	r6, [r0, #4]
 80026c2:	300c      	adds	r0, #12
 80026c4:	60a0      	str	r0, [r4, #8]
 80026c6:	3268      	adds	r2, #104	; 0x68
 80026c8:	f7ff ff9d 	bl	8002606 <memset>
 80026cc:	0020      	movs	r0, r4
 80026ce:	bd70      	pop	{r4, r5, r6, pc}

080026d0 <__sinit>:
 80026d0:	6983      	ldr	r3, [r0, #24]
 80026d2:	b513      	push	{r0, r1, r4, lr}
 80026d4:	0004      	movs	r4, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d128      	bne.n	800272c <__sinit+0x5c>
 80026da:	6483      	str	r3, [r0, #72]	; 0x48
 80026dc:	64c3      	str	r3, [r0, #76]	; 0x4c
 80026de:	6503      	str	r3, [r0, #80]	; 0x50
 80026e0:	4b13      	ldr	r3, [pc, #76]	; (8002730 <__sinit+0x60>)
 80026e2:	4a14      	ldr	r2, [pc, #80]	; (8002734 <__sinit+0x64>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6282      	str	r2, [r0, #40]	; 0x28
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	4298      	cmp	r0, r3
 80026ec:	d101      	bne.n	80026f2 <__sinit+0x22>
 80026ee:	2301      	movs	r3, #1
 80026f0:	6183      	str	r3, [r0, #24]
 80026f2:	0020      	movs	r0, r4
 80026f4:	f000 f820 	bl	8002738 <__sfp>
 80026f8:	6060      	str	r0, [r4, #4]
 80026fa:	0020      	movs	r0, r4
 80026fc:	f000 f81c 	bl	8002738 <__sfp>
 8002700:	60a0      	str	r0, [r4, #8]
 8002702:	0020      	movs	r0, r4
 8002704:	f000 f818 	bl	8002738 <__sfp>
 8002708:	2200      	movs	r2, #0
 800270a:	60e0      	str	r0, [r4, #12]
 800270c:	2104      	movs	r1, #4
 800270e:	6860      	ldr	r0, [r4, #4]
 8002710:	f7ff ffa4 	bl	800265c <std.isra.0>
 8002714:	2201      	movs	r2, #1
 8002716:	2109      	movs	r1, #9
 8002718:	68a0      	ldr	r0, [r4, #8]
 800271a:	f7ff ff9f 	bl	800265c <std.isra.0>
 800271e:	2202      	movs	r2, #2
 8002720:	2112      	movs	r1, #18
 8002722:	68e0      	ldr	r0, [r4, #12]
 8002724:	f7ff ff9a 	bl	800265c <std.isra.0>
 8002728:	2301      	movs	r3, #1
 800272a:	61a3      	str	r3, [r4, #24]
 800272c:	bd13      	pop	{r0, r1, r4, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	08003588 	.word	0x08003588
 8002734:	0800264d 	.word	0x0800264d

08002738 <__sfp>:
 8002738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800273a:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <__sfp+0x7c>)
 800273c:	0007      	movs	r7, r0
 800273e:	681e      	ldr	r6, [r3, #0]
 8002740:	69b3      	ldr	r3, [r6, #24]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d102      	bne.n	800274c <__sfp+0x14>
 8002746:	0030      	movs	r0, r6
 8002748:	f7ff ffc2 	bl	80026d0 <__sinit>
 800274c:	3648      	adds	r6, #72	; 0x48
 800274e:	68b4      	ldr	r4, [r6, #8]
 8002750:	6873      	ldr	r3, [r6, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	d504      	bpl.n	8002760 <__sfp+0x28>
 8002756:	6833      	ldr	r3, [r6, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <__sfp+0x34>
 800275c:	6836      	ldr	r6, [r6, #0]
 800275e:	e7f6      	b.n	800274e <__sfp+0x16>
 8002760:	220c      	movs	r2, #12
 8002762:	5ea5      	ldrsh	r5, [r4, r2]
 8002764:	2d00      	cmp	r5, #0
 8002766:	d00d      	beq.n	8002784 <__sfp+0x4c>
 8002768:	3468      	adds	r4, #104	; 0x68
 800276a:	e7f2      	b.n	8002752 <__sfp+0x1a>
 800276c:	2104      	movs	r1, #4
 800276e:	0038      	movs	r0, r7
 8002770:	f7ff ff98 	bl	80026a4 <__sfmoreglue>
 8002774:	6030      	str	r0, [r6, #0]
 8002776:	2800      	cmp	r0, #0
 8002778:	d1f0      	bne.n	800275c <__sfp+0x24>
 800277a:	230c      	movs	r3, #12
 800277c:	0004      	movs	r4, r0
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	0020      	movs	r0, r4
 8002782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002784:	2301      	movs	r3, #1
 8002786:	0020      	movs	r0, r4
 8002788:	425b      	negs	r3, r3
 800278a:	81e3      	strh	r3, [r4, #14]
 800278c:	3302      	adds	r3, #2
 800278e:	81a3      	strh	r3, [r4, #12]
 8002790:	6665      	str	r5, [r4, #100]	; 0x64
 8002792:	6025      	str	r5, [r4, #0]
 8002794:	60a5      	str	r5, [r4, #8]
 8002796:	6065      	str	r5, [r4, #4]
 8002798:	6125      	str	r5, [r4, #16]
 800279a:	6165      	str	r5, [r4, #20]
 800279c:	61a5      	str	r5, [r4, #24]
 800279e:	2208      	movs	r2, #8
 80027a0:	0029      	movs	r1, r5
 80027a2:	305c      	adds	r0, #92	; 0x5c
 80027a4:	f7ff ff2f 	bl	8002606 <memset>
 80027a8:	6365      	str	r5, [r4, #52]	; 0x34
 80027aa:	63a5      	str	r5, [r4, #56]	; 0x38
 80027ac:	64a5      	str	r5, [r4, #72]	; 0x48
 80027ae:	64e5      	str	r5, [r4, #76]	; 0x4c
 80027b0:	e7e6      	b.n	8002780 <__sfp+0x48>
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	08003588 	.word	0x08003588

080027b8 <_fwalk_reent>:
 80027b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027ba:	0004      	movs	r4, r0
 80027bc:	0007      	movs	r7, r0
 80027be:	2600      	movs	r6, #0
 80027c0:	9101      	str	r1, [sp, #4]
 80027c2:	3448      	adds	r4, #72	; 0x48
 80027c4:	2c00      	cmp	r4, #0
 80027c6:	d101      	bne.n	80027cc <_fwalk_reent+0x14>
 80027c8:	0030      	movs	r0, r6
 80027ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027cc:	6863      	ldr	r3, [r4, #4]
 80027ce:	68a5      	ldr	r5, [r4, #8]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	9b00      	ldr	r3, [sp, #0]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	d501      	bpl.n	80027de <_fwalk_reent+0x26>
 80027da:	6824      	ldr	r4, [r4, #0]
 80027dc:	e7f2      	b.n	80027c4 <_fwalk_reent+0xc>
 80027de:	89ab      	ldrh	r3, [r5, #12]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d908      	bls.n	80027f6 <_fwalk_reent+0x3e>
 80027e4:	220e      	movs	r2, #14
 80027e6:	5eab      	ldrsh	r3, [r5, r2]
 80027e8:	3301      	adds	r3, #1
 80027ea:	d004      	beq.n	80027f6 <_fwalk_reent+0x3e>
 80027ec:	0029      	movs	r1, r5
 80027ee:	0038      	movs	r0, r7
 80027f0:	9b01      	ldr	r3, [sp, #4]
 80027f2:	4798      	blx	r3
 80027f4:	4306      	orrs	r6, r0
 80027f6:	3568      	adds	r5, #104	; 0x68
 80027f8:	e7eb      	b.n	80027d2 <_fwalk_reent+0x1a>
	...

080027fc <_malloc_r>:
 80027fc:	2303      	movs	r3, #3
 80027fe:	b570      	push	{r4, r5, r6, lr}
 8002800:	1ccd      	adds	r5, r1, #3
 8002802:	439d      	bics	r5, r3
 8002804:	3508      	adds	r5, #8
 8002806:	0006      	movs	r6, r0
 8002808:	2d0c      	cmp	r5, #12
 800280a:	d21e      	bcs.n	800284a <_malloc_r+0x4e>
 800280c:	250c      	movs	r5, #12
 800280e:	42a9      	cmp	r1, r5
 8002810:	d81d      	bhi.n	800284e <_malloc_r+0x52>
 8002812:	0030      	movs	r0, r6
 8002814:	f000 fdad 	bl	8003372 <__malloc_lock>
 8002818:	4a25      	ldr	r2, [pc, #148]	; (80028b0 <_malloc_r+0xb4>)
 800281a:	6814      	ldr	r4, [r2, #0]
 800281c:	0021      	movs	r1, r4
 800281e:	2900      	cmp	r1, #0
 8002820:	d119      	bne.n	8002856 <_malloc_r+0x5a>
 8002822:	4c24      	ldr	r4, [pc, #144]	; (80028b4 <_malloc_r+0xb8>)
 8002824:	6823      	ldr	r3, [r4, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <_malloc_r+0x36>
 800282a:	0030      	movs	r0, r6
 800282c:	f000 fb10 	bl	8002e50 <_sbrk_r>
 8002830:	6020      	str	r0, [r4, #0]
 8002832:	0029      	movs	r1, r5
 8002834:	0030      	movs	r0, r6
 8002836:	f000 fb0b 	bl	8002e50 <_sbrk_r>
 800283a:	1c43      	adds	r3, r0, #1
 800283c:	d12c      	bne.n	8002898 <_malloc_r+0x9c>
 800283e:	230c      	movs	r3, #12
 8002840:	0030      	movs	r0, r6
 8002842:	6033      	str	r3, [r6, #0]
 8002844:	f000 fd96 	bl	8003374 <__malloc_unlock>
 8002848:	e003      	b.n	8002852 <_malloc_r+0x56>
 800284a:	2d00      	cmp	r5, #0
 800284c:	dadf      	bge.n	800280e <_malloc_r+0x12>
 800284e:	230c      	movs	r3, #12
 8002850:	6033      	str	r3, [r6, #0]
 8002852:	2000      	movs	r0, #0
 8002854:	bd70      	pop	{r4, r5, r6, pc}
 8002856:	680b      	ldr	r3, [r1, #0]
 8002858:	1b5b      	subs	r3, r3, r5
 800285a:	d41a      	bmi.n	8002892 <_malloc_r+0x96>
 800285c:	2b0b      	cmp	r3, #11
 800285e:	d903      	bls.n	8002868 <_malloc_r+0x6c>
 8002860:	600b      	str	r3, [r1, #0]
 8002862:	18cc      	adds	r4, r1, r3
 8002864:	6025      	str	r5, [r4, #0]
 8002866:	e003      	b.n	8002870 <_malloc_r+0x74>
 8002868:	428c      	cmp	r4, r1
 800286a:	d10e      	bne.n	800288a <_malloc_r+0x8e>
 800286c:	6863      	ldr	r3, [r4, #4]
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	0030      	movs	r0, r6
 8002872:	f000 fd7f 	bl	8003374 <__malloc_unlock>
 8002876:	0020      	movs	r0, r4
 8002878:	2207      	movs	r2, #7
 800287a:	300b      	adds	r0, #11
 800287c:	1d23      	adds	r3, r4, #4
 800287e:	4390      	bics	r0, r2
 8002880:	1ac3      	subs	r3, r0, r3
 8002882:	d0e7      	beq.n	8002854 <_malloc_r+0x58>
 8002884:	425a      	negs	r2, r3
 8002886:	50e2      	str	r2, [r4, r3]
 8002888:	e7e4      	b.n	8002854 <_malloc_r+0x58>
 800288a:	684b      	ldr	r3, [r1, #4]
 800288c:	6063      	str	r3, [r4, #4]
 800288e:	000c      	movs	r4, r1
 8002890:	e7ee      	b.n	8002870 <_malloc_r+0x74>
 8002892:	000c      	movs	r4, r1
 8002894:	6849      	ldr	r1, [r1, #4]
 8002896:	e7c2      	b.n	800281e <_malloc_r+0x22>
 8002898:	2303      	movs	r3, #3
 800289a:	1cc4      	adds	r4, r0, #3
 800289c:	439c      	bics	r4, r3
 800289e:	42a0      	cmp	r0, r4
 80028a0:	d0e0      	beq.n	8002864 <_malloc_r+0x68>
 80028a2:	1a21      	subs	r1, r4, r0
 80028a4:	0030      	movs	r0, r6
 80028a6:	f000 fad3 	bl	8002e50 <_sbrk_r>
 80028aa:	1c43      	adds	r3, r0, #1
 80028ac:	d1da      	bne.n	8002864 <_malloc_r+0x68>
 80028ae:	e7c6      	b.n	800283e <_malloc_r+0x42>
 80028b0:	2000008c 	.word	0x2000008c
 80028b4:	20000090 	.word	0x20000090

080028b8 <__sfputc_r>:
 80028b8:	6893      	ldr	r3, [r2, #8]
 80028ba:	b510      	push	{r4, lr}
 80028bc:	3b01      	subs	r3, #1
 80028be:	6093      	str	r3, [r2, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	da05      	bge.n	80028d0 <__sfputc_r+0x18>
 80028c4:	6994      	ldr	r4, [r2, #24]
 80028c6:	42a3      	cmp	r3, r4
 80028c8:	db08      	blt.n	80028dc <__sfputc_r+0x24>
 80028ca:	b2cb      	uxtb	r3, r1
 80028cc:	2b0a      	cmp	r3, #10
 80028ce:	d005      	beq.n	80028dc <__sfputc_r+0x24>
 80028d0:	6813      	ldr	r3, [r2, #0]
 80028d2:	1c58      	adds	r0, r3, #1
 80028d4:	6010      	str	r0, [r2, #0]
 80028d6:	7019      	strb	r1, [r3, #0]
 80028d8:	b2c8      	uxtb	r0, r1
 80028da:	bd10      	pop	{r4, pc}
 80028dc:	f000 fb16 	bl	8002f0c <__swbuf_r>
 80028e0:	e7fb      	b.n	80028da <__sfputc_r+0x22>

080028e2 <__sfputs_r>:
 80028e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e4:	0006      	movs	r6, r0
 80028e6:	000f      	movs	r7, r1
 80028e8:	0014      	movs	r4, r2
 80028ea:	18d5      	adds	r5, r2, r3
 80028ec:	42ac      	cmp	r4, r5
 80028ee:	d101      	bne.n	80028f4 <__sfputs_r+0x12>
 80028f0:	2000      	movs	r0, #0
 80028f2:	e007      	b.n	8002904 <__sfputs_r+0x22>
 80028f4:	7821      	ldrb	r1, [r4, #0]
 80028f6:	003a      	movs	r2, r7
 80028f8:	0030      	movs	r0, r6
 80028fa:	f7ff ffdd 	bl	80028b8 <__sfputc_r>
 80028fe:	3401      	adds	r4, #1
 8002900:	1c43      	adds	r3, r0, #1
 8002902:	d1f3      	bne.n	80028ec <__sfputs_r+0xa>
 8002904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002908 <_vfiprintf_r>:
 8002908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800290a:	b09f      	sub	sp, #124	; 0x7c
 800290c:	0006      	movs	r6, r0
 800290e:	000f      	movs	r7, r1
 8002910:	0014      	movs	r4, r2
 8002912:	9305      	str	r3, [sp, #20]
 8002914:	2800      	cmp	r0, #0
 8002916:	d004      	beq.n	8002922 <_vfiprintf_r+0x1a>
 8002918:	6983      	ldr	r3, [r0, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <_vfiprintf_r+0x1a>
 800291e:	f7ff fed7 	bl	80026d0 <__sinit>
 8002922:	4b7f      	ldr	r3, [pc, #508]	; (8002b20 <_vfiprintf_r+0x218>)
 8002924:	429f      	cmp	r7, r3
 8002926:	d15c      	bne.n	80029e2 <_vfiprintf_r+0xda>
 8002928:	6877      	ldr	r7, [r6, #4]
 800292a:	89bb      	ldrh	r3, [r7, #12]
 800292c:	071b      	lsls	r3, r3, #28
 800292e:	d562      	bpl.n	80029f6 <_vfiprintf_r+0xee>
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d05f      	beq.n	80029f6 <_vfiprintf_r+0xee>
 8002936:	2300      	movs	r3, #0
 8002938:	ad06      	add	r5, sp, #24
 800293a:	616b      	str	r3, [r5, #20]
 800293c:	3320      	adds	r3, #32
 800293e:	766b      	strb	r3, [r5, #25]
 8002940:	3310      	adds	r3, #16
 8002942:	76ab      	strb	r3, [r5, #26]
 8002944:	9402      	str	r4, [sp, #8]
 8002946:	9c02      	ldr	r4, [sp, #8]
 8002948:	7823      	ldrb	r3, [r4, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d15d      	bne.n	8002a0a <_vfiprintf_r+0x102>
 800294e:	9b02      	ldr	r3, [sp, #8]
 8002950:	1ae3      	subs	r3, r4, r3
 8002952:	9304      	str	r3, [sp, #16]
 8002954:	d00d      	beq.n	8002972 <_vfiprintf_r+0x6a>
 8002956:	9b04      	ldr	r3, [sp, #16]
 8002958:	9a02      	ldr	r2, [sp, #8]
 800295a:	0039      	movs	r1, r7
 800295c:	0030      	movs	r0, r6
 800295e:	f7ff ffc0 	bl	80028e2 <__sfputs_r>
 8002962:	1c43      	adds	r3, r0, #1
 8002964:	d100      	bne.n	8002968 <_vfiprintf_r+0x60>
 8002966:	e0cc      	b.n	8002b02 <_vfiprintf_r+0x1fa>
 8002968:	696a      	ldr	r2, [r5, #20]
 800296a:	9b04      	ldr	r3, [sp, #16]
 800296c:	4694      	mov	ip, r2
 800296e:	4463      	add	r3, ip
 8002970:	616b      	str	r3, [r5, #20]
 8002972:	7823      	ldrb	r3, [r4, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d100      	bne.n	800297a <_vfiprintf_r+0x72>
 8002978:	e0c3      	b.n	8002b02 <_vfiprintf_r+0x1fa>
 800297a:	2201      	movs	r2, #1
 800297c:	2300      	movs	r3, #0
 800297e:	4252      	negs	r2, r2
 8002980:	606a      	str	r2, [r5, #4]
 8002982:	a902      	add	r1, sp, #8
 8002984:	3254      	adds	r2, #84	; 0x54
 8002986:	1852      	adds	r2, r2, r1
 8002988:	3401      	adds	r4, #1
 800298a:	602b      	str	r3, [r5, #0]
 800298c:	60eb      	str	r3, [r5, #12]
 800298e:	60ab      	str	r3, [r5, #8]
 8002990:	7013      	strb	r3, [r2, #0]
 8002992:	65ab      	str	r3, [r5, #88]	; 0x58
 8002994:	7821      	ldrb	r1, [r4, #0]
 8002996:	2205      	movs	r2, #5
 8002998:	4862      	ldr	r0, [pc, #392]	; (8002b24 <_vfiprintf_r+0x21c>)
 800299a:	f000 fcdf 	bl	800335c <memchr>
 800299e:	1c63      	adds	r3, r4, #1
 80029a0:	469c      	mov	ip, r3
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d135      	bne.n	8002a12 <_vfiprintf_r+0x10a>
 80029a6:	6829      	ldr	r1, [r5, #0]
 80029a8:	06cb      	lsls	r3, r1, #27
 80029aa:	d504      	bpl.n	80029b6 <_vfiprintf_r+0xae>
 80029ac:	2353      	movs	r3, #83	; 0x53
 80029ae:	aa02      	add	r2, sp, #8
 80029b0:	3020      	adds	r0, #32
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	7018      	strb	r0, [r3, #0]
 80029b6:	070b      	lsls	r3, r1, #28
 80029b8:	d504      	bpl.n	80029c4 <_vfiprintf_r+0xbc>
 80029ba:	2353      	movs	r3, #83	; 0x53
 80029bc:	202b      	movs	r0, #43	; 0x2b
 80029be:	aa02      	add	r2, sp, #8
 80029c0:	189b      	adds	r3, r3, r2
 80029c2:	7018      	strb	r0, [r3, #0]
 80029c4:	7823      	ldrb	r3, [r4, #0]
 80029c6:	2b2a      	cmp	r3, #42	; 0x2a
 80029c8:	d02c      	beq.n	8002a24 <_vfiprintf_r+0x11c>
 80029ca:	2000      	movs	r0, #0
 80029cc:	210a      	movs	r1, #10
 80029ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029d0:	7822      	ldrb	r2, [r4, #0]
 80029d2:	3a30      	subs	r2, #48	; 0x30
 80029d4:	2a09      	cmp	r2, #9
 80029d6:	d800      	bhi.n	80029da <_vfiprintf_r+0xd2>
 80029d8:	e06b      	b.n	8002ab2 <_vfiprintf_r+0x1aa>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d02a      	beq.n	8002a34 <_vfiprintf_r+0x12c>
 80029de:	9309      	str	r3, [sp, #36]	; 0x24
 80029e0:	e028      	b.n	8002a34 <_vfiprintf_r+0x12c>
 80029e2:	4b51      	ldr	r3, [pc, #324]	; (8002b28 <_vfiprintf_r+0x220>)
 80029e4:	429f      	cmp	r7, r3
 80029e6:	d101      	bne.n	80029ec <_vfiprintf_r+0xe4>
 80029e8:	68b7      	ldr	r7, [r6, #8]
 80029ea:	e79e      	b.n	800292a <_vfiprintf_r+0x22>
 80029ec:	4b4f      	ldr	r3, [pc, #316]	; (8002b2c <_vfiprintf_r+0x224>)
 80029ee:	429f      	cmp	r7, r3
 80029f0:	d19b      	bne.n	800292a <_vfiprintf_r+0x22>
 80029f2:	68f7      	ldr	r7, [r6, #12]
 80029f4:	e799      	b.n	800292a <_vfiprintf_r+0x22>
 80029f6:	0039      	movs	r1, r7
 80029f8:	0030      	movs	r0, r6
 80029fa:	f000 faf1 	bl	8002fe0 <__swsetup_r>
 80029fe:	2800      	cmp	r0, #0
 8002a00:	d099      	beq.n	8002936 <_vfiprintf_r+0x2e>
 8002a02:	2001      	movs	r0, #1
 8002a04:	4240      	negs	r0, r0
 8002a06:	b01f      	add	sp, #124	; 0x7c
 8002a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a0a:	2b25      	cmp	r3, #37	; 0x25
 8002a0c:	d09f      	beq.n	800294e <_vfiprintf_r+0x46>
 8002a0e:	3401      	adds	r4, #1
 8002a10:	e79a      	b.n	8002948 <_vfiprintf_r+0x40>
 8002a12:	4b44      	ldr	r3, [pc, #272]	; (8002b24 <_vfiprintf_r+0x21c>)
 8002a14:	6829      	ldr	r1, [r5, #0]
 8002a16:	1ac0      	subs	r0, r0, r3
 8002a18:	2301      	movs	r3, #1
 8002a1a:	4083      	lsls	r3, r0
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	602b      	str	r3, [r5, #0]
 8002a20:	4664      	mov	r4, ip
 8002a22:	e7b7      	b.n	8002994 <_vfiprintf_r+0x8c>
 8002a24:	9b05      	ldr	r3, [sp, #20]
 8002a26:	1d18      	adds	r0, r3, #4
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	9005      	str	r0, [sp, #20]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	db3a      	blt.n	8002aa6 <_vfiprintf_r+0x19e>
 8002a30:	9309      	str	r3, [sp, #36]	; 0x24
 8002a32:	4664      	mov	r4, ip
 8002a34:	7823      	ldrb	r3, [r4, #0]
 8002a36:	2b2e      	cmp	r3, #46	; 0x2e
 8002a38:	d10b      	bne.n	8002a52 <_vfiprintf_r+0x14a>
 8002a3a:	7863      	ldrb	r3, [r4, #1]
 8002a3c:	1c62      	adds	r2, r4, #1
 8002a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8002a40:	d13f      	bne.n	8002ac2 <_vfiprintf_r+0x1ba>
 8002a42:	9b05      	ldr	r3, [sp, #20]
 8002a44:	3402      	adds	r4, #2
 8002a46:	1d1a      	adds	r2, r3, #4
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	9205      	str	r2, [sp, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	db35      	blt.n	8002abc <_vfiprintf_r+0x1b4>
 8002a50:	9307      	str	r3, [sp, #28]
 8002a52:	7821      	ldrb	r1, [r4, #0]
 8002a54:	2203      	movs	r2, #3
 8002a56:	4836      	ldr	r0, [pc, #216]	; (8002b30 <_vfiprintf_r+0x228>)
 8002a58:	f000 fc80 	bl	800335c <memchr>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	d007      	beq.n	8002a70 <_vfiprintf_r+0x168>
 8002a60:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <_vfiprintf_r+0x228>)
 8002a62:	682a      	ldr	r2, [r5, #0]
 8002a64:	1ac0      	subs	r0, r0, r3
 8002a66:	2340      	movs	r3, #64	; 0x40
 8002a68:	4083      	lsls	r3, r0
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	602b      	str	r3, [r5, #0]
 8002a6e:	3401      	adds	r4, #1
 8002a70:	7821      	ldrb	r1, [r4, #0]
 8002a72:	1c63      	adds	r3, r4, #1
 8002a74:	2206      	movs	r2, #6
 8002a76:	482f      	ldr	r0, [pc, #188]	; (8002b34 <_vfiprintf_r+0x22c>)
 8002a78:	9302      	str	r3, [sp, #8]
 8002a7a:	7629      	strb	r1, [r5, #24]
 8002a7c:	f000 fc6e 	bl	800335c <memchr>
 8002a80:	2800      	cmp	r0, #0
 8002a82:	d044      	beq.n	8002b0e <_vfiprintf_r+0x206>
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <_vfiprintf_r+0x230>)
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d12f      	bne.n	8002aea <_vfiprintf_r+0x1e2>
 8002a8a:	6829      	ldr	r1, [r5, #0]
 8002a8c:	9b05      	ldr	r3, [sp, #20]
 8002a8e:	2207      	movs	r2, #7
 8002a90:	05c9      	lsls	r1, r1, #23
 8002a92:	d528      	bpl.n	8002ae6 <_vfiprintf_r+0x1de>
 8002a94:	189b      	adds	r3, r3, r2
 8002a96:	4393      	bics	r3, r2
 8002a98:	3308      	adds	r3, #8
 8002a9a:	9305      	str	r3, [sp, #20]
 8002a9c:	696b      	ldr	r3, [r5, #20]
 8002a9e:	9a03      	ldr	r2, [sp, #12]
 8002aa0:	189b      	adds	r3, r3, r2
 8002aa2:	616b      	str	r3, [r5, #20]
 8002aa4:	e74f      	b.n	8002946 <_vfiprintf_r+0x3e>
 8002aa6:	425b      	negs	r3, r3
 8002aa8:	60eb      	str	r3, [r5, #12]
 8002aaa:	2302      	movs	r3, #2
 8002aac:	430b      	orrs	r3, r1
 8002aae:	602b      	str	r3, [r5, #0]
 8002ab0:	e7bf      	b.n	8002a32 <_vfiprintf_r+0x12a>
 8002ab2:	434b      	muls	r3, r1
 8002ab4:	3401      	adds	r4, #1
 8002ab6:	189b      	adds	r3, r3, r2
 8002ab8:	2001      	movs	r0, #1
 8002aba:	e789      	b.n	80029d0 <_vfiprintf_r+0xc8>
 8002abc:	2301      	movs	r3, #1
 8002abe:	425b      	negs	r3, r3
 8002ac0:	e7c6      	b.n	8002a50 <_vfiprintf_r+0x148>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	0014      	movs	r4, r2
 8002ac6:	200a      	movs	r0, #10
 8002ac8:	001a      	movs	r2, r3
 8002aca:	606b      	str	r3, [r5, #4]
 8002acc:	7821      	ldrb	r1, [r4, #0]
 8002ace:	3930      	subs	r1, #48	; 0x30
 8002ad0:	2909      	cmp	r1, #9
 8002ad2:	d903      	bls.n	8002adc <_vfiprintf_r+0x1d4>
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0bc      	beq.n	8002a52 <_vfiprintf_r+0x14a>
 8002ad8:	9207      	str	r2, [sp, #28]
 8002ada:	e7ba      	b.n	8002a52 <_vfiprintf_r+0x14a>
 8002adc:	4342      	muls	r2, r0
 8002ade:	3401      	adds	r4, #1
 8002ae0:	1852      	adds	r2, r2, r1
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e7f2      	b.n	8002acc <_vfiprintf_r+0x1c4>
 8002ae6:	3307      	adds	r3, #7
 8002ae8:	e7d5      	b.n	8002a96 <_vfiprintf_r+0x18e>
 8002aea:	ab05      	add	r3, sp, #20
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	003a      	movs	r2, r7
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <_vfiprintf_r+0x234>)
 8002af2:	0029      	movs	r1, r5
 8002af4:	0030      	movs	r0, r6
 8002af6:	e000      	b.n	8002afa <_vfiprintf_r+0x1f2>
 8002af8:	bf00      	nop
 8002afa:	9003      	str	r0, [sp, #12]
 8002afc:	9b03      	ldr	r3, [sp, #12]
 8002afe:	3301      	adds	r3, #1
 8002b00:	d1cc      	bne.n	8002a9c <_vfiprintf_r+0x194>
 8002b02:	89bb      	ldrh	r3, [r7, #12]
 8002b04:	065b      	lsls	r3, r3, #25
 8002b06:	d500      	bpl.n	8002b0a <_vfiprintf_r+0x202>
 8002b08:	e77b      	b.n	8002a02 <_vfiprintf_r+0xfa>
 8002b0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002b0c:	e77b      	b.n	8002a06 <_vfiprintf_r+0xfe>
 8002b0e:	ab05      	add	r3, sp, #20
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	003a      	movs	r2, r7
 8002b14:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <_vfiprintf_r+0x234>)
 8002b16:	0029      	movs	r1, r5
 8002b18:	0030      	movs	r0, r6
 8002b1a:	f000 f87f 	bl	8002c1c <_printf_i>
 8002b1e:	e7ec      	b.n	8002afa <_vfiprintf_r+0x1f2>
 8002b20:	080035ac 	.word	0x080035ac
 8002b24:	080035ec 	.word	0x080035ec
 8002b28:	080035cc 	.word	0x080035cc
 8002b2c:	0800358c 	.word	0x0800358c
 8002b30:	080035f2 	.word	0x080035f2
 8002b34:	080035f6 	.word	0x080035f6
 8002b38:	00000000 	.word	0x00000000
 8002b3c:	080028e3 	.word	0x080028e3

08002b40 <_printf_common>:
 8002b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b42:	0015      	movs	r5, r2
 8002b44:	9301      	str	r3, [sp, #4]
 8002b46:	688a      	ldr	r2, [r1, #8]
 8002b48:	690b      	ldr	r3, [r1, #16]
 8002b4a:	9000      	str	r0, [sp, #0]
 8002b4c:	000c      	movs	r4, r1
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	da00      	bge.n	8002b54 <_printf_common+0x14>
 8002b52:	0013      	movs	r3, r2
 8002b54:	0022      	movs	r2, r4
 8002b56:	602b      	str	r3, [r5, #0]
 8002b58:	3243      	adds	r2, #67	; 0x43
 8002b5a:	7812      	ldrb	r2, [r2, #0]
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d001      	beq.n	8002b64 <_printf_common+0x24>
 8002b60:	3301      	adds	r3, #1
 8002b62:	602b      	str	r3, [r5, #0]
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	069b      	lsls	r3, r3, #26
 8002b68:	d502      	bpl.n	8002b70 <_printf_common+0x30>
 8002b6a:	682b      	ldr	r3, [r5, #0]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	602b      	str	r3, [r5, #0]
 8002b70:	2706      	movs	r7, #6
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	401f      	ands	r7, r3
 8002b76:	d027      	beq.n	8002bc8 <_printf_common+0x88>
 8002b78:	0023      	movs	r3, r4
 8002b7a:	3343      	adds	r3, #67	; 0x43
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	1e5a      	subs	r2, r3, #1
 8002b80:	4193      	sbcs	r3, r2
 8002b82:	6822      	ldr	r2, [r4, #0]
 8002b84:	0692      	lsls	r2, r2, #26
 8002b86:	d430      	bmi.n	8002bea <_printf_common+0xaa>
 8002b88:	0022      	movs	r2, r4
 8002b8a:	9901      	ldr	r1, [sp, #4]
 8002b8c:	3243      	adds	r2, #67	; 0x43
 8002b8e:	9800      	ldr	r0, [sp, #0]
 8002b90:	9e08      	ldr	r6, [sp, #32]
 8002b92:	47b0      	blx	r6
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d025      	beq.n	8002be4 <_printf_common+0xa4>
 8002b98:	2306      	movs	r3, #6
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	682a      	ldr	r2, [r5, #0]
 8002b9e:	68e1      	ldr	r1, [r4, #12]
 8002ba0:	4003      	ands	r3, r0
 8002ba2:	2500      	movs	r5, #0
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d103      	bne.n	8002bb0 <_printf_common+0x70>
 8002ba8:	1a8d      	subs	r5, r1, r2
 8002baa:	43eb      	mvns	r3, r5
 8002bac:	17db      	asrs	r3, r3, #31
 8002bae:	401d      	ands	r5, r3
 8002bb0:	68a3      	ldr	r3, [r4, #8]
 8002bb2:	6922      	ldr	r2, [r4, #16]
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	dd01      	ble.n	8002bbc <_printf_common+0x7c>
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	18ed      	adds	r5, r5, r3
 8002bbc:	2700      	movs	r7, #0
 8002bbe:	42bd      	cmp	r5, r7
 8002bc0:	d120      	bne.n	8002c04 <_printf_common+0xc4>
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	e010      	b.n	8002be8 <_printf_common+0xa8>
 8002bc6:	3701      	adds	r7, #1
 8002bc8:	68e3      	ldr	r3, [r4, #12]
 8002bca:	682a      	ldr	r2, [r5, #0]
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	429f      	cmp	r7, r3
 8002bd0:	dad2      	bge.n	8002b78 <_printf_common+0x38>
 8002bd2:	0022      	movs	r2, r4
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	3219      	adds	r2, #25
 8002bd8:	9901      	ldr	r1, [sp, #4]
 8002bda:	9800      	ldr	r0, [sp, #0]
 8002bdc:	9e08      	ldr	r6, [sp, #32]
 8002bde:	47b0      	blx	r6
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	d1f0      	bne.n	8002bc6 <_printf_common+0x86>
 8002be4:	2001      	movs	r0, #1
 8002be6:	4240      	negs	r0, r0
 8002be8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002bea:	2030      	movs	r0, #48	; 0x30
 8002bec:	18e1      	adds	r1, r4, r3
 8002bee:	3143      	adds	r1, #67	; 0x43
 8002bf0:	7008      	strb	r0, [r1, #0]
 8002bf2:	0021      	movs	r1, r4
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	3145      	adds	r1, #69	; 0x45
 8002bf8:	7809      	ldrb	r1, [r1, #0]
 8002bfa:	18a2      	adds	r2, r4, r2
 8002bfc:	3243      	adds	r2, #67	; 0x43
 8002bfe:	3302      	adds	r3, #2
 8002c00:	7011      	strb	r1, [r2, #0]
 8002c02:	e7c1      	b.n	8002b88 <_printf_common+0x48>
 8002c04:	0022      	movs	r2, r4
 8002c06:	2301      	movs	r3, #1
 8002c08:	321a      	adds	r2, #26
 8002c0a:	9901      	ldr	r1, [sp, #4]
 8002c0c:	9800      	ldr	r0, [sp, #0]
 8002c0e:	9e08      	ldr	r6, [sp, #32]
 8002c10:	47b0      	blx	r6
 8002c12:	1c43      	adds	r3, r0, #1
 8002c14:	d0e6      	beq.n	8002be4 <_printf_common+0xa4>
 8002c16:	3701      	adds	r7, #1
 8002c18:	e7d1      	b.n	8002bbe <_printf_common+0x7e>
	...

08002c1c <_printf_i>:
 8002c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c1e:	b08b      	sub	sp, #44	; 0x2c
 8002c20:	9206      	str	r2, [sp, #24]
 8002c22:	000a      	movs	r2, r1
 8002c24:	3243      	adds	r2, #67	; 0x43
 8002c26:	9307      	str	r3, [sp, #28]
 8002c28:	9005      	str	r0, [sp, #20]
 8002c2a:	9204      	str	r2, [sp, #16]
 8002c2c:	7e0a      	ldrb	r2, [r1, #24]
 8002c2e:	000c      	movs	r4, r1
 8002c30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002c32:	2a6e      	cmp	r2, #110	; 0x6e
 8002c34:	d100      	bne.n	8002c38 <_printf_i+0x1c>
 8002c36:	e08f      	b.n	8002d58 <_printf_i+0x13c>
 8002c38:	d817      	bhi.n	8002c6a <_printf_i+0x4e>
 8002c3a:	2a63      	cmp	r2, #99	; 0x63
 8002c3c:	d02c      	beq.n	8002c98 <_printf_i+0x7c>
 8002c3e:	d808      	bhi.n	8002c52 <_printf_i+0x36>
 8002c40:	2a00      	cmp	r2, #0
 8002c42:	d100      	bne.n	8002c46 <_printf_i+0x2a>
 8002c44:	e099      	b.n	8002d7a <_printf_i+0x15e>
 8002c46:	2a58      	cmp	r2, #88	; 0x58
 8002c48:	d054      	beq.n	8002cf4 <_printf_i+0xd8>
 8002c4a:	0026      	movs	r6, r4
 8002c4c:	3642      	adds	r6, #66	; 0x42
 8002c4e:	7032      	strb	r2, [r6, #0]
 8002c50:	e029      	b.n	8002ca6 <_printf_i+0x8a>
 8002c52:	2a64      	cmp	r2, #100	; 0x64
 8002c54:	d001      	beq.n	8002c5a <_printf_i+0x3e>
 8002c56:	2a69      	cmp	r2, #105	; 0x69
 8002c58:	d1f7      	bne.n	8002c4a <_printf_i+0x2e>
 8002c5a:	6821      	ldr	r1, [r4, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	0608      	lsls	r0, r1, #24
 8002c60:	d523      	bpl.n	8002caa <_printf_i+0x8e>
 8002c62:	1d11      	adds	r1, r2, #4
 8002c64:	6019      	str	r1, [r3, #0]
 8002c66:	6815      	ldr	r5, [r2, #0]
 8002c68:	e025      	b.n	8002cb6 <_printf_i+0x9a>
 8002c6a:	2a73      	cmp	r2, #115	; 0x73
 8002c6c:	d100      	bne.n	8002c70 <_printf_i+0x54>
 8002c6e:	e088      	b.n	8002d82 <_printf_i+0x166>
 8002c70:	d808      	bhi.n	8002c84 <_printf_i+0x68>
 8002c72:	2a6f      	cmp	r2, #111	; 0x6f
 8002c74:	d029      	beq.n	8002cca <_printf_i+0xae>
 8002c76:	2a70      	cmp	r2, #112	; 0x70
 8002c78:	d1e7      	bne.n	8002c4a <_printf_i+0x2e>
 8002c7a:	2220      	movs	r2, #32
 8002c7c:	6809      	ldr	r1, [r1, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	6022      	str	r2, [r4, #0]
 8002c82:	e003      	b.n	8002c8c <_printf_i+0x70>
 8002c84:	2a75      	cmp	r2, #117	; 0x75
 8002c86:	d020      	beq.n	8002cca <_printf_i+0xae>
 8002c88:	2a78      	cmp	r2, #120	; 0x78
 8002c8a:	d1de      	bne.n	8002c4a <_printf_i+0x2e>
 8002c8c:	0022      	movs	r2, r4
 8002c8e:	2178      	movs	r1, #120	; 0x78
 8002c90:	3245      	adds	r2, #69	; 0x45
 8002c92:	7011      	strb	r1, [r2, #0]
 8002c94:	4a6c      	ldr	r2, [pc, #432]	; (8002e48 <_printf_i+0x22c>)
 8002c96:	e030      	b.n	8002cfa <_printf_i+0xde>
 8002c98:	000e      	movs	r6, r1
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	3642      	adds	r6, #66	; 0x42
 8002c9e:	1d11      	adds	r1, r2, #4
 8002ca0:	6019      	str	r1, [r3, #0]
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	7033      	strb	r3, [r6, #0]
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e079      	b.n	8002d9e <_printf_i+0x182>
 8002caa:	0649      	lsls	r1, r1, #25
 8002cac:	d5d9      	bpl.n	8002c62 <_printf_i+0x46>
 8002cae:	1d11      	adds	r1, r2, #4
 8002cb0:	6019      	str	r1, [r3, #0]
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	5ed5      	ldrsh	r5, [r2, r3]
 8002cb6:	2d00      	cmp	r5, #0
 8002cb8:	da03      	bge.n	8002cc2 <_printf_i+0xa6>
 8002cba:	232d      	movs	r3, #45	; 0x2d
 8002cbc:	9a04      	ldr	r2, [sp, #16]
 8002cbe:	426d      	negs	r5, r5
 8002cc0:	7013      	strb	r3, [r2, #0]
 8002cc2:	4b62      	ldr	r3, [pc, #392]	; (8002e4c <_printf_i+0x230>)
 8002cc4:	270a      	movs	r7, #10
 8002cc6:	9303      	str	r3, [sp, #12]
 8002cc8:	e02f      	b.n	8002d2a <_printf_i+0x10e>
 8002cca:	6820      	ldr	r0, [r4, #0]
 8002ccc:	6819      	ldr	r1, [r3, #0]
 8002cce:	0605      	lsls	r5, r0, #24
 8002cd0:	d503      	bpl.n	8002cda <_printf_i+0xbe>
 8002cd2:	1d08      	adds	r0, r1, #4
 8002cd4:	6018      	str	r0, [r3, #0]
 8002cd6:	680d      	ldr	r5, [r1, #0]
 8002cd8:	e005      	b.n	8002ce6 <_printf_i+0xca>
 8002cda:	0640      	lsls	r0, r0, #25
 8002cdc:	d5f9      	bpl.n	8002cd2 <_printf_i+0xb6>
 8002cde:	680d      	ldr	r5, [r1, #0]
 8002ce0:	1d08      	adds	r0, r1, #4
 8002ce2:	6018      	str	r0, [r3, #0]
 8002ce4:	b2ad      	uxth	r5, r5
 8002ce6:	4b59      	ldr	r3, [pc, #356]	; (8002e4c <_printf_i+0x230>)
 8002ce8:	2708      	movs	r7, #8
 8002cea:	9303      	str	r3, [sp, #12]
 8002cec:	2a6f      	cmp	r2, #111	; 0x6f
 8002cee:	d018      	beq.n	8002d22 <_printf_i+0x106>
 8002cf0:	270a      	movs	r7, #10
 8002cf2:	e016      	b.n	8002d22 <_printf_i+0x106>
 8002cf4:	3145      	adds	r1, #69	; 0x45
 8002cf6:	700a      	strb	r2, [r1, #0]
 8002cf8:	4a54      	ldr	r2, [pc, #336]	; (8002e4c <_printf_i+0x230>)
 8002cfa:	9203      	str	r2, [sp, #12]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	6821      	ldr	r1, [r4, #0]
 8002d00:	1d10      	adds	r0, r2, #4
 8002d02:	6018      	str	r0, [r3, #0]
 8002d04:	6815      	ldr	r5, [r2, #0]
 8002d06:	0608      	lsls	r0, r1, #24
 8002d08:	d522      	bpl.n	8002d50 <_printf_i+0x134>
 8002d0a:	07cb      	lsls	r3, r1, #31
 8002d0c:	d502      	bpl.n	8002d14 <_printf_i+0xf8>
 8002d0e:	2320      	movs	r3, #32
 8002d10:	4319      	orrs	r1, r3
 8002d12:	6021      	str	r1, [r4, #0]
 8002d14:	2710      	movs	r7, #16
 8002d16:	2d00      	cmp	r5, #0
 8002d18:	d103      	bne.n	8002d22 <_printf_i+0x106>
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	6822      	ldr	r2, [r4, #0]
 8002d1e:	439a      	bics	r2, r3
 8002d20:	6022      	str	r2, [r4, #0]
 8002d22:	0023      	movs	r3, r4
 8002d24:	2200      	movs	r2, #0
 8002d26:	3343      	adds	r3, #67	; 0x43
 8002d28:	701a      	strb	r2, [r3, #0]
 8002d2a:	6863      	ldr	r3, [r4, #4]
 8002d2c:	60a3      	str	r3, [r4, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db5c      	blt.n	8002dec <_printf_i+0x1d0>
 8002d32:	2204      	movs	r2, #4
 8002d34:	6821      	ldr	r1, [r4, #0]
 8002d36:	4391      	bics	r1, r2
 8002d38:	6021      	str	r1, [r4, #0]
 8002d3a:	2d00      	cmp	r5, #0
 8002d3c:	d158      	bne.n	8002df0 <_printf_i+0x1d4>
 8002d3e:	9e04      	ldr	r6, [sp, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d064      	beq.n	8002e0e <_printf_i+0x1f2>
 8002d44:	0026      	movs	r6, r4
 8002d46:	9b03      	ldr	r3, [sp, #12]
 8002d48:	3642      	adds	r6, #66	; 0x42
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	7033      	strb	r3, [r6, #0]
 8002d4e:	e05e      	b.n	8002e0e <_printf_i+0x1f2>
 8002d50:	0648      	lsls	r0, r1, #25
 8002d52:	d5da      	bpl.n	8002d0a <_printf_i+0xee>
 8002d54:	b2ad      	uxth	r5, r5
 8002d56:	e7d8      	b.n	8002d0a <_printf_i+0xee>
 8002d58:	6809      	ldr	r1, [r1, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	0608      	lsls	r0, r1, #24
 8002d5e:	d505      	bpl.n	8002d6c <_printf_i+0x150>
 8002d60:	1d11      	adds	r1, r2, #4
 8002d62:	6019      	str	r1, [r3, #0]
 8002d64:	6813      	ldr	r3, [r2, #0]
 8002d66:	6962      	ldr	r2, [r4, #20]
 8002d68:	601a      	str	r2, [r3, #0]
 8002d6a:	e006      	b.n	8002d7a <_printf_i+0x15e>
 8002d6c:	0649      	lsls	r1, r1, #25
 8002d6e:	d5f7      	bpl.n	8002d60 <_printf_i+0x144>
 8002d70:	1d11      	adds	r1, r2, #4
 8002d72:	6019      	str	r1, [r3, #0]
 8002d74:	6813      	ldr	r3, [r2, #0]
 8002d76:	8aa2      	ldrh	r2, [r4, #20]
 8002d78:	801a      	strh	r2, [r3, #0]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	9e04      	ldr	r6, [sp, #16]
 8002d7e:	6123      	str	r3, [r4, #16]
 8002d80:	e054      	b.n	8002e2c <_printf_i+0x210>
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	1d11      	adds	r1, r2, #4
 8002d86:	6019      	str	r1, [r3, #0]
 8002d88:	6816      	ldr	r6, [r2, #0]
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	6862      	ldr	r2, [r4, #4]
 8002d8e:	0030      	movs	r0, r6
 8002d90:	f000 fae4 	bl	800335c <memchr>
 8002d94:	2800      	cmp	r0, #0
 8002d96:	d001      	beq.n	8002d9c <_printf_i+0x180>
 8002d98:	1b80      	subs	r0, r0, r6
 8002d9a:	6060      	str	r0, [r4, #4]
 8002d9c:	6863      	ldr	r3, [r4, #4]
 8002d9e:	6123      	str	r3, [r4, #16]
 8002da0:	2300      	movs	r3, #0
 8002da2:	9a04      	ldr	r2, [sp, #16]
 8002da4:	7013      	strb	r3, [r2, #0]
 8002da6:	e041      	b.n	8002e2c <_printf_i+0x210>
 8002da8:	6923      	ldr	r3, [r4, #16]
 8002daa:	0032      	movs	r2, r6
 8002dac:	9906      	ldr	r1, [sp, #24]
 8002dae:	9805      	ldr	r0, [sp, #20]
 8002db0:	9d07      	ldr	r5, [sp, #28]
 8002db2:	47a8      	blx	r5
 8002db4:	1c43      	adds	r3, r0, #1
 8002db6:	d043      	beq.n	8002e40 <_printf_i+0x224>
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	2500      	movs	r5, #0
 8002dbc:	079b      	lsls	r3, r3, #30
 8002dbe:	d40f      	bmi.n	8002de0 <_printf_i+0x1c4>
 8002dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dc2:	68e0      	ldr	r0, [r4, #12]
 8002dc4:	4298      	cmp	r0, r3
 8002dc6:	da3d      	bge.n	8002e44 <_printf_i+0x228>
 8002dc8:	0018      	movs	r0, r3
 8002dca:	e03b      	b.n	8002e44 <_printf_i+0x228>
 8002dcc:	0022      	movs	r2, r4
 8002dce:	2301      	movs	r3, #1
 8002dd0:	3219      	adds	r2, #25
 8002dd2:	9906      	ldr	r1, [sp, #24]
 8002dd4:	9805      	ldr	r0, [sp, #20]
 8002dd6:	9e07      	ldr	r6, [sp, #28]
 8002dd8:	47b0      	blx	r6
 8002dda:	1c43      	adds	r3, r0, #1
 8002ddc:	d030      	beq.n	8002e40 <_printf_i+0x224>
 8002dde:	3501      	adds	r5, #1
 8002de0:	68e3      	ldr	r3, [r4, #12]
 8002de2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	429d      	cmp	r5, r3
 8002de8:	dbf0      	blt.n	8002dcc <_printf_i+0x1b0>
 8002dea:	e7e9      	b.n	8002dc0 <_printf_i+0x1a4>
 8002dec:	2d00      	cmp	r5, #0
 8002dee:	d0a9      	beq.n	8002d44 <_printf_i+0x128>
 8002df0:	9e04      	ldr	r6, [sp, #16]
 8002df2:	0028      	movs	r0, r5
 8002df4:	0039      	movs	r1, r7
 8002df6:	f7fd fa17 	bl	8000228 <__aeabi_uidivmod>
 8002dfa:	9b03      	ldr	r3, [sp, #12]
 8002dfc:	3e01      	subs	r6, #1
 8002dfe:	5c5b      	ldrb	r3, [r3, r1]
 8002e00:	0028      	movs	r0, r5
 8002e02:	7033      	strb	r3, [r6, #0]
 8002e04:	0039      	movs	r1, r7
 8002e06:	f7fd f989 	bl	800011c <__udivsi3>
 8002e0a:	1e05      	subs	r5, r0, #0
 8002e0c:	d1f1      	bne.n	8002df2 <_printf_i+0x1d6>
 8002e0e:	2f08      	cmp	r7, #8
 8002e10:	d109      	bne.n	8002e26 <_printf_i+0x20a>
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	07db      	lsls	r3, r3, #31
 8002e16:	d506      	bpl.n	8002e26 <_printf_i+0x20a>
 8002e18:	6863      	ldr	r3, [r4, #4]
 8002e1a:	6922      	ldr	r2, [r4, #16]
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	dc02      	bgt.n	8002e26 <_printf_i+0x20a>
 8002e20:	2330      	movs	r3, #48	; 0x30
 8002e22:	3e01      	subs	r6, #1
 8002e24:	7033      	strb	r3, [r6, #0]
 8002e26:	9b04      	ldr	r3, [sp, #16]
 8002e28:	1b9b      	subs	r3, r3, r6
 8002e2a:	6123      	str	r3, [r4, #16]
 8002e2c:	9b07      	ldr	r3, [sp, #28]
 8002e2e:	aa09      	add	r2, sp, #36	; 0x24
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	0021      	movs	r1, r4
 8002e34:	9b06      	ldr	r3, [sp, #24]
 8002e36:	9805      	ldr	r0, [sp, #20]
 8002e38:	f7ff fe82 	bl	8002b40 <_printf_common>
 8002e3c:	1c43      	adds	r3, r0, #1
 8002e3e:	d1b3      	bne.n	8002da8 <_printf_i+0x18c>
 8002e40:	2001      	movs	r0, #1
 8002e42:	4240      	negs	r0, r0
 8002e44:	b00b      	add	sp, #44	; 0x2c
 8002e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e48:	0800360e 	.word	0x0800360e
 8002e4c:	080035fd 	.word	0x080035fd

08002e50 <_sbrk_r>:
 8002e50:	2300      	movs	r3, #0
 8002e52:	b570      	push	{r4, r5, r6, lr}
 8002e54:	4c06      	ldr	r4, [pc, #24]	; (8002e70 <_sbrk_r+0x20>)
 8002e56:	0005      	movs	r5, r0
 8002e58:	0008      	movs	r0, r1
 8002e5a:	6023      	str	r3, [r4, #0]
 8002e5c:	f7fe f916 	bl	800108c <_sbrk>
 8002e60:	1c43      	adds	r3, r0, #1
 8002e62:	d103      	bne.n	8002e6c <_sbrk_r+0x1c>
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d000      	beq.n	8002e6c <_sbrk_r+0x1c>
 8002e6a:	602b      	str	r3, [r5, #0]
 8002e6c:	bd70      	pop	{r4, r5, r6, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	20000970 	.word	0x20000970

08002e74 <__sread>:
 8002e74:	b570      	push	{r4, r5, r6, lr}
 8002e76:	000c      	movs	r4, r1
 8002e78:	250e      	movs	r5, #14
 8002e7a:	5f49      	ldrsh	r1, [r1, r5]
 8002e7c:	f000 fac6 	bl	800340c <_read_r>
 8002e80:	2800      	cmp	r0, #0
 8002e82:	db03      	blt.n	8002e8c <__sread+0x18>
 8002e84:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e86:	181b      	adds	r3, r3, r0
 8002e88:	6563      	str	r3, [r4, #84]	; 0x54
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}
 8002e8c:	89a3      	ldrh	r3, [r4, #12]
 8002e8e:	4a02      	ldr	r2, [pc, #8]	; (8002e98 <__sread+0x24>)
 8002e90:	4013      	ands	r3, r2
 8002e92:	81a3      	strh	r3, [r4, #12]
 8002e94:	e7f9      	b.n	8002e8a <__sread+0x16>
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	ffffefff 	.word	0xffffefff

08002e9c <__swrite>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	001f      	movs	r7, r3
 8002ea0:	898b      	ldrh	r3, [r1, #12]
 8002ea2:	0005      	movs	r5, r0
 8002ea4:	000c      	movs	r4, r1
 8002ea6:	0016      	movs	r6, r2
 8002ea8:	05db      	lsls	r3, r3, #23
 8002eaa:	d505      	bpl.n	8002eb8 <__swrite+0x1c>
 8002eac:	230e      	movs	r3, #14
 8002eae:	5ec9      	ldrsh	r1, [r1, r3]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	f000 f9d2 	bl	800325c <_lseek_r>
 8002eb8:	89a3      	ldrh	r3, [r4, #12]
 8002eba:	4a05      	ldr	r2, [pc, #20]	; (8002ed0 <__swrite+0x34>)
 8002ebc:	0028      	movs	r0, r5
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	81a3      	strh	r3, [r4, #12]
 8002ec2:	0032      	movs	r2, r6
 8002ec4:	230e      	movs	r3, #14
 8002ec6:	5ee1      	ldrsh	r1, [r4, r3]
 8002ec8:	003b      	movs	r3, r7
 8002eca:	f000 f875 	bl	8002fb8 <_write_r>
 8002ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ed0:	ffffefff 	.word	0xffffefff

08002ed4 <__sseek>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	000c      	movs	r4, r1
 8002ed8:	250e      	movs	r5, #14
 8002eda:	5f49      	ldrsh	r1, [r1, r5]
 8002edc:	f000 f9be 	bl	800325c <_lseek_r>
 8002ee0:	89a3      	ldrh	r3, [r4, #12]
 8002ee2:	1c42      	adds	r2, r0, #1
 8002ee4:	d103      	bne.n	8002eee <__sseek+0x1a>
 8002ee6:	4a05      	ldr	r2, [pc, #20]	; (8002efc <__sseek+0x28>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	81a3      	strh	r3, [r4, #12]
 8002eec:	bd70      	pop	{r4, r5, r6, pc}
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	0152      	lsls	r2, r2, #5
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8002ef8:	e7f8      	b.n	8002eec <__sseek+0x18>
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	ffffefff 	.word	0xffffefff

08002f00 <__sclose>:
 8002f00:	b510      	push	{r4, lr}
 8002f02:	230e      	movs	r3, #14
 8002f04:	5ec9      	ldrsh	r1, [r1, r3]
 8002f06:	f000 f8e1 	bl	80030cc <_close_r>
 8002f0a:	bd10      	pop	{r4, pc}

08002f0c <__swbuf_r>:
 8002f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f0e:	0005      	movs	r5, r0
 8002f10:	000e      	movs	r6, r1
 8002f12:	0014      	movs	r4, r2
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d004      	beq.n	8002f22 <__swbuf_r+0x16>
 8002f18:	6983      	ldr	r3, [r0, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <__swbuf_r+0x16>
 8002f1e:	f7ff fbd7 	bl	80026d0 <__sinit>
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <__swbuf_r+0xa0>)
 8002f24:	429c      	cmp	r4, r3
 8002f26:	d12d      	bne.n	8002f84 <__swbuf_r+0x78>
 8002f28:	686c      	ldr	r4, [r5, #4]
 8002f2a:	69a3      	ldr	r3, [r4, #24]
 8002f2c:	60a3      	str	r3, [r4, #8]
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	071b      	lsls	r3, r3, #28
 8002f32:	d531      	bpl.n	8002f98 <__swbuf_r+0x8c>
 8002f34:	6923      	ldr	r3, [r4, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d02e      	beq.n	8002f98 <__swbuf_r+0x8c>
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	6922      	ldr	r2, [r4, #16]
 8002f3e:	b2f7      	uxtb	r7, r6
 8002f40:	1a98      	subs	r0, r3, r2
 8002f42:	6963      	ldr	r3, [r4, #20]
 8002f44:	b2f6      	uxtb	r6, r6
 8002f46:	4298      	cmp	r0, r3
 8002f48:	db05      	blt.n	8002f56 <__swbuf_r+0x4a>
 8002f4a:	0021      	movs	r1, r4
 8002f4c:	0028      	movs	r0, r5
 8002f4e:	f000 f959 	bl	8003204 <_fflush_r>
 8002f52:	2800      	cmp	r0, #0
 8002f54:	d126      	bne.n	8002fa4 <__swbuf_r+0x98>
 8002f56:	68a3      	ldr	r3, [r4, #8]
 8002f58:	3001      	adds	r0, #1
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	60a3      	str	r3, [r4, #8]
 8002f5e:	6823      	ldr	r3, [r4, #0]
 8002f60:	1c5a      	adds	r2, r3, #1
 8002f62:	6022      	str	r2, [r4, #0]
 8002f64:	701f      	strb	r7, [r3, #0]
 8002f66:	6963      	ldr	r3, [r4, #20]
 8002f68:	4298      	cmp	r0, r3
 8002f6a:	d004      	beq.n	8002f76 <__swbuf_r+0x6a>
 8002f6c:	89a3      	ldrh	r3, [r4, #12]
 8002f6e:	07db      	lsls	r3, r3, #31
 8002f70:	d51a      	bpl.n	8002fa8 <__swbuf_r+0x9c>
 8002f72:	2e0a      	cmp	r6, #10
 8002f74:	d118      	bne.n	8002fa8 <__swbuf_r+0x9c>
 8002f76:	0021      	movs	r1, r4
 8002f78:	0028      	movs	r0, r5
 8002f7a:	f000 f943 	bl	8003204 <_fflush_r>
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d012      	beq.n	8002fa8 <__swbuf_r+0x9c>
 8002f82:	e00f      	b.n	8002fa4 <__swbuf_r+0x98>
 8002f84:	4b0a      	ldr	r3, [pc, #40]	; (8002fb0 <__swbuf_r+0xa4>)
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d101      	bne.n	8002f8e <__swbuf_r+0x82>
 8002f8a:	68ac      	ldr	r4, [r5, #8]
 8002f8c:	e7cd      	b.n	8002f2a <__swbuf_r+0x1e>
 8002f8e:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <__swbuf_r+0xa8>)
 8002f90:	429c      	cmp	r4, r3
 8002f92:	d1ca      	bne.n	8002f2a <__swbuf_r+0x1e>
 8002f94:	68ec      	ldr	r4, [r5, #12]
 8002f96:	e7c8      	b.n	8002f2a <__swbuf_r+0x1e>
 8002f98:	0021      	movs	r1, r4
 8002f9a:	0028      	movs	r0, r5
 8002f9c:	f000 f820 	bl	8002fe0 <__swsetup_r>
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d0ca      	beq.n	8002f3a <__swbuf_r+0x2e>
 8002fa4:	2601      	movs	r6, #1
 8002fa6:	4276      	negs	r6, r6
 8002fa8:	0030      	movs	r0, r6
 8002faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fac:	080035ac 	.word	0x080035ac
 8002fb0:	080035cc 	.word	0x080035cc
 8002fb4:	0800358c 	.word	0x0800358c

08002fb8 <_write_r>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	0005      	movs	r5, r0
 8002fbc:	0008      	movs	r0, r1
 8002fbe:	0011      	movs	r1, r2
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	4c06      	ldr	r4, [pc, #24]	; (8002fdc <_write_r+0x24>)
 8002fc4:	6022      	str	r2, [r4, #0]
 8002fc6:	001a      	movs	r2, r3
 8002fc8:	f7fe f851 	bl	800106e <_write>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d103      	bne.n	8002fd8 <_write_r+0x20>
 8002fd0:	6823      	ldr	r3, [r4, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d000      	beq.n	8002fd8 <_write_r+0x20>
 8002fd6:	602b      	str	r3, [r5, #0]
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20000970 	.word	0x20000970

08002fe0 <__swsetup_r>:
 8002fe0:	4b36      	ldr	r3, [pc, #216]	; (80030bc <__swsetup_r+0xdc>)
 8002fe2:	b570      	push	{r4, r5, r6, lr}
 8002fe4:	681d      	ldr	r5, [r3, #0]
 8002fe6:	0006      	movs	r6, r0
 8002fe8:	000c      	movs	r4, r1
 8002fea:	2d00      	cmp	r5, #0
 8002fec:	d005      	beq.n	8002ffa <__swsetup_r+0x1a>
 8002fee:	69ab      	ldr	r3, [r5, #24]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d102      	bne.n	8002ffa <__swsetup_r+0x1a>
 8002ff4:	0028      	movs	r0, r5
 8002ff6:	f7ff fb6b 	bl	80026d0 <__sinit>
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <__swsetup_r+0xe0>)
 8002ffc:	429c      	cmp	r4, r3
 8002ffe:	d10f      	bne.n	8003020 <__swsetup_r+0x40>
 8003000:	686c      	ldr	r4, [r5, #4]
 8003002:	230c      	movs	r3, #12
 8003004:	5ee2      	ldrsh	r2, [r4, r3]
 8003006:	b293      	uxth	r3, r2
 8003008:	0719      	lsls	r1, r3, #28
 800300a:	d42d      	bmi.n	8003068 <__swsetup_r+0x88>
 800300c:	06d9      	lsls	r1, r3, #27
 800300e:	d411      	bmi.n	8003034 <__swsetup_r+0x54>
 8003010:	2309      	movs	r3, #9
 8003012:	2001      	movs	r0, #1
 8003014:	6033      	str	r3, [r6, #0]
 8003016:	3337      	adds	r3, #55	; 0x37
 8003018:	4313      	orrs	r3, r2
 800301a:	81a3      	strh	r3, [r4, #12]
 800301c:	4240      	negs	r0, r0
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <__swsetup_r+0xe4>)
 8003022:	429c      	cmp	r4, r3
 8003024:	d101      	bne.n	800302a <__swsetup_r+0x4a>
 8003026:	68ac      	ldr	r4, [r5, #8]
 8003028:	e7eb      	b.n	8003002 <__swsetup_r+0x22>
 800302a:	4b27      	ldr	r3, [pc, #156]	; (80030c8 <__swsetup_r+0xe8>)
 800302c:	429c      	cmp	r4, r3
 800302e:	d1e8      	bne.n	8003002 <__swsetup_r+0x22>
 8003030:	68ec      	ldr	r4, [r5, #12]
 8003032:	e7e6      	b.n	8003002 <__swsetup_r+0x22>
 8003034:	075b      	lsls	r3, r3, #29
 8003036:	d513      	bpl.n	8003060 <__swsetup_r+0x80>
 8003038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800303a:	2900      	cmp	r1, #0
 800303c:	d008      	beq.n	8003050 <__swsetup_r+0x70>
 800303e:	0023      	movs	r3, r4
 8003040:	3344      	adds	r3, #68	; 0x44
 8003042:	4299      	cmp	r1, r3
 8003044:	d002      	beq.n	800304c <__swsetup_r+0x6c>
 8003046:	0030      	movs	r0, r6
 8003048:	f000 f996 	bl	8003378 <_free_r>
 800304c:	2300      	movs	r3, #0
 800304e:	6363      	str	r3, [r4, #52]	; 0x34
 8003050:	2224      	movs	r2, #36	; 0x24
 8003052:	89a3      	ldrh	r3, [r4, #12]
 8003054:	4393      	bics	r3, r2
 8003056:	81a3      	strh	r3, [r4, #12]
 8003058:	2300      	movs	r3, #0
 800305a:	6063      	str	r3, [r4, #4]
 800305c:	6923      	ldr	r3, [r4, #16]
 800305e:	6023      	str	r3, [r4, #0]
 8003060:	2308      	movs	r3, #8
 8003062:	89a2      	ldrh	r2, [r4, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	81a3      	strh	r3, [r4, #12]
 8003068:	6923      	ldr	r3, [r4, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10b      	bne.n	8003086 <__swsetup_r+0xa6>
 800306e:	21a0      	movs	r1, #160	; 0xa0
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	0089      	lsls	r1, r1, #2
 8003076:	0092      	lsls	r2, r2, #2
 8003078:	400b      	ands	r3, r1
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <__swsetup_r+0xa6>
 800307e:	0021      	movs	r1, r4
 8003080:	0030      	movs	r0, r6
 8003082:	f000 f927 	bl	80032d4 <__smakebuf_r>
 8003086:	2301      	movs	r3, #1
 8003088:	89a2      	ldrh	r2, [r4, #12]
 800308a:	4013      	ands	r3, r2
 800308c:	d011      	beq.n	80030b2 <__swsetup_r+0xd2>
 800308e:	2300      	movs	r3, #0
 8003090:	60a3      	str	r3, [r4, #8]
 8003092:	6963      	ldr	r3, [r4, #20]
 8003094:	425b      	negs	r3, r3
 8003096:	61a3      	str	r3, [r4, #24]
 8003098:	2000      	movs	r0, #0
 800309a:	6923      	ldr	r3, [r4, #16]
 800309c:	4283      	cmp	r3, r0
 800309e:	d1be      	bne.n	800301e <__swsetup_r+0x3e>
 80030a0:	230c      	movs	r3, #12
 80030a2:	5ee2      	ldrsh	r2, [r4, r3]
 80030a4:	0613      	lsls	r3, r2, #24
 80030a6:	d5ba      	bpl.n	800301e <__swsetup_r+0x3e>
 80030a8:	2340      	movs	r3, #64	; 0x40
 80030aa:	4313      	orrs	r3, r2
 80030ac:	81a3      	strh	r3, [r4, #12]
 80030ae:	3801      	subs	r0, #1
 80030b0:	e7b5      	b.n	800301e <__swsetup_r+0x3e>
 80030b2:	0792      	lsls	r2, r2, #30
 80030b4:	d400      	bmi.n	80030b8 <__swsetup_r+0xd8>
 80030b6:	6963      	ldr	r3, [r4, #20]
 80030b8:	60a3      	str	r3, [r4, #8]
 80030ba:	e7ed      	b.n	8003098 <__swsetup_r+0xb8>
 80030bc:	20000004 	.word	0x20000004
 80030c0:	080035ac 	.word	0x080035ac
 80030c4:	080035cc 	.word	0x080035cc
 80030c8:	0800358c 	.word	0x0800358c

080030cc <_close_r>:
 80030cc:	2300      	movs	r3, #0
 80030ce:	b570      	push	{r4, r5, r6, lr}
 80030d0:	4c06      	ldr	r4, [pc, #24]	; (80030ec <_close_r+0x20>)
 80030d2:	0005      	movs	r5, r0
 80030d4:	0008      	movs	r0, r1
 80030d6:	6023      	str	r3, [r4, #0]
 80030d8:	f7fd fff2 	bl	80010c0 <_close>
 80030dc:	1c43      	adds	r3, r0, #1
 80030de:	d103      	bne.n	80030e8 <_close_r+0x1c>
 80030e0:	6823      	ldr	r3, [r4, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d000      	beq.n	80030e8 <_close_r+0x1c>
 80030e6:	602b      	str	r3, [r5, #0]
 80030e8:	bd70      	pop	{r4, r5, r6, pc}
 80030ea:	46c0      	nop			; (mov r8, r8)
 80030ec:	20000970 	.word	0x20000970

080030f0 <__sflush_r>:
 80030f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030f2:	898a      	ldrh	r2, [r1, #12]
 80030f4:	0005      	movs	r5, r0
 80030f6:	000c      	movs	r4, r1
 80030f8:	0713      	lsls	r3, r2, #28
 80030fa:	d460      	bmi.n	80031be <__sflush_r+0xce>
 80030fc:	684b      	ldr	r3, [r1, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	dc04      	bgt.n	800310c <__sflush_r+0x1c>
 8003102:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003104:	2b00      	cmp	r3, #0
 8003106:	dc01      	bgt.n	800310c <__sflush_r+0x1c>
 8003108:	2000      	movs	r0, #0
 800310a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800310c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800310e:	2f00      	cmp	r7, #0
 8003110:	d0fa      	beq.n	8003108 <__sflush_r+0x18>
 8003112:	2300      	movs	r3, #0
 8003114:	682e      	ldr	r6, [r5, #0]
 8003116:	602b      	str	r3, [r5, #0]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	015b      	lsls	r3, r3, #5
 800311c:	401a      	ands	r2, r3
 800311e:	d034      	beq.n	800318a <__sflush_r+0x9a>
 8003120:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003122:	89a3      	ldrh	r3, [r4, #12]
 8003124:	075b      	lsls	r3, r3, #29
 8003126:	d506      	bpl.n	8003136 <__sflush_r+0x46>
 8003128:	6863      	ldr	r3, [r4, #4]
 800312a:	1ac0      	subs	r0, r0, r3
 800312c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <__sflush_r+0x46>
 8003132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003134:	1ac0      	subs	r0, r0, r3
 8003136:	0002      	movs	r2, r0
 8003138:	6a21      	ldr	r1, [r4, #32]
 800313a:	2300      	movs	r3, #0
 800313c:	0028      	movs	r0, r5
 800313e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003140:	47b8      	blx	r7
 8003142:	89a1      	ldrh	r1, [r4, #12]
 8003144:	1c43      	adds	r3, r0, #1
 8003146:	d106      	bne.n	8003156 <__sflush_r+0x66>
 8003148:	682b      	ldr	r3, [r5, #0]
 800314a:	2b1d      	cmp	r3, #29
 800314c:	d831      	bhi.n	80031b2 <__sflush_r+0xc2>
 800314e:	4a2c      	ldr	r2, [pc, #176]	; (8003200 <__sflush_r+0x110>)
 8003150:	40da      	lsrs	r2, r3
 8003152:	07d3      	lsls	r3, r2, #31
 8003154:	d52d      	bpl.n	80031b2 <__sflush_r+0xc2>
 8003156:	2300      	movs	r3, #0
 8003158:	6063      	str	r3, [r4, #4]
 800315a:	6923      	ldr	r3, [r4, #16]
 800315c:	6023      	str	r3, [r4, #0]
 800315e:	04cb      	lsls	r3, r1, #19
 8003160:	d505      	bpl.n	800316e <__sflush_r+0x7e>
 8003162:	1c43      	adds	r3, r0, #1
 8003164:	d102      	bne.n	800316c <__sflush_r+0x7c>
 8003166:	682b      	ldr	r3, [r5, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d100      	bne.n	800316e <__sflush_r+0x7e>
 800316c:	6560      	str	r0, [r4, #84]	; 0x54
 800316e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003170:	602e      	str	r6, [r5, #0]
 8003172:	2900      	cmp	r1, #0
 8003174:	d0c8      	beq.n	8003108 <__sflush_r+0x18>
 8003176:	0023      	movs	r3, r4
 8003178:	3344      	adds	r3, #68	; 0x44
 800317a:	4299      	cmp	r1, r3
 800317c:	d002      	beq.n	8003184 <__sflush_r+0x94>
 800317e:	0028      	movs	r0, r5
 8003180:	f000 f8fa 	bl	8003378 <_free_r>
 8003184:	2000      	movs	r0, #0
 8003186:	6360      	str	r0, [r4, #52]	; 0x34
 8003188:	e7bf      	b.n	800310a <__sflush_r+0x1a>
 800318a:	2301      	movs	r3, #1
 800318c:	6a21      	ldr	r1, [r4, #32]
 800318e:	0028      	movs	r0, r5
 8003190:	47b8      	blx	r7
 8003192:	1c43      	adds	r3, r0, #1
 8003194:	d1c5      	bne.n	8003122 <__sflush_r+0x32>
 8003196:	682b      	ldr	r3, [r5, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d0c2      	beq.n	8003122 <__sflush_r+0x32>
 800319c:	2b1d      	cmp	r3, #29
 800319e:	d001      	beq.n	80031a4 <__sflush_r+0xb4>
 80031a0:	2b16      	cmp	r3, #22
 80031a2:	d101      	bne.n	80031a8 <__sflush_r+0xb8>
 80031a4:	602e      	str	r6, [r5, #0]
 80031a6:	e7af      	b.n	8003108 <__sflush_r+0x18>
 80031a8:	2340      	movs	r3, #64	; 0x40
 80031aa:	89a2      	ldrh	r2, [r4, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	81a3      	strh	r3, [r4, #12]
 80031b0:	e7ab      	b.n	800310a <__sflush_r+0x1a>
 80031b2:	2340      	movs	r3, #64	; 0x40
 80031b4:	430b      	orrs	r3, r1
 80031b6:	2001      	movs	r0, #1
 80031b8:	81a3      	strh	r3, [r4, #12]
 80031ba:	4240      	negs	r0, r0
 80031bc:	e7a5      	b.n	800310a <__sflush_r+0x1a>
 80031be:	690f      	ldr	r7, [r1, #16]
 80031c0:	2f00      	cmp	r7, #0
 80031c2:	d0a1      	beq.n	8003108 <__sflush_r+0x18>
 80031c4:	680b      	ldr	r3, [r1, #0]
 80031c6:	600f      	str	r7, [r1, #0]
 80031c8:	1bdb      	subs	r3, r3, r7
 80031ca:	9301      	str	r3, [sp, #4]
 80031cc:	2300      	movs	r3, #0
 80031ce:	0792      	lsls	r2, r2, #30
 80031d0:	d100      	bne.n	80031d4 <__sflush_r+0xe4>
 80031d2:	694b      	ldr	r3, [r1, #20]
 80031d4:	60a3      	str	r3, [r4, #8]
 80031d6:	9b01      	ldr	r3, [sp, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	dc00      	bgt.n	80031de <__sflush_r+0xee>
 80031dc:	e794      	b.n	8003108 <__sflush_r+0x18>
 80031de:	9b01      	ldr	r3, [sp, #4]
 80031e0:	003a      	movs	r2, r7
 80031e2:	6a21      	ldr	r1, [r4, #32]
 80031e4:	0028      	movs	r0, r5
 80031e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031e8:	47b0      	blx	r6
 80031ea:	2800      	cmp	r0, #0
 80031ec:	dc03      	bgt.n	80031f6 <__sflush_r+0x106>
 80031ee:	2340      	movs	r3, #64	; 0x40
 80031f0:	89a2      	ldrh	r2, [r4, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	e7df      	b.n	80031b6 <__sflush_r+0xc6>
 80031f6:	9b01      	ldr	r3, [sp, #4]
 80031f8:	183f      	adds	r7, r7, r0
 80031fa:	1a1b      	subs	r3, r3, r0
 80031fc:	9301      	str	r3, [sp, #4]
 80031fe:	e7ea      	b.n	80031d6 <__sflush_r+0xe6>
 8003200:	20400001 	.word	0x20400001

08003204 <_fflush_r>:
 8003204:	690b      	ldr	r3, [r1, #16]
 8003206:	b570      	push	{r4, r5, r6, lr}
 8003208:	0005      	movs	r5, r0
 800320a:	000c      	movs	r4, r1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <_fflush_r+0x10>
 8003210:	2000      	movs	r0, #0
 8003212:	bd70      	pop	{r4, r5, r6, pc}
 8003214:	2800      	cmp	r0, #0
 8003216:	d004      	beq.n	8003222 <_fflush_r+0x1e>
 8003218:	6983      	ldr	r3, [r0, #24]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <_fflush_r+0x1e>
 800321e:	f7ff fa57 	bl	80026d0 <__sinit>
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <_fflush_r+0x4c>)
 8003224:	429c      	cmp	r4, r3
 8003226:	d109      	bne.n	800323c <_fflush_r+0x38>
 8003228:	686c      	ldr	r4, [r5, #4]
 800322a:	220c      	movs	r2, #12
 800322c:	5ea3      	ldrsh	r3, [r4, r2]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d0ee      	beq.n	8003210 <_fflush_r+0xc>
 8003232:	0021      	movs	r1, r4
 8003234:	0028      	movs	r0, r5
 8003236:	f7ff ff5b 	bl	80030f0 <__sflush_r>
 800323a:	e7ea      	b.n	8003212 <_fflush_r+0xe>
 800323c:	4b05      	ldr	r3, [pc, #20]	; (8003254 <_fflush_r+0x50>)
 800323e:	429c      	cmp	r4, r3
 8003240:	d101      	bne.n	8003246 <_fflush_r+0x42>
 8003242:	68ac      	ldr	r4, [r5, #8]
 8003244:	e7f1      	b.n	800322a <_fflush_r+0x26>
 8003246:	4b04      	ldr	r3, [pc, #16]	; (8003258 <_fflush_r+0x54>)
 8003248:	429c      	cmp	r4, r3
 800324a:	d1ee      	bne.n	800322a <_fflush_r+0x26>
 800324c:	68ec      	ldr	r4, [r5, #12]
 800324e:	e7ec      	b.n	800322a <_fflush_r+0x26>
 8003250:	080035ac 	.word	0x080035ac
 8003254:	080035cc 	.word	0x080035cc
 8003258:	0800358c 	.word	0x0800358c

0800325c <_lseek_r>:
 800325c:	b570      	push	{r4, r5, r6, lr}
 800325e:	0005      	movs	r5, r0
 8003260:	0008      	movs	r0, r1
 8003262:	0011      	movs	r1, r2
 8003264:	2200      	movs	r2, #0
 8003266:	4c06      	ldr	r4, [pc, #24]	; (8003280 <_lseek_r+0x24>)
 8003268:	6022      	str	r2, [r4, #0]
 800326a:	001a      	movs	r2, r3
 800326c:	f7fd ff32 	bl	80010d4 <_lseek>
 8003270:	1c43      	adds	r3, r0, #1
 8003272:	d103      	bne.n	800327c <_lseek_r+0x20>
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d000      	beq.n	800327c <_lseek_r+0x20>
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	bd70      	pop	{r4, r5, r6, pc}
 800327e:	46c0      	nop			; (mov r8, r8)
 8003280:	20000970 	.word	0x20000970

08003284 <__swhatbuf_r>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	000e      	movs	r6, r1
 8003288:	001d      	movs	r5, r3
 800328a:	230e      	movs	r3, #14
 800328c:	5ec9      	ldrsh	r1, [r1, r3]
 800328e:	b090      	sub	sp, #64	; 0x40
 8003290:	0014      	movs	r4, r2
 8003292:	2900      	cmp	r1, #0
 8003294:	da07      	bge.n	80032a6 <__swhatbuf_r+0x22>
 8003296:	2300      	movs	r3, #0
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	89b3      	ldrh	r3, [r6, #12]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	d411      	bmi.n	80032c4 <__swhatbuf_r+0x40>
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	e00f      	b.n	80032c6 <__swhatbuf_r+0x42>
 80032a6:	aa01      	add	r2, sp, #4
 80032a8:	f000 f8c4 	bl	8003434 <_fstat_r>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	dbf2      	blt.n	8003296 <__swhatbuf_r+0x12>
 80032b0:	22f0      	movs	r2, #240	; 0xf0
 80032b2:	9b02      	ldr	r3, [sp, #8]
 80032b4:	0212      	lsls	r2, r2, #8
 80032b6:	4013      	ands	r3, r2
 80032b8:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <__swhatbuf_r+0x4c>)
 80032ba:	189b      	adds	r3, r3, r2
 80032bc:	425a      	negs	r2, r3
 80032be:	4153      	adcs	r3, r2
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	e7ed      	b.n	80032a0 <__swhatbuf_r+0x1c>
 80032c4:	2340      	movs	r3, #64	; 0x40
 80032c6:	2000      	movs	r0, #0
 80032c8:	6023      	str	r3, [r4, #0]
 80032ca:	b010      	add	sp, #64	; 0x40
 80032cc:	bd70      	pop	{r4, r5, r6, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	ffffe000 	.word	0xffffe000

080032d4 <__smakebuf_r>:
 80032d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80032d6:	2602      	movs	r6, #2
 80032d8:	898b      	ldrh	r3, [r1, #12]
 80032da:	0005      	movs	r5, r0
 80032dc:	000c      	movs	r4, r1
 80032de:	4233      	tst	r3, r6
 80032e0:	d006      	beq.n	80032f0 <__smakebuf_r+0x1c>
 80032e2:	0023      	movs	r3, r4
 80032e4:	3347      	adds	r3, #71	; 0x47
 80032e6:	6023      	str	r3, [r4, #0]
 80032e8:	6123      	str	r3, [r4, #16]
 80032ea:	2301      	movs	r3, #1
 80032ec:	6163      	str	r3, [r4, #20]
 80032ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80032f0:	ab01      	add	r3, sp, #4
 80032f2:	466a      	mov	r2, sp
 80032f4:	f7ff ffc6 	bl	8003284 <__swhatbuf_r>
 80032f8:	9900      	ldr	r1, [sp, #0]
 80032fa:	0007      	movs	r7, r0
 80032fc:	0028      	movs	r0, r5
 80032fe:	f7ff fa7d 	bl	80027fc <_malloc_r>
 8003302:	2800      	cmp	r0, #0
 8003304:	d108      	bne.n	8003318 <__smakebuf_r+0x44>
 8003306:	220c      	movs	r2, #12
 8003308:	5ea3      	ldrsh	r3, [r4, r2]
 800330a:	059a      	lsls	r2, r3, #22
 800330c:	d4ef      	bmi.n	80032ee <__smakebuf_r+0x1a>
 800330e:	2203      	movs	r2, #3
 8003310:	4393      	bics	r3, r2
 8003312:	431e      	orrs	r6, r3
 8003314:	81a6      	strh	r6, [r4, #12]
 8003316:	e7e4      	b.n	80032e2 <__smakebuf_r+0xe>
 8003318:	4b0f      	ldr	r3, [pc, #60]	; (8003358 <__smakebuf_r+0x84>)
 800331a:	62ab      	str	r3, [r5, #40]	; 0x28
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	89a2      	ldrh	r2, [r4, #12]
 8003320:	6020      	str	r0, [r4, #0]
 8003322:	4313      	orrs	r3, r2
 8003324:	81a3      	strh	r3, [r4, #12]
 8003326:	9b00      	ldr	r3, [sp, #0]
 8003328:	6120      	str	r0, [r4, #16]
 800332a:	6163      	str	r3, [r4, #20]
 800332c:	9b01      	ldr	r3, [sp, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00d      	beq.n	800334e <__smakebuf_r+0x7a>
 8003332:	230e      	movs	r3, #14
 8003334:	5ee1      	ldrsh	r1, [r4, r3]
 8003336:	0028      	movs	r0, r5
 8003338:	f000 f88e 	bl	8003458 <_isatty_r>
 800333c:	2800      	cmp	r0, #0
 800333e:	d006      	beq.n	800334e <__smakebuf_r+0x7a>
 8003340:	2203      	movs	r2, #3
 8003342:	89a3      	ldrh	r3, [r4, #12]
 8003344:	4393      	bics	r3, r2
 8003346:	001a      	movs	r2, r3
 8003348:	2301      	movs	r3, #1
 800334a:	4313      	orrs	r3, r2
 800334c:	81a3      	strh	r3, [r4, #12]
 800334e:	89a0      	ldrh	r0, [r4, #12]
 8003350:	4338      	orrs	r0, r7
 8003352:	81a0      	strh	r0, [r4, #12]
 8003354:	e7cb      	b.n	80032ee <__smakebuf_r+0x1a>
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	0800264d 	.word	0x0800264d

0800335c <memchr>:
 800335c:	b2c9      	uxtb	r1, r1
 800335e:	1882      	adds	r2, r0, r2
 8003360:	4290      	cmp	r0, r2
 8003362:	d101      	bne.n	8003368 <memchr+0xc>
 8003364:	2000      	movs	r0, #0
 8003366:	4770      	bx	lr
 8003368:	7803      	ldrb	r3, [r0, #0]
 800336a:	428b      	cmp	r3, r1
 800336c:	d0fb      	beq.n	8003366 <memchr+0xa>
 800336e:	3001      	adds	r0, #1
 8003370:	e7f6      	b.n	8003360 <memchr+0x4>

08003372 <__malloc_lock>:
 8003372:	4770      	bx	lr

08003374 <__malloc_unlock>:
 8003374:	4770      	bx	lr
	...

08003378 <_free_r>:
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	0005      	movs	r5, r0
 800337c:	2900      	cmp	r1, #0
 800337e:	d010      	beq.n	80033a2 <_free_r+0x2a>
 8003380:	1f0c      	subs	r4, r1, #4
 8003382:	6823      	ldr	r3, [r4, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	da00      	bge.n	800338a <_free_r+0x12>
 8003388:	18e4      	adds	r4, r4, r3
 800338a:	0028      	movs	r0, r5
 800338c:	f7ff fff1 	bl	8003372 <__malloc_lock>
 8003390:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <_free_r+0x90>)
 8003392:	6813      	ldr	r3, [r2, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d105      	bne.n	80033a4 <_free_r+0x2c>
 8003398:	6063      	str	r3, [r4, #4]
 800339a:	6014      	str	r4, [r2, #0]
 800339c:	0028      	movs	r0, r5
 800339e:	f7ff ffe9 	bl	8003374 <__malloc_unlock>
 80033a2:	bd70      	pop	{r4, r5, r6, pc}
 80033a4:	42a3      	cmp	r3, r4
 80033a6:	d909      	bls.n	80033bc <_free_r+0x44>
 80033a8:	6821      	ldr	r1, [r4, #0]
 80033aa:	1860      	adds	r0, r4, r1
 80033ac:	4283      	cmp	r3, r0
 80033ae:	d1f3      	bne.n	8003398 <_free_r+0x20>
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	1841      	adds	r1, r0, r1
 80033b6:	6021      	str	r1, [r4, #0]
 80033b8:	e7ee      	b.n	8003398 <_free_r+0x20>
 80033ba:	0013      	movs	r3, r2
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	2a00      	cmp	r2, #0
 80033c0:	d001      	beq.n	80033c6 <_free_r+0x4e>
 80033c2:	42a2      	cmp	r2, r4
 80033c4:	d9f9      	bls.n	80033ba <_free_r+0x42>
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	1858      	adds	r0, r3, r1
 80033ca:	42a0      	cmp	r0, r4
 80033cc:	d10b      	bne.n	80033e6 <_free_r+0x6e>
 80033ce:	6820      	ldr	r0, [r4, #0]
 80033d0:	1809      	adds	r1, r1, r0
 80033d2:	1858      	adds	r0, r3, r1
 80033d4:	6019      	str	r1, [r3, #0]
 80033d6:	4282      	cmp	r2, r0
 80033d8:	d1e0      	bne.n	800339c <_free_r+0x24>
 80033da:	6810      	ldr	r0, [r2, #0]
 80033dc:	6852      	ldr	r2, [r2, #4]
 80033de:	1841      	adds	r1, r0, r1
 80033e0:	6019      	str	r1, [r3, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	e7da      	b.n	800339c <_free_r+0x24>
 80033e6:	42a0      	cmp	r0, r4
 80033e8:	d902      	bls.n	80033f0 <_free_r+0x78>
 80033ea:	230c      	movs	r3, #12
 80033ec:	602b      	str	r3, [r5, #0]
 80033ee:	e7d5      	b.n	800339c <_free_r+0x24>
 80033f0:	6821      	ldr	r1, [r4, #0]
 80033f2:	1860      	adds	r0, r4, r1
 80033f4:	4282      	cmp	r2, r0
 80033f6:	d103      	bne.n	8003400 <_free_r+0x88>
 80033f8:	6810      	ldr	r0, [r2, #0]
 80033fa:	6852      	ldr	r2, [r2, #4]
 80033fc:	1841      	adds	r1, r0, r1
 80033fe:	6021      	str	r1, [r4, #0]
 8003400:	6062      	str	r2, [r4, #4]
 8003402:	605c      	str	r4, [r3, #4]
 8003404:	e7ca      	b.n	800339c <_free_r+0x24>
 8003406:	46c0      	nop			; (mov r8, r8)
 8003408:	2000008c 	.word	0x2000008c

0800340c <_read_r>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	0005      	movs	r5, r0
 8003410:	0008      	movs	r0, r1
 8003412:	0011      	movs	r1, r2
 8003414:	2200      	movs	r2, #0
 8003416:	4c06      	ldr	r4, [pc, #24]	; (8003430 <_read_r+0x24>)
 8003418:	6022      	str	r2, [r4, #0]
 800341a:	001a      	movs	r2, r3
 800341c:	f7fd fe19 	bl	8001052 <_read>
 8003420:	1c43      	adds	r3, r0, #1
 8003422:	d103      	bne.n	800342c <_read_r+0x20>
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d000      	beq.n	800342c <_read_r+0x20>
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	bd70      	pop	{r4, r5, r6, pc}
 800342e:	46c0      	nop			; (mov r8, r8)
 8003430:	20000970 	.word	0x20000970

08003434 <_fstat_r>:
 8003434:	2300      	movs	r3, #0
 8003436:	b570      	push	{r4, r5, r6, lr}
 8003438:	4c06      	ldr	r4, [pc, #24]	; (8003454 <_fstat_r+0x20>)
 800343a:	0005      	movs	r5, r0
 800343c:	0008      	movs	r0, r1
 800343e:	0011      	movs	r1, r2
 8003440:	6023      	str	r3, [r4, #0]
 8003442:	f7fd fe40 	bl	80010c6 <_fstat>
 8003446:	1c43      	adds	r3, r0, #1
 8003448:	d103      	bne.n	8003452 <_fstat_r+0x1e>
 800344a:	6823      	ldr	r3, [r4, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d000      	beq.n	8003452 <_fstat_r+0x1e>
 8003450:	602b      	str	r3, [r5, #0]
 8003452:	bd70      	pop	{r4, r5, r6, pc}
 8003454:	20000970 	.word	0x20000970

08003458 <_isatty_r>:
 8003458:	2300      	movs	r3, #0
 800345a:	b570      	push	{r4, r5, r6, lr}
 800345c:	4c06      	ldr	r4, [pc, #24]	; (8003478 <_isatty_r+0x20>)
 800345e:	0005      	movs	r5, r0
 8003460:	0008      	movs	r0, r1
 8003462:	6023      	str	r3, [r4, #0]
 8003464:	f7fd fe34 	bl	80010d0 <_isatty>
 8003468:	1c43      	adds	r3, r0, #1
 800346a:	d103      	bne.n	8003474 <_isatty_r+0x1c>
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d000      	beq.n	8003474 <_isatty_r+0x1c>
 8003472:	602b      	str	r3, [r5, #0]
 8003474:	bd70      	pop	{r4, r5, r6, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	20000970 	.word	0x20000970

0800347c <_init>:
 800347c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347e:	46c0      	nop			; (mov r8, r8)
 8003480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003482:	bc08      	pop	{r3}
 8003484:	469e      	mov	lr, r3
 8003486:	4770      	bx	lr

08003488 <_fini>:
 8003488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800348a:	46c0      	nop			; (mov r8, r8)
 800348c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800348e:	bc08      	pop	{r3}
 8003490:	469e      	mov	lr, r3
 8003492:	4770      	bx	lr
