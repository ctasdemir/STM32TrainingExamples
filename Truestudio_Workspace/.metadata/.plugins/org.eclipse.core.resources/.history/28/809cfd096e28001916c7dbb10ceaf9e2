
ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002780  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002840  08002840  00012840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028fc  080028fc  000128fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002900  08002900  00012900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000068  20000000  08002904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000954  20000068  0800296c  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200009bc  0800296c  000209bc  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_line   00004bc8  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000f2c1  00000000  00000000  00024c58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002055  00000000  00000000  00033f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000758  00000000  00000000  00035f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000908  00000000  00000000  000366c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005c21  00000000  00000000  00036fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a50  00000000  00000000  0003cbf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003f641  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000018cc  00000000  00000000  0003f6c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002828 	.word	0x08002828

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002828 	.word	0x08002828

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_dmul>:
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	4657      	mov	r7, sl
 8000238:	4645      	mov	r5, r8
 800023a:	46de      	mov	lr, fp
 800023c:	464e      	mov	r6, r9
 800023e:	b5e0      	push	{r5, r6, r7, lr}
 8000240:	030c      	lsls	r4, r1, #12
 8000242:	4698      	mov	r8, r3
 8000244:	004e      	lsls	r6, r1, #1
 8000246:	0b23      	lsrs	r3, r4, #12
 8000248:	b087      	sub	sp, #28
 800024a:	0007      	movs	r7, r0
 800024c:	4692      	mov	sl, r2
 800024e:	469b      	mov	fp, r3
 8000250:	0d76      	lsrs	r6, r6, #21
 8000252:	0fcd      	lsrs	r5, r1, #31
 8000254:	2e00      	cmp	r6, #0
 8000256:	d06b      	beq.n	8000330 <__aeabi_dmul+0xfc>
 8000258:	4b6d      	ldr	r3, [pc, #436]	; (8000410 <__aeabi_dmul+0x1dc>)
 800025a:	429e      	cmp	r6, r3
 800025c:	d035      	beq.n	80002ca <__aeabi_dmul+0x96>
 800025e:	2480      	movs	r4, #128	; 0x80
 8000260:	465b      	mov	r3, fp
 8000262:	0f42      	lsrs	r2, r0, #29
 8000264:	0424      	lsls	r4, r4, #16
 8000266:	00db      	lsls	r3, r3, #3
 8000268:	4314      	orrs	r4, r2
 800026a:	431c      	orrs	r4, r3
 800026c:	00c3      	lsls	r3, r0, #3
 800026e:	4699      	mov	r9, r3
 8000270:	4b68      	ldr	r3, [pc, #416]	; (8000414 <__aeabi_dmul+0x1e0>)
 8000272:	46a3      	mov	fp, r4
 8000274:	469c      	mov	ip, r3
 8000276:	2300      	movs	r3, #0
 8000278:	2700      	movs	r7, #0
 800027a:	4466      	add	r6, ip
 800027c:	9302      	str	r3, [sp, #8]
 800027e:	4643      	mov	r3, r8
 8000280:	031c      	lsls	r4, r3, #12
 8000282:	005a      	lsls	r2, r3, #1
 8000284:	0fdb      	lsrs	r3, r3, #31
 8000286:	4650      	mov	r0, sl
 8000288:	0b24      	lsrs	r4, r4, #12
 800028a:	0d52      	lsrs	r2, r2, #21
 800028c:	4698      	mov	r8, r3
 800028e:	d100      	bne.n	8000292 <__aeabi_dmul+0x5e>
 8000290:	e076      	b.n	8000380 <__aeabi_dmul+0x14c>
 8000292:	4b5f      	ldr	r3, [pc, #380]	; (8000410 <__aeabi_dmul+0x1dc>)
 8000294:	429a      	cmp	r2, r3
 8000296:	d06d      	beq.n	8000374 <__aeabi_dmul+0x140>
 8000298:	2380      	movs	r3, #128	; 0x80
 800029a:	0f41      	lsrs	r1, r0, #29
 800029c:	041b      	lsls	r3, r3, #16
 800029e:	430b      	orrs	r3, r1
 80002a0:	495c      	ldr	r1, [pc, #368]	; (8000414 <__aeabi_dmul+0x1e0>)
 80002a2:	00e4      	lsls	r4, r4, #3
 80002a4:	468c      	mov	ip, r1
 80002a6:	431c      	orrs	r4, r3
 80002a8:	00c3      	lsls	r3, r0, #3
 80002aa:	2000      	movs	r0, #0
 80002ac:	4462      	add	r2, ip
 80002ae:	4641      	mov	r1, r8
 80002b0:	18b6      	adds	r6, r6, r2
 80002b2:	4069      	eors	r1, r5
 80002b4:	1c72      	adds	r2, r6, #1
 80002b6:	9101      	str	r1, [sp, #4]
 80002b8:	4694      	mov	ip, r2
 80002ba:	4307      	orrs	r7, r0
 80002bc:	2f0f      	cmp	r7, #15
 80002be:	d900      	bls.n	80002c2 <__aeabi_dmul+0x8e>
 80002c0:	e0b0      	b.n	8000424 <__aeabi_dmul+0x1f0>
 80002c2:	4a55      	ldr	r2, [pc, #340]	; (8000418 <__aeabi_dmul+0x1e4>)
 80002c4:	00bf      	lsls	r7, r7, #2
 80002c6:	59d2      	ldr	r2, [r2, r7]
 80002c8:	4697      	mov	pc, r2
 80002ca:	465b      	mov	r3, fp
 80002cc:	4303      	orrs	r3, r0
 80002ce:	4699      	mov	r9, r3
 80002d0:	d000      	beq.n	80002d4 <__aeabi_dmul+0xa0>
 80002d2:	e087      	b.n	80003e4 <__aeabi_dmul+0x1b0>
 80002d4:	2300      	movs	r3, #0
 80002d6:	469b      	mov	fp, r3
 80002d8:	3302      	adds	r3, #2
 80002da:	2708      	movs	r7, #8
 80002dc:	9302      	str	r3, [sp, #8]
 80002de:	e7ce      	b.n	800027e <__aeabi_dmul+0x4a>
 80002e0:	4642      	mov	r2, r8
 80002e2:	9201      	str	r2, [sp, #4]
 80002e4:	2802      	cmp	r0, #2
 80002e6:	d067      	beq.n	80003b8 <__aeabi_dmul+0x184>
 80002e8:	2803      	cmp	r0, #3
 80002ea:	d100      	bne.n	80002ee <__aeabi_dmul+0xba>
 80002ec:	e20e      	b.n	800070c <__aeabi_dmul+0x4d8>
 80002ee:	2801      	cmp	r0, #1
 80002f0:	d000      	beq.n	80002f4 <__aeabi_dmul+0xc0>
 80002f2:	e162      	b.n	80005ba <__aeabi_dmul+0x386>
 80002f4:	2300      	movs	r3, #0
 80002f6:	2400      	movs	r4, #0
 80002f8:	2200      	movs	r2, #0
 80002fa:	4699      	mov	r9, r3
 80002fc:	9901      	ldr	r1, [sp, #4]
 80002fe:	4001      	ands	r1, r0
 8000300:	b2cd      	uxtb	r5, r1
 8000302:	2100      	movs	r1, #0
 8000304:	0312      	lsls	r2, r2, #12
 8000306:	0d0b      	lsrs	r3, r1, #20
 8000308:	0b12      	lsrs	r2, r2, #12
 800030a:	051b      	lsls	r3, r3, #20
 800030c:	4313      	orrs	r3, r2
 800030e:	4a43      	ldr	r2, [pc, #268]	; (800041c <__aeabi_dmul+0x1e8>)
 8000310:	0524      	lsls	r4, r4, #20
 8000312:	4013      	ands	r3, r2
 8000314:	431c      	orrs	r4, r3
 8000316:	0064      	lsls	r4, r4, #1
 8000318:	07ed      	lsls	r5, r5, #31
 800031a:	0864      	lsrs	r4, r4, #1
 800031c:	432c      	orrs	r4, r5
 800031e:	4648      	mov	r0, r9
 8000320:	0021      	movs	r1, r4
 8000322:	b007      	add	sp, #28
 8000324:	bc3c      	pop	{r2, r3, r4, r5}
 8000326:	4690      	mov	r8, r2
 8000328:	4699      	mov	r9, r3
 800032a:	46a2      	mov	sl, r4
 800032c:	46ab      	mov	fp, r5
 800032e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000330:	4303      	orrs	r3, r0
 8000332:	4699      	mov	r9, r3
 8000334:	d04f      	beq.n	80003d6 <__aeabi_dmul+0x1a2>
 8000336:	465b      	mov	r3, fp
 8000338:	2b00      	cmp	r3, #0
 800033a:	d100      	bne.n	800033e <__aeabi_dmul+0x10a>
 800033c:	e189      	b.n	8000652 <__aeabi_dmul+0x41e>
 800033e:	4658      	mov	r0, fp
 8000340:	f000 fb16 	bl	8000970 <__clzsi2>
 8000344:	0003      	movs	r3, r0
 8000346:	3b0b      	subs	r3, #11
 8000348:	2b1c      	cmp	r3, #28
 800034a:	dd00      	ble.n	800034e <__aeabi_dmul+0x11a>
 800034c:	e17a      	b.n	8000644 <__aeabi_dmul+0x410>
 800034e:	221d      	movs	r2, #29
 8000350:	1ad3      	subs	r3, r2, r3
 8000352:	003a      	movs	r2, r7
 8000354:	0001      	movs	r1, r0
 8000356:	465c      	mov	r4, fp
 8000358:	40da      	lsrs	r2, r3
 800035a:	3908      	subs	r1, #8
 800035c:	408c      	lsls	r4, r1
 800035e:	0013      	movs	r3, r2
 8000360:	408f      	lsls	r7, r1
 8000362:	4323      	orrs	r3, r4
 8000364:	469b      	mov	fp, r3
 8000366:	46b9      	mov	r9, r7
 8000368:	2300      	movs	r3, #0
 800036a:	4e2d      	ldr	r6, [pc, #180]	; (8000420 <__aeabi_dmul+0x1ec>)
 800036c:	2700      	movs	r7, #0
 800036e:	1a36      	subs	r6, r6, r0
 8000370:	9302      	str	r3, [sp, #8]
 8000372:	e784      	b.n	800027e <__aeabi_dmul+0x4a>
 8000374:	4653      	mov	r3, sl
 8000376:	4323      	orrs	r3, r4
 8000378:	d12a      	bne.n	80003d0 <__aeabi_dmul+0x19c>
 800037a:	2400      	movs	r4, #0
 800037c:	2002      	movs	r0, #2
 800037e:	e796      	b.n	80002ae <__aeabi_dmul+0x7a>
 8000380:	4653      	mov	r3, sl
 8000382:	4323      	orrs	r3, r4
 8000384:	d020      	beq.n	80003c8 <__aeabi_dmul+0x194>
 8000386:	2c00      	cmp	r4, #0
 8000388:	d100      	bne.n	800038c <__aeabi_dmul+0x158>
 800038a:	e157      	b.n	800063c <__aeabi_dmul+0x408>
 800038c:	0020      	movs	r0, r4
 800038e:	f000 faef 	bl	8000970 <__clzsi2>
 8000392:	0003      	movs	r3, r0
 8000394:	3b0b      	subs	r3, #11
 8000396:	2b1c      	cmp	r3, #28
 8000398:	dd00      	ble.n	800039c <__aeabi_dmul+0x168>
 800039a:	e149      	b.n	8000630 <__aeabi_dmul+0x3fc>
 800039c:	211d      	movs	r1, #29
 800039e:	1acb      	subs	r3, r1, r3
 80003a0:	4651      	mov	r1, sl
 80003a2:	0002      	movs	r2, r0
 80003a4:	40d9      	lsrs	r1, r3
 80003a6:	4653      	mov	r3, sl
 80003a8:	3a08      	subs	r2, #8
 80003aa:	4094      	lsls	r4, r2
 80003ac:	4093      	lsls	r3, r2
 80003ae:	430c      	orrs	r4, r1
 80003b0:	4a1b      	ldr	r2, [pc, #108]	; (8000420 <__aeabi_dmul+0x1ec>)
 80003b2:	1a12      	subs	r2, r2, r0
 80003b4:	2000      	movs	r0, #0
 80003b6:	e77a      	b.n	80002ae <__aeabi_dmul+0x7a>
 80003b8:	2501      	movs	r5, #1
 80003ba:	9b01      	ldr	r3, [sp, #4]
 80003bc:	4c14      	ldr	r4, [pc, #80]	; (8000410 <__aeabi_dmul+0x1dc>)
 80003be:	401d      	ands	r5, r3
 80003c0:	2300      	movs	r3, #0
 80003c2:	2200      	movs	r2, #0
 80003c4:	4699      	mov	r9, r3
 80003c6:	e79c      	b.n	8000302 <__aeabi_dmul+0xce>
 80003c8:	2400      	movs	r4, #0
 80003ca:	2200      	movs	r2, #0
 80003cc:	2001      	movs	r0, #1
 80003ce:	e76e      	b.n	80002ae <__aeabi_dmul+0x7a>
 80003d0:	4653      	mov	r3, sl
 80003d2:	2003      	movs	r0, #3
 80003d4:	e76b      	b.n	80002ae <__aeabi_dmul+0x7a>
 80003d6:	2300      	movs	r3, #0
 80003d8:	469b      	mov	fp, r3
 80003da:	3301      	adds	r3, #1
 80003dc:	2704      	movs	r7, #4
 80003de:	2600      	movs	r6, #0
 80003e0:	9302      	str	r3, [sp, #8]
 80003e2:	e74c      	b.n	800027e <__aeabi_dmul+0x4a>
 80003e4:	2303      	movs	r3, #3
 80003e6:	4681      	mov	r9, r0
 80003e8:	270c      	movs	r7, #12
 80003ea:	9302      	str	r3, [sp, #8]
 80003ec:	e747      	b.n	800027e <__aeabi_dmul+0x4a>
 80003ee:	2280      	movs	r2, #128	; 0x80
 80003f0:	2300      	movs	r3, #0
 80003f2:	2500      	movs	r5, #0
 80003f4:	0312      	lsls	r2, r2, #12
 80003f6:	4699      	mov	r9, r3
 80003f8:	4c05      	ldr	r4, [pc, #20]	; (8000410 <__aeabi_dmul+0x1dc>)
 80003fa:	e782      	b.n	8000302 <__aeabi_dmul+0xce>
 80003fc:	465c      	mov	r4, fp
 80003fe:	464b      	mov	r3, r9
 8000400:	9802      	ldr	r0, [sp, #8]
 8000402:	e76f      	b.n	80002e4 <__aeabi_dmul+0xb0>
 8000404:	465c      	mov	r4, fp
 8000406:	464b      	mov	r3, r9
 8000408:	9501      	str	r5, [sp, #4]
 800040a:	9802      	ldr	r0, [sp, #8]
 800040c:	e76a      	b.n	80002e4 <__aeabi_dmul+0xb0>
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	000007ff 	.word	0x000007ff
 8000414:	fffffc01 	.word	0xfffffc01
 8000418:	08002860 	.word	0x08002860
 800041c:	800fffff 	.word	0x800fffff
 8000420:	fffffc0d 	.word	0xfffffc0d
 8000424:	464a      	mov	r2, r9
 8000426:	4649      	mov	r1, r9
 8000428:	0c17      	lsrs	r7, r2, #16
 800042a:	0c1a      	lsrs	r2, r3, #16
 800042c:	041b      	lsls	r3, r3, #16
 800042e:	0c1b      	lsrs	r3, r3, #16
 8000430:	0408      	lsls	r0, r1, #16
 8000432:	0019      	movs	r1, r3
 8000434:	0c00      	lsrs	r0, r0, #16
 8000436:	4341      	muls	r1, r0
 8000438:	0015      	movs	r5, r2
 800043a:	4688      	mov	r8, r1
 800043c:	0019      	movs	r1, r3
 800043e:	437d      	muls	r5, r7
 8000440:	4379      	muls	r1, r7
 8000442:	9503      	str	r5, [sp, #12]
 8000444:	4689      	mov	r9, r1
 8000446:	0029      	movs	r1, r5
 8000448:	0015      	movs	r5, r2
 800044a:	4345      	muls	r5, r0
 800044c:	444d      	add	r5, r9
 800044e:	9502      	str	r5, [sp, #8]
 8000450:	4645      	mov	r5, r8
 8000452:	0c2d      	lsrs	r5, r5, #16
 8000454:	46aa      	mov	sl, r5
 8000456:	9d02      	ldr	r5, [sp, #8]
 8000458:	4455      	add	r5, sl
 800045a:	45a9      	cmp	r9, r5
 800045c:	d906      	bls.n	800046c <__aeabi_dmul+0x238>
 800045e:	468a      	mov	sl, r1
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	0249      	lsls	r1, r1, #9
 8000464:	4689      	mov	r9, r1
 8000466:	44ca      	add	sl, r9
 8000468:	4651      	mov	r1, sl
 800046a:	9103      	str	r1, [sp, #12]
 800046c:	0c29      	lsrs	r1, r5, #16
 800046e:	9104      	str	r1, [sp, #16]
 8000470:	4641      	mov	r1, r8
 8000472:	0409      	lsls	r1, r1, #16
 8000474:	042d      	lsls	r5, r5, #16
 8000476:	0c09      	lsrs	r1, r1, #16
 8000478:	4688      	mov	r8, r1
 800047a:	0029      	movs	r1, r5
 800047c:	0c25      	lsrs	r5, r4, #16
 800047e:	0424      	lsls	r4, r4, #16
 8000480:	4441      	add	r1, r8
 8000482:	0c24      	lsrs	r4, r4, #16
 8000484:	9105      	str	r1, [sp, #20]
 8000486:	0021      	movs	r1, r4
 8000488:	4341      	muls	r1, r0
 800048a:	4688      	mov	r8, r1
 800048c:	0021      	movs	r1, r4
 800048e:	4379      	muls	r1, r7
 8000490:	468a      	mov	sl, r1
 8000492:	4368      	muls	r0, r5
 8000494:	4641      	mov	r1, r8
 8000496:	4450      	add	r0, sl
 8000498:	4681      	mov	r9, r0
 800049a:	0c08      	lsrs	r0, r1, #16
 800049c:	4448      	add	r0, r9
 800049e:	436f      	muls	r7, r5
 80004a0:	4582      	cmp	sl, r0
 80004a2:	d903      	bls.n	80004ac <__aeabi_dmul+0x278>
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	0249      	lsls	r1, r1, #9
 80004a8:	4689      	mov	r9, r1
 80004aa:	444f      	add	r7, r9
 80004ac:	0c01      	lsrs	r1, r0, #16
 80004ae:	4689      	mov	r9, r1
 80004b0:	0039      	movs	r1, r7
 80004b2:	4449      	add	r1, r9
 80004b4:	9102      	str	r1, [sp, #8]
 80004b6:	4641      	mov	r1, r8
 80004b8:	040f      	lsls	r7, r1, #16
 80004ba:	9904      	ldr	r1, [sp, #16]
 80004bc:	0c3f      	lsrs	r7, r7, #16
 80004be:	4688      	mov	r8, r1
 80004c0:	0400      	lsls	r0, r0, #16
 80004c2:	19c0      	adds	r0, r0, r7
 80004c4:	4480      	add	r8, r0
 80004c6:	4641      	mov	r1, r8
 80004c8:	9104      	str	r1, [sp, #16]
 80004ca:	4659      	mov	r1, fp
 80004cc:	0c0f      	lsrs	r7, r1, #16
 80004ce:	0409      	lsls	r1, r1, #16
 80004d0:	0c09      	lsrs	r1, r1, #16
 80004d2:	4688      	mov	r8, r1
 80004d4:	4359      	muls	r1, r3
 80004d6:	468a      	mov	sl, r1
 80004d8:	0039      	movs	r1, r7
 80004da:	4351      	muls	r1, r2
 80004dc:	4689      	mov	r9, r1
 80004de:	4641      	mov	r1, r8
 80004e0:	434a      	muls	r2, r1
 80004e2:	4651      	mov	r1, sl
 80004e4:	0c09      	lsrs	r1, r1, #16
 80004e6:	468b      	mov	fp, r1
 80004e8:	437b      	muls	r3, r7
 80004ea:	18d2      	adds	r2, r2, r3
 80004ec:	445a      	add	r2, fp
 80004ee:	4293      	cmp	r3, r2
 80004f0:	d903      	bls.n	80004fa <__aeabi_dmul+0x2c6>
 80004f2:	2380      	movs	r3, #128	; 0x80
 80004f4:	025b      	lsls	r3, r3, #9
 80004f6:	469b      	mov	fp, r3
 80004f8:	44d9      	add	r9, fp
 80004fa:	4651      	mov	r1, sl
 80004fc:	0409      	lsls	r1, r1, #16
 80004fe:	0c09      	lsrs	r1, r1, #16
 8000500:	468a      	mov	sl, r1
 8000502:	4641      	mov	r1, r8
 8000504:	4361      	muls	r1, r4
 8000506:	437c      	muls	r4, r7
 8000508:	0c13      	lsrs	r3, r2, #16
 800050a:	0412      	lsls	r2, r2, #16
 800050c:	444b      	add	r3, r9
 800050e:	4452      	add	r2, sl
 8000510:	46a1      	mov	r9, r4
 8000512:	468a      	mov	sl, r1
 8000514:	003c      	movs	r4, r7
 8000516:	4641      	mov	r1, r8
 8000518:	436c      	muls	r4, r5
 800051a:	434d      	muls	r5, r1
 800051c:	4651      	mov	r1, sl
 800051e:	444d      	add	r5, r9
 8000520:	0c0f      	lsrs	r7, r1, #16
 8000522:	197d      	adds	r5, r7, r5
 8000524:	45a9      	cmp	r9, r5
 8000526:	d903      	bls.n	8000530 <__aeabi_dmul+0x2fc>
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	0249      	lsls	r1, r1, #9
 800052c:	4688      	mov	r8, r1
 800052e:	4444      	add	r4, r8
 8000530:	9f04      	ldr	r7, [sp, #16]
 8000532:	9903      	ldr	r1, [sp, #12]
 8000534:	46b8      	mov	r8, r7
 8000536:	4441      	add	r1, r8
 8000538:	468b      	mov	fp, r1
 800053a:	4583      	cmp	fp, r0
 800053c:	4180      	sbcs	r0, r0
 800053e:	4241      	negs	r1, r0
 8000540:	4688      	mov	r8, r1
 8000542:	4651      	mov	r1, sl
 8000544:	0408      	lsls	r0, r1, #16
 8000546:	042f      	lsls	r7, r5, #16
 8000548:	0c00      	lsrs	r0, r0, #16
 800054a:	183f      	adds	r7, r7, r0
 800054c:	4658      	mov	r0, fp
 800054e:	9902      	ldr	r1, [sp, #8]
 8000550:	1810      	adds	r0, r2, r0
 8000552:	4689      	mov	r9, r1
 8000554:	4290      	cmp	r0, r2
 8000556:	4192      	sbcs	r2, r2
 8000558:	444f      	add	r7, r9
 800055a:	46ba      	mov	sl, r7
 800055c:	4252      	negs	r2, r2
 800055e:	4699      	mov	r9, r3
 8000560:	4693      	mov	fp, r2
 8000562:	44c2      	add	sl, r8
 8000564:	44d1      	add	r9, sl
 8000566:	44cb      	add	fp, r9
 8000568:	428f      	cmp	r7, r1
 800056a:	41bf      	sbcs	r7, r7
 800056c:	45c2      	cmp	sl, r8
 800056e:	4189      	sbcs	r1, r1
 8000570:	4599      	cmp	r9, r3
 8000572:	419b      	sbcs	r3, r3
 8000574:	4593      	cmp	fp, r2
 8000576:	4192      	sbcs	r2, r2
 8000578:	427f      	negs	r7, r7
 800057a:	4249      	negs	r1, r1
 800057c:	0c2d      	lsrs	r5, r5, #16
 800057e:	4252      	negs	r2, r2
 8000580:	430f      	orrs	r7, r1
 8000582:	425b      	negs	r3, r3
 8000584:	4313      	orrs	r3, r2
 8000586:	197f      	adds	r7, r7, r5
 8000588:	18ff      	adds	r7, r7, r3
 800058a:	465b      	mov	r3, fp
 800058c:	193c      	adds	r4, r7, r4
 800058e:	0ddb      	lsrs	r3, r3, #23
 8000590:	9a05      	ldr	r2, [sp, #20]
 8000592:	0264      	lsls	r4, r4, #9
 8000594:	431c      	orrs	r4, r3
 8000596:	0243      	lsls	r3, r0, #9
 8000598:	4313      	orrs	r3, r2
 800059a:	1e5d      	subs	r5, r3, #1
 800059c:	41ab      	sbcs	r3, r5
 800059e:	465a      	mov	r2, fp
 80005a0:	0dc0      	lsrs	r0, r0, #23
 80005a2:	4303      	orrs	r3, r0
 80005a4:	0252      	lsls	r2, r2, #9
 80005a6:	4313      	orrs	r3, r2
 80005a8:	01e2      	lsls	r2, r4, #7
 80005aa:	d556      	bpl.n	800065a <__aeabi_dmul+0x426>
 80005ac:	2001      	movs	r0, #1
 80005ae:	085a      	lsrs	r2, r3, #1
 80005b0:	4003      	ands	r3, r0
 80005b2:	4313      	orrs	r3, r2
 80005b4:	07e2      	lsls	r2, r4, #31
 80005b6:	4313      	orrs	r3, r2
 80005b8:	0864      	lsrs	r4, r4, #1
 80005ba:	485a      	ldr	r0, [pc, #360]	; (8000724 <__aeabi_dmul+0x4f0>)
 80005bc:	4460      	add	r0, ip
 80005be:	2800      	cmp	r0, #0
 80005c0:	dd4d      	ble.n	800065e <__aeabi_dmul+0x42a>
 80005c2:	075a      	lsls	r2, r3, #29
 80005c4:	d009      	beq.n	80005da <__aeabi_dmul+0x3a6>
 80005c6:	220f      	movs	r2, #15
 80005c8:	401a      	ands	r2, r3
 80005ca:	2a04      	cmp	r2, #4
 80005cc:	d005      	beq.n	80005da <__aeabi_dmul+0x3a6>
 80005ce:	1d1a      	adds	r2, r3, #4
 80005d0:	429a      	cmp	r2, r3
 80005d2:	419b      	sbcs	r3, r3
 80005d4:	425b      	negs	r3, r3
 80005d6:	18e4      	adds	r4, r4, r3
 80005d8:	0013      	movs	r3, r2
 80005da:	01e2      	lsls	r2, r4, #7
 80005dc:	d504      	bpl.n	80005e8 <__aeabi_dmul+0x3b4>
 80005de:	2080      	movs	r0, #128	; 0x80
 80005e0:	4a51      	ldr	r2, [pc, #324]	; (8000728 <__aeabi_dmul+0x4f4>)
 80005e2:	00c0      	lsls	r0, r0, #3
 80005e4:	4014      	ands	r4, r2
 80005e6:	4460      	add	r0, ip
 80005e8:	4a50      	ldr	r2, [pc, #320]	; (800072c <__aeabi_dmul+0x4f8>)
 80005ea:	4290      	cmp	r0, r2
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dmul+0x3bc>
 80005ee:	e6e3      	b.n	80003b8 <__aeabi_dmul+0x184>
 80005f0:	2501      	movs	r5, #1
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	0762      	lsls	r2, r4, #29
 80005f6:	431a      	orrs	r2, r3
 80005f8:	0264      	lsls	r4, r4, #9
 80005fa:	9b01      	ldr	r3, [sp, #4]
 80005fc:	4691      	mov	r9, r2
 80005fe:	0b22      	lsrs	r2, r4, #12
 8000600:	0544      	lsls	r4, r0, #21
 8000602:	0d64      	lsrs	r4, r4, #21
 8000604:	401d      	ands	r5, r3
 8000606:	e67c      	b.n	8000302 <__aeabi_dmul+0xce>
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	4659      	mov	r1, fp
 800060c:	0312      	lsls	r2, r2, #12
 800060e:	4211      	tst	r1, r2
 8000610:	d008      	beq.n	8000624 <__aeabi_dmul+0x3f0>
 8000612:	4214      	tst	r4, r2
 8000614:	d106      	bne.n	8000624 <__aeabi_dmul+0x3f0>
 8000616:	4322      	orrs	r2, r4
 8000618:	0312      	lsls	r2, r2, #12
 800061a:	0b12      	lsrs	r2, r2, #12
 800061c:	4645      	mov	r5, r8
 800061e:	4699      	mov	r9, r3
 8000620:	4c43      	ldr	r4, [pc, #268]	; (8000730 <__aeabi_dmul+0x4fc>)
 8000622:	e66e      	b.n	8000302 <__aeabi_dmul+0xce>
 8000624:	465b      	mov	r3, fp
 8000626:	431a      	orrs	r2, r3
 8000628:	0312      	lsls	r2, r2, #12
 800062a:	0b12      	lsrs	r2, r2, #12
 800062c:	4c40      	ldr	r4, [pc, #256]	; (8000730 <__aeabi_dmul+0x4fc>)
 800062e:	e668      	b.n	8000302 <__aeabi_dmul+0xce>
 8000630:	0003      	movs	r3, r0
 8000632:	4654      	mov	r4, sl
 8000634:	3b28      	subs	r3, #40	; 0x28
 8000636:	409c      	lsls	r4, r3
 8000638:	2300      	movs	r3, #0
 800063a:	e6b9      	b.n	80003b0 <__aeabi_dmul+0x17c>
 800063c:	f000 f998 	bl	8000970 <__clzsi2>
 8000640:	3020      	adds	r0, #32
 8000642:	e6a6      	b.n	8000392 <__aeabi_dmul+0x15e>
 8000644:	0003      	movs	r3, r0
 8000646:	3b28      	subs	r3, #40	; 0x28
 8000648:	409f      	lsls	r7, r3
 800064a:	2300      	movs	r3, #0
 800064c:	46bb      	mov	fp, r7
 800064e:	4699      	mov	r9, r3
 8000650:	e68a      	b.n	8000368 <__aeabi_dmul+0x134>
 8000652:	f000 f98d 	bl	8000970 <__clzsi2>
 8000656:	3020      	adds	r0, #32
 8000658:	e674      	b.n	8000344 <__aeabi_dmul+0x110>
 800065a:	46b4      	mov	ip, r6
 800065c:	e7ad      	b.n	80005ba <__aeabi_dmul+0x386>
 800065e:	2501      	movs	r5, #1
 8000660:	1a2a      	subs	r2, r5, r0
 8000662:	2a38      	cmp	r2, #56	; 0x38
 8000664:	dd06      	ble.n	8000674 <__aeabi_dmul+0x440>
 8000666:	9b01      	ldr	r3, [sp, #4]
 8000668:	2400      	movs	r4, #0
 800066a:	401d      	ands	r5, r3
 800066c:	2300      	movs	r3, #0
 800066e:	2200      	movs	r2, #0
 8000670:	4699      	mov	r9, r3
 8000672:	e646      	b.n	8000302 <__aeabi_dmul+0xce>
 8000674:	2a1f      	cmp	r2, #31
 8000676:	dc21      	bgt.n	80006bc <__aeabi_dmul+0x488>
 8000678:	2520      	movs	r5, #32
 800067a:	0020      	movs	r0, r4
 800067c:	1aad      	subs	r5, r5, r2
 800067e:	001e      	movs	r6, r3
 8000680:	40ab      	lsls	r3, r5
 8000682:	40a8      	lsls	r0, r5
 8000684:	40d6      	lsrs	r6, r2
 8000686:	1e5d      	subs	r5, r3, #1
 8000688:	41ab      	sbcs	r3, r5
 800068a:	4330      	orrs	r0, r6
 800068c:	4318      	orrs	r0, r3
 800068e:	40d4      	lsrs	r4, r2
 8000690:	0743      	lsls	r3, r0, #29
 8000692:	d009      	beq.n	80006a8 <__aeabi_dmul+0x474>
 8000694:	230f      	movs	r3, #15
 8000696:	4003      	ands	r3, r0
 8000698:	2b04      	cmp	r3, #4
 800069a:	d005      	beq.n	80006a8 <__aeabi_dmul+0x474>
 800069c:	0003      	movs	r3, r0
 800069e:	1d18      	adds	r0, r3, #4
 80006a0:	4298      	cmp	r0, r3
 80006a2:	419b      	sbcs	r3, r3
 80006a4:	425b      	negs	r3, r3
 80006a6:	18e4      	adds	r4, r4, r3
 80006a8:	0223      	lsls	r3, r4, #8
 80006aa:	d521      	bpl.n	80006f0 <__aeabi_dmul+0x4bc>
 80006ac:	2501      	movs	r5, #1
 80006ae:	9b01      	ldr	r3, [sp, #4]
 80006b0:	2401      	movs	r4, #1
 80006b2:	401d      	ands	r5, r3
 80006b4:	2300      	movs	r3, #0
 80006b6:	2200      	movs	r2, #0
 80006b8:	4699      	mov	r9, r3
 80006ba:	e622      	b.n	8000302 <__aeabi_dmul+0xce>
 80006bc:	251f      	movs	r5, #31
 80006be:	0021      	movs	r1, r4
 80006c0:	426d      	negs	r5, r5
 80006c2:	1a28      	subs	r0, r5, r0
 80006c4:	40c1      	lsrs	r1, r0
 80006c6:	0008      	movs	r0, r1
 80006c8:	2a20      	cmp	r2, #32
 80006ca:	d01d      	beq.n	8000708 <__aeabi_dmul+0x4d4>
 80006cc:	355f      	adds	r5, #95	; 0x5f
 80006ce:	1aaa      	subs	r2, r5, r2
 80006d0:	4094      	lsls	r4, r2
 80006d2:	4323      	orrs	r3, r4
 80006d4:	1e5c      	subs	r4, r3, #1
 80006d6:	41a3      	sbcs	r3, r4
 80006d8:	2507      	movs	r5, #7
 80006da:	4303      	orrs	r3, r0
 80006dc:	401d      	ands	r5, r3
 80006de:	2200      	movs	r2, #0
 80006e0:	2d00      	cmp	r5, #0
 80006e2:	d009      	beq.n	80006f8 <__aeabi_dmul+0x4c4>
 80006e4:	220f      	movs	r2, #15
 80006e6:	2400      	movs	r4, #0
 80006e8:	401a      	ands	r2, r3
 80006ea:	0018      	movs	r0, r3
 80006ec:	2a04      	cmp	r2, #4
 80006ee:	d1d6      	bne.n	800069e <__aeabi_dmul+0x46a>
 80006f0:	0003      	movs	r3, r0
 80006f2:	0765      	lsls	r5, r4, #29
 80006f4:	0264      	lsls	r4, r4, #9
 80006f6:	0b22      	lsrs	r2, r4, #12
 80006f8:	08db      	lsrs	r3, r3, #3
 80006fa:	432b      	orrs	r3, r5
 80006fc:	2501      	movs	r5, #1
 80006fe:	4699      	mov	r9, r3
 8000700:	9b01      	ldr	r3, [sp, #4]
 8000702:	2400      	movs	r4, #0
 8000704:	401d      	ands	r5, r3
 8000706:	e5fc      	b.n	8000302 <__aeabi_dmul+0xce>
 8000708:	2400      	movs	r4, #0
 800070a:	e7e2      	b.n	80006d2 <__aeabi_dmul+0x49e>
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	2501      	movs	r5, #1
 8000710:	0312      	lsls	r2, r2, #12
 8000712:	4322      	orrs	r2, r4
 8000714:	9901      	ldr	r1, [sp, #4]
 8000716:	0312      	lsls	r2, r2, #12
 8000718:	0b12      	lsrs	r2, r2, #12
 800071a:	400d      	ands	r5, r1
 800071c:	4699      	mov	r9, r3
 800071e:	4c04      	ldr	r4, [pc, #16]	; (8000730 <__aeabi_dmul+0x4fc>)
 8000720:	e5ef      	b.n	8000302 <__aeabi_dmul+0xce>
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	000003ff 	.word	0x000003ff
 8000728:	feffffff 	.word	0xfeffffff
 800072c:	000007fe 	.word	0x000007fe
 8000730:	000007ff 	.word	0x000007ff

08000734 <__aeabi_i2d>:
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	2800      	cmp	r0, #0
 8000738:	d030      	beq.n	800079c <__aeabi_i2d+0x68>
 800073a:	17c3      	asrs	r3, r0, #31
 800073c:	18c4      	adds	r4, r0, r3
 800073e:	405c      	eors	r4, r3
 8000740:	0fc5      	lsrs	r5, r0, #31
 8000742:	0020      	movs	r0, r4
 8000744:	f000 f914 	bl	8000970 <__clzsi2>
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <__aeabi_i2d+0x74>)
 800074a:	4a18      	ldr	r2, [pc, #96]	; (80007ac <__aeabi_i2d+0x78>)
 800074c:	1a1b      	subs	r3, r3, r0
 800074e:	1ad2      	subs	r2, r2, r3
 8000750:	2a1f      	cmp	r2, #31
 8000752:	dd18      	ble.n	8000786 <__aeabi_i2d+0x52>
 8000754:	4a16      	ldr	r2, [pc, #88]	; (80007b0 <__aeabi_i2d+0x7c>)
 8000756:	1ad2      	subs	r2, r2, r3
 8000758:	4094      	lsls	r4, r2
 800075a:	2200      	movs	r2, #0
 800075c:	0324      	lsls	r4, r4, #12
 800075e:	055b      	lsls	r3, r3, #21
 8000760:	0b24      	lsrs	r4, r4, #12
 8000762:	0d5b      	lsrs	r3, r3, #21
 8000764:	2100      	movs	r1, #0
 8000766:	0010      	movs	r0, r2
 8000768:	0324      	lsls	r4, r4, #12
 800076a:	0d0a      	lsrs	r2, r1, #20
 800076c:	0b24      	lsrs	r4, r4, #12
 800076e:	0512      	lsls	r2, r2, #20
 8000770:	4322      	orrs	r2, r4
 8000772:	4c10      	ldr	r4, [pc, #64]	; (80007b4 <__aeabi_i2d+0x80>)
 8000774:	051b      	lsls	r3, r3, #20
 8000776:	4022      	ands	r2, r4
 8000778:	4313      	orrs	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	07ed      	lsls	r5, r5, #31
 800077e:	085b      	lsrs	r3, r3, #1
 8000780:	432b      	orrs	r3, r5
 8000782:	0019      	movs	r1, r3
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	0021      	movs	r1, r4
 8000788:	4091      	lsls	r1, r2
 800078a:	000a      	movs	r2, r1
 800078c:	210b      	movs	r1, #11
 800078e:	1a08      	subs	r0, r1, r0
 8000790:	40c4      	lsrs	r4, r0
 8000792:	055b      	lsls	r3, r3, #21
 8000794:	0324      	lsls	r4, r4, #12
 8000796:	0b24      	lsrs	r4, r4, #12
 8000798:	0d5b      	lsrs	r3, r3, #21
 800079a:	e7e3      	b.n	8000764 <__aeabi_i2d+0x30>
 800079c:	2500      	movs	r5, #0
 800079e:	2300      	movs	r3, #0
 80007a0:	2400      	movs	r4, #0
 80007a2:	2200      	movs	r2, #0
 80007a4:	e7de      	b.n	8000764 <__aeabi_i2d+0x30>
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	0000041e 	.word	0x0000041e
 80007ac:	00000433 	.word	0x00000433
 80007b0:	00000413 	.word	0x00000413
 80007b4:	800fffff 	.word	0x800fffff

080007b8 <__aeabi_f2d>:
 80007b8:	0041      	lsls	r1, r0, #1
 80007ba:	0e09      	lsrs	r1, r1, #24
 80007bc:	1c4b      	adds	r3, r1, #1
 80007be:	b570      	push	{r4, r5, r6, lr}
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	0246      	lsls	r6, r0, #9
 80007c4:	0a75      	lsrs	r5, r6, #9
 80007c6:	0fc4      	lsrs	r4, r0, #31
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	dd14      	ble.n	80007f6 <__aeabi_f2d+0x3e>
 80007cc:	23e0      	movs	r3, #224	; 0xe0
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	076d      	lsls	r5, r5, #29
 80007d2:	0b36      	lsrs	r6, r6, #12
 80007d4:	18cb      	adds	r3, r1, r3
 80007d6:	2100      	movs	r1, #0
 80007d8:	0d0a      	lsrs	r2, r1, #20
 80007da:	0028      	movs	r0, r5
 80007dc:	0512      	lsls	r2, r2, #20
 80007de:	4d1c      	ldr	r5, [pc, #112]	; (8000850 <__aeabi_f2d+0x98>)
 80007e0:	4332      	orrs	r2, r6
 80007e2:	055b      	lsls	r3, r3, #21
 80007e4:	402a      	ands	r2, r5
 80007e6:	085b      	lsrs	r3, r3, #1
 80007e8:	4313      	orrs	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	07e4      	lsls	r4, r4, #31
 80007ee:	085b      	lsrs	r3, r3, #1
 80007f0:	4323      	orrs	r3, r4
 80007f2:	0019      	movs	r1, r3
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d114      	bne.n	8000824 <__aeabi_f2d+0x6c>
 80007fa:	2d00      	cmp	r5, #0
 80007fc:	d01e      	beq.n	800083c <__aeabi_f2d+0x84>
 80007fe:	0028      	movs	r0, r5
 8000800:	f000 f8b6 	bl	8000970 <__clzsi2>
 8000804:	280a      	cmp	r0, #10
 8000806:	dc1c      	bgt.n	8000842 <__aeabi_f2d+0x8a>
 8000808:	230b      	movs	r3, #11
 800080a:	002a      	movs	r2, r5
 800080c:	1a1b      	subs	r3, r3, r0
 800080e:	40da      	lsrs	r2, r3
 8000810:	0003      	movs	r3, r0
 8000812:	3315      	adds	r3, #21
 8000814:	409d      	lsls	r5, r3
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <__aeabi_f2d+0x9c>)
 8000818:	0312      	lsls	r2, r2, #12
 800081a:	1a1b      	subs	r3, r3, r0
 800081c:	055b      	lsls	r3, r3, #21
 800081e:	0b16      	lsrs	r6, r2, #12
 8000820:	0d5b      	lsrs	r3, r3, #21
 8000822:	e7d8      	b.n	80007d6 <__aeabi_f2d+0x1e>
 8000824:	2d00      	cmp	r5, #0
 8000826:	d006      	beq.n	8000836 <__aeabi_f2d+0x7e>
 8000828:	0b32      	lsrs	r2, r6, #12
 800082a:	2680      	movs	r6, #128	; 0x80
 800082c:	0336      	lsls	r6, r6, #12
 800082e:	076d      	lsls	r5, r5, #29
 8000830:	4316      	orrs	r6, r2
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <__aeabi_f2d+0xa0>)
 8000834:	e7cf      	b.n	80007d6 <__aeabi_f2d+0x1e>
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <__aeabi_f2d+0xa0>)
 8000838:	2600      	movs	r6, #0
 800083a:	e7cc      	b.n	80007d6 <__aeabi_f2d+0x1e>
 800083c:	2300      	movs	r3, #0
 800083e:	2600      	movs	r6, #0
 8000840:	e7c9      	b.n	80007d6 <__aeabi_f2d+0x1e>
 8000842:	0003      	movs	r3, r0
 8000844:	002a      	movs	r2, r5
 8000846:	3b0b      	subs	r3, #11
 8000848:	409a      	lsls	r2, r3
 800084a:	2500      	movs	r5, #0
 800084c:	e7e3      	b.n	8000816 <__aeabi_f2d+0x5e>
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	800fffff 	.word	0x800fffff
 8000854:	00000389 	.word	0x00000389
 8000858:	000007ff 	.word	0x000007ff

0800085c <__aeabi_d2f>:
 800085c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800085e:	004c      	lsls	r4, r1, #1
 8000860:	0d64      	lsrs	r4, r4, #21
 8000862:	030b      	lsls	r3, r1, #12
 8000864:	1c62      	adds	r2, r4, #1
 8000866:	0f45      	lsrs	r5, r0, #29
 8000868:	0a5b      	lsrs	r3, r3, #9
 800086a:	0552      	lsls	r2, r2, #21
 800086c:	432b      	orrs	r3, r5
 800086e:	0fc9      	lsrs	r1, r1, #31
 8000870:	00c5      	lsls	r5, r0, #3
 8000872:	0d52      	lsrs	r2, r2, #21
 8000874:	2a01      	cmp	r2, #1
 8000876:	dd28      	ble.n	80008ca <__aeabi_d2f+0x6e>
 8000878:	4a3a      	ldr	r2, [pc, #232]	; (8000964 <__aeabi_d2f+0x108>)
 800087a:	18a6      	adds	r6, r4, r2
 800087c:	2efe      	cmp	r6, #254	; 0xfe
 800087e:	dc1b      	bgt.n	80008b8 <__aeabi_d2f+0x5c>
 8000880:	2e00      	cmp	r6, #0
 8000882:	dd3e      	ble.n	8000902 <__aeabi_d2f+0xa6>
 8000884:	0180      	lsls	r0, r0, #6
 8000886:	0002      	movs	r2, r0
 8000888:	1e50      	subs	r0, r2, #1
 800088a:	4182      	sbcs	r2, r0
 800088c:	0f6d      	lsrs	r5, r5, #29
 800088e:	432a      	orrs	r2, r5
 8000890:	00db      	lsls	r3, r3, #3
 8000892:	4313      	orrs	r3, r2
 8000894:	075a      	lsls	r2, r3, #29
 8000896:	d004      	beq.n	80008a2 <__aeabi_d2f+0x46>
 8000898:	220f      	movs	r2, #15
 800089a:	401a      	ands	r2, r3
 800089c:	2a04      	cmp	r2, #4
 800089e:	d000      	beq.n	80008a2 <__aeabi_d2f+0x46>
 80008a0:	3304      	adds	r3, #4
 80008a2:	2280      	movs	r2, #128	; 0x80
 80008a4:	04d2      	lsls	r2, r2, #19
 80008a6:	401a      	ands	r2, r3
 80008a8:	d05a      	beq.n	8000960 <__aeabi_d2f+0x104>
 80008aa:	3601      	adds	r6, #1
 80008ac:	2eff      	cmp	r6, #255	; 0xff
 80008ae:	d003      	beq.n	80008b8 <__aeabi_d2f+0x5c>
 80008b0:	019b      	lsls	r3, r3, #6
 80008b2:	0a5b      	lsrs	r3, r3, #9
 80008b4:	b2f4      	uxtb	r4, r6
 80008b6:	e001      	b.n	80008bc <__aeabi_d2f+0x60>
 80008b8:	24ff      	movs	r4, #255	; 0xff
 80008ba:	2300      	movs	r3, #0
 80008bc:	0258      	lsls	r0, r3, #9
 80008be:	05e4      	lsls	r4, r4, #23
 80008c0:	0a40      	lsrs	r0, r0, #9
 80008c2:	07c9      	lsls	r1, r1, #31
 80008c4:	4320      	orrs	r0, r4
 80008c6:	4308      	orrs	r0, r1
 80008c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ca:	2c00      	cmp	r4, #0
 80008cc:	d007      	beq.n	80008de <__aeabi_d2f+0x82>
 80008ce:	431d      	orrs	r5, r3
 80008d0:	d0f2      	beq.n	80008b8 <__aeabi_d2f+0x5c>
 80008d2:	2080      	movs	r0, #128	; 0x80
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	0480      	lsls	r0, r0, #18
 80008d8:	4303      	orrs	r3, r0
 80008da:	26ff      	movs	r6, #255	; 0xff
 80008dc:	e7da      	b.n	8000894 <__aeabi_d2f+0x38>
 80008de:	432b      	orrs	r3, r5
 80008e0:	d003      	beq.n	80008ea <__aeabi_d2f+0x8e>
 80008e2:	2305      	movs	r3, #5
 80008e4:	08db      	lsrs	r3, r3, #3
 80008e6:	2cff      	cmp	r4, #255	; 0xff
 80008e8:	d003      	beq.n	80008f2 <__aeabi_d2f+0x96>
 80008ea:	025b      	lsls	r3, r3, #9
 80008ec:	0a5b      	lsrs	r3, r3, #9
 80008ee:	b2e4      	uxtb	r4, r4
 80008f0:	e7e4      	b.n	80008bc <__aeabi_d2f+0x60>
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d032      	beq.n	800095c <__aeabi_d2f+0x100>
 80008f6:	2080      	movs	r0, #128	; 0x80
 80008f8:	03c0      	lsls	r0, r0, #15
 80008fa:	4303      	orrs	r3, r0
 80008fc:	025b      	lsls	r3, r3, #9
 80008fe:	0a5b      	lsrs	r3, r3, #9
 8000900:	e7dc      	b.n	80008bc <__aeabi_d2f+0x60>
 8000902:	0032      	movs	r2, r6
 8000904:	3217      	adds	r2, #23
 8000906:	db14      	blt.n	8000932 <__aeabi_d2f+0xd6>
 8000908:	2280      	movs	r2, #128	; 0x80
 800090a:	271e      	movs	r7, #30
 800090c:	0412      	lsls	r2, r2, #16
 800090e:	4313      	orrs	r3, r2
 8000910:	1bbf      	subs	r7, r7, r6
 8000912:	2f1f      	cmp	r7, #31
 8000914:	dc0f      	bgt.n	8000936 <__aeabi_d2f+0xda>
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <__aeabi_d2f+0x10c>)
 8000918:	4694      	mov	ip, r2
 800091a:	4464      	add	r4, ip
 800091c:	002a      	movs	r2, r5
 800091e:	40a5      	lsls	r5, r4
 8000920:	002e      	movs	r6, r5
 8000922:	40a3      	lsls	r3, r4
 8000924:	1e75      	subs	r5, r6, #1
 8000926:	41ae      	sbcs	r6, r5
 8000928:	40fa      	lsrs	r2, r7
 800092a:	4333      	orrs	r3, r6
 800092c:	4313      	orrs	r3, r2
 800092e:	2600      	movs	r6, #0
 8000930:	e7b0      	b.n	8000894 <__aeabi_d2f+0x38>
 8000932:	2400      	movs	r4, #0
 8000934:	e7d5      	b.n	80008e2 <__aeabi_d2f+0x86>
 8000936:	2202      	movs	r2, #2
 8000938:	4252      	negs	r2, r2
 800093a:	1b96      	subs	r6, r2, r6
 800093c:	001a      	movs	r2, r3
 800093e:	40f2      	lsrs	r2, r6
 8000940:	2f20      	cmp	r7, #32
 8000942:	d009      	beq.n	8000958 <__aeabi_d2f+0xfc>
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <__aeabi_d2f+0x110>)
 8000946:	4684      	mov	ip, r0
 8000948:	4464      	add	r4, ip
 800094a:	40a3      	lsls	r3, r4
 800094c:	432b      	orrs	r3, r5
 800094e:	1e5d      	subs	r5, r3, #1
 8000950:	41ab      	sbcs	r3, r5
 8000952:	2600      	movs	r6, #0
 8000954:	4313      	orrs	r3, r2
 8000956:	e79d      	b.n	8000894 <__aeabi_d2f+0x38>
 8000958:	2300      	movs	r3, #0
 800095a:	e7f7      	b.n	800094c <__aeabi_d2f+0xf0>
 800095c:	2300      	movs	r3, #0
 800095e:	e7ad      	b.n	80008bc <__aeabi_d2f+0x60>
 8000960:	0034      	movs	r4, r6
 8000962:	e7bf      	b.n	80008e4 <__aeabi_d2f+0x88>
 8000964:	fffffc80 	.word	0xfffffc80
 8000968:	fffffc82 	.word	0xfffffc82
 800096c:	fffffca2 	.word	0xfffffca2

08000970 <__clzsi2>:
 8000970:	211c      	movs	r1, #28
 8000972:	2301      	movs	r3, #1
 8000974:	041b      	lsls	r3, r3, #16
 8000976:	4298      	cmp	r0, r3
 8000978:	d301      	bcc.n	800097e <__clzsi2+0xe>
 800097a:	0c00      	lsrs	r0, r0, #16
 800097c:	3910      	subs	r1, #16
 800097e:	0a1b      	lsrs	r3, r3, #8
 8000980:	4298      	cmp	r0, r3
 8000982:	d301      	bcc.n	8000988 <__clzsi2+0x18>
 8000984:	0a00      	lsrs	r0, r0, #8
 8000986:	3908      	subs	r1, #8
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	4298      	cmp	r0, r3
 800098c:	d301      	bcc.n	8000992 <__clzsi2+0x22>
 800098e:	0900      	lsrs	r0, r0, #4
 8000990:	3904      	subs	r1, #4
 8000992:	a202      	add	r2, pc, #8	; (adr r2, 800099c <__clzsi2+0x2c>)
 8000994:	5c10      	ldrb	r0, [r2, r0]
 8000996:	1840      	adds	r0, r0, r1
 8000998:	4770      	bx	lr
 800099a:	46c0      	nop			; (mov r8, r8)
 800099c:	02020304 	.word	0x02020304
 80009a0:	01010101 	.word	0x01010101
	...

080009ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009ac:	480d      	ldr	r0, [pc, #52]	; (80009e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490e      	ldr	r1, [pc, #56]	; (80009ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0b      	ldr	r4, [pc, #44]	; (80009f8 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80009d6:	f000 f965 	bl	8000ca4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80009da:	f001 fadf 	bl	8001f9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009de:	f000 f90f 	bl	8000c00 <main>

080009e2 <LoopForever>:

LoopForever:
    b LoopForever
 80009e2:	e7fe      	b.n	80009e2 <LoopForever>
  ldr   r0, =_estack
 80009e4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009f0:	08002904 	.word	0x08002904
  ldr r2, =_sbss
 80009f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80009f8:	200009bc 	.word	0x200009bc

080009fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC1_IRQHandler>
	...

08000a00 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <_sbrk+0x2c>)
{
 8000a02:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8000a04:	6819      	ldr	r1, [r3, #0]
{
 8000a06:	0002      	movs	r2, r0
	if (heap_end == 0)
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	d101      	bne.n	8000a10 <_sbrk+0x10>
		heap_end = &end;
 8000a0c:	4908      	ldr	r1, [pc, #32]	; (8000a30 <_sbrk+0x30>)
 8000a0e:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000a10:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8000a12:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8000a14:	1882      	adds	r2, r0, r2
 8000a16:	428a      	cmp	r2, r1
 8000a18:	d906      	bls.n	8000a28 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000a1a:	f001 fab9 	bl	8001f90 <__errno>
 8000a1e:	230c      	movs	r3, #12
 8000a20:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000a22:	2001      	movs	r0, #1
 8000a24:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8000a26:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8000a28:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8000a2a:	e7fc      	b.n	8000a26 <_sbrk+0x26>
 8000a2c:	20000084 	.word	0x20000084
 8000a30:	200009bc 	.word	0x200009bc

08000a34 <adxl345_init>:
	}
	
}

int32_t adxl345_init()
{
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_StatusTypeDef ret = HAL_ERROR;

  /*##-1- Configure the I2C peripheral ######################################*/
  I2cHandle.Instance             = I2C1;
  I2cHandle.Init.Timing          = I2C_TIMING;  
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8000a36:	2601      	movs	r6, #1
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;  
 8000a38:	2500      	movs	r5, #0
  I2cHandle.Instance             = I2C1;
 8000a3a:	4c1f      	ldr	r4, [pc, #124]	; (8000ab8 <adxl345_init+0x84>)
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <adxl345_init+0x88>)
{
 8000a3e:	b085      	sub	sp, #20
  I2cHandle.Instance             = I2C1;
 8000a40:	6023      	str	r3, [r4, #0]
  I2cHandle.Init.Timing          = I2C_TIMING;  
 8000a42:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <adxl345_init+0x8c>)
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  
  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 8000a44:	0020      	movs	r0, r4
  I2cHandle.Init.Timing          = I2C_TIMING;  
 8000a46:	6063      	str	r3, [r4, #4]
  I2cHandle.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	60e6      	str	r6, [r4, #12]
  I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;  
 8000a4a:	6125      	str	r5, [r4, #16]
  I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4c:	61e5      	str	r5, [r4, #28]
  I2cHandle.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8000a4e:	6225      	str	r5, [r4, #32]
  if(HAL_I2C_Init(&I2cHandle) != HAL_OK)
 8000a50:	f000 fca2 	bl	8001398 <HAL_I2C_Init>
  {
    /* Initialization Error */
    //Error_Handler();
  }

  ret = HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DEVID,1,i2c_buffer,1,2000);
 8000a54:	23fa      	movs	r3, #250	; 0xfa
 8000a56:	4f1b      	ldr	r7, [pc, #108]	; (8000ac4 <adxl345_init+0x90>)
 8000a58:	00db      	lsls	r3, r3, #3
 8000a5a:	9302      	str	r3, [sp, #8]
 8000a5c:	9601      	str	r6, [sp, #4]
 8000a5e:	9700      	str	r7, [sp, #0]
 8000a60:	0033      	movs	r3, r6
 8000a62:	002a      	movs	r2, r5
 8000a64:	21a6      	movs	r1, #166	; 0xa6
 8000a66:	0020      	movs	r0, r4
 8000a68:	f000 fda6 	bl	80015b8 <HAL_I2C_Mem_Read>
	
	if(ret == HAL_ERROR)
 8000a6c:	42b0      	cmp	r0, r6
 8000a6e:	d01f      	beq.n	8000ab0 <adxl345_init+0x7c>
	{
		return -1;
	}
	
	if(i2c_buffer[0] == ADXL345_ID)
 8000a70:	783b      	ldrb	r3, [r7, #0]
 8000a72:	2be5      	cmp	r3, #229	; 0xe5
 8000a74:	d119      	bne.n	8000aaa <adxl345_init+0x76>
	{
		i2c_buffer[0] = 0x0B;
 8000a76:	3bda      	subs	r3, #218	; 0xda
 8000a78:	703b      	strb	r3, [r7, #0]
		HAL_I2C_Mem_Write(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATA_FORMAT,1,i2c_buffer,1,2000);
 8000a7a:	23fa      	movs	r3, #250	; 0xfa
 8000a7c:	00db      	lsls	r3, r3, #3
 8000a7e:	9302      	str	r3, [sp, #8]
 8000a80:	2231      	movs	r2, #49	; 0x31
 8000a82:	0033      	movs	r3, r6
 8000a84:	21a6      	movs	r1, #166	; 0xa6
 8000a86:	9601      	str	r6, [sp, #4]
 8000a88:	9700      	str	r7, [sp, #0]
 8000a8a:	0020      	movs	r0, r4
 8000a8c:	f000 fcda 	bl	8001444 <HAL_I2C_Mem_Write>
		i2c_buffer[0] = 0x08;
 8000a90:	2308      	movs	r3, #8
 8000a92:	703b      	strb	r3, [r7, #0]
		HAL_I2C_Mem_Write(&I2cHandle,ADXL345_ADDRESS,ADXL345_POWER_CTL,1,i2c_buffer,1,2000);	
 8000a94:	23fa      	movs	r3, #250	; 0xfa
 8000a96:	00db      	lsls	r3, r3, #3
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	9601      	str	r6, [sp, #4]
 8000a9c:	9700      	str	r7, [sp, #0]
 8000a9e:	0033      	movs	r3, r6
 8000aa0:	222d      	movs	r2, #45	; 0x2d
 8000aa2:	21a6      	movs	r1, #166	; 0xa6
 8000aa4:	0020      	movs	r0, r4
 8000aa6:	f000 fccd 	bl	8001444 <HAL_I2C_Mem_Write>
	}
	
	return 0;
}
 8000aaa:	0028      	movs	r0, r5
 8000aac:	b005      	add	sp, #20
 8000aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
 8000ab0:	2501      	movs	r5, #1
 8000ab2:	426d      	negs	r5, r5
 8000ab4:	e7f9      	b.n	8000aaa <adxl345_init+0x76>
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	200000a0 	.word	0x200000a0
 8000abc:	40005400 	.word	0x40005400
 8000ac0:	00901a4e 	.word	0x00901a4e
 8000ac4:	20000094 	.word	0x20000094

08000ac8 <adxl345_get_g_values>:
int32_t adxl345_get_g_values(float *x, float *y, float *z)
{
	int16_t acc_x, acc_y, acc_z;	 
  HAL_StatusTypeDef ret = HAL_ERROR;	
	
	ret = HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATAX0,1,i2c_buffer,6,2000);
 8000ac8:	23fa      	movs	r3, #250	; 0xfa
{
 8000aca:	b5f0      	push	{r4, r5, r6, r7, lr}
	ret = HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATAX0,1,i2c_buffer,6,2000);
 8000acc:	00db      	lsls	r3, r3, #3
{
 8000ace:	b089      	sub	sp, #36	; 0x24
	ret = HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATAX0,1,i2c_buffer,6,2000);
 8000ad0:	9302      	str	r3, [sp, #8]
 8000ad2:	2306      	movs	r3, #6
 8000ad4:	4c21      	ldr	r4, [pc, #132]	; (8000b5c <adxl345_get_g_values+0x94>)
 8000ad6:	9301      	str	r3, [sp, #4]
{
 8000ad8:	0007      	movs	r7, r0
 8000ada:	000e      	movs	r6, r1
 8000adc:	0015      	movs	r5, r2
	ret = HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATAX0,1,i2c_buffer,6,2000);
 8000ade:	9400      	str	r4, [sp, #0]
 8000ae0:	3b05      	subs	r3, #5
 8000ae2:	2232      	movs	r2, #50	; 0x32
 8000ae4:	21a6      	movs	r1, #166	; 0xa6
 8000ae6:	481e      	ldr	r0, [pc, #120]	; (8000b60 <adxl345_get_g_values+0x98>)
 8000ae8:	f000 fd66 	bl	80015b8 <HAL_I2C_Mem_Read>
 8000aec:	9005      	str	r0, [sp, #20]
	if(ret == HAL_OK){
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d130      	bne.n	8000b54 <adxl345_get_g_values+0x8c>
  
	acc_x = ((int16_t)((uint16_t)(i2c_buffer[1]<<8) | (uint16_t)i2c_buffer[0]));
	acc_y = ((int16_t)((uint16_t)(i2c_buffer[3]<<8) | (uint16_t)i2c_buffer[2]));
 8000af2:	78e3      	ldrb	r3, [r4, #3]
 8000af4:	78a2      	ldrb	r2, [r4, #2]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	4313      	orrs	r3, r2
 8000afa:	b21b      	sxth	r3, r3
 8000afc:	9306      	str	r3, [sp, #24]
	acc_z = ((int16_t)((uint16_t)(i2c_buffer[5]<<8) | (uint16_t)i2c_buffer[4]));
 8000afe:	7963      	ldrb	r3, [r4, #5]
 8000b00:	7922      	ldrb	r2, [r4, #4]
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	4313      	orrs	r3, r2
	acc_x = ((int16_t)((uint16_t)(i2c_buffer[1]<<8) | (uint16_t)i2c_buffer[0]));
 8000b06:	7860      	ldrb	r0, [r4, #1]
	acc_z = ((int16_t)((uint16_t)(i2c_buffer[5]<<8) | (uint16_t)i2c_buffer[4]));
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	9307      	str	r3, [sp, #28]
	acc_x = ((int16_t)((uint16_t)(i2c_buffer[1]<<8) | (uint16_t)i2c_buffer[0]));
 8000b0c:	7823      	ldrb	r3, [r4, #0]
 8000b0e:	0200      	lsls	r0, r0, #8
 8000b10:	4318      	orrs	r0, r3
		
	*x = acc_x*ADXL345_SCALE_FACTOR; 
 8000b12:	b200      	sxth	r0, r0
 8000b14:	f7ff fe0e 	bl	8000734 <__aeabi_i2d>
 8000b18:	4a12      	ldr	r2, [pc, #72]	; (8000b64 <adxl345_get_g_values+0x9c>)
 8000b1a:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <adxl345_get_g_values+0xa0>)
 8000b1c:	f7ff fb8a 	bl	8000234 <__aeabi_dmul>
 8000b20:	f7ff fe9c 	bl	800085c <__aeabi_d2f>
 8000b24:	6038      	str	r0, [r7, #0]
	*y = acc_y*ADXL345_SCALE_FACTOR;
 8000b26:	9806      	ldr	r0, [sp, #24]
 8000b28:	f7ff fe04 	bl	8000734 <__aeabi_i2d>
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <adxl345_get_g_values+0x9c>)
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <adxl345_get_g_values+0xa0>)
 8000b30:	f7ff fb80 	bl	8000234 <__aeabi_dmul>
 8000b34:	f7ff fe92 	bl	800085c <__aeabi_d2f>
 8000b38:	6030      	str	r0, [r6, #0]
  *z = acc_z*ADXL345_SCALE_FACTOR;
 8000b3a:	9807      	ldr	r0, [sp, #28]
 8000b3c:	f7ff fdfa 	bl	8000734 <__aeabi_i2d>
 8000b40:	4a08      	ldr	r2, [pc, #32]	; (8000b64 <adxl345_get_g_values+0x9c>)
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <adxl345_get_g_values+0xa0>)
 8000b44:	f7ff fb76 	bl	8000234 <__aeabi_dmul>
 8000b48:	f7ff fe88 	bl	800085c <__aeabi_d2f>
 8000b4c:	6028      	str	r0, [r5, #0]
	 
		return 0;
 8000b4e:	9805      	ldr	r0, [sp, #20]
	}
	else
	{
		return -1;
	}
}
 8000b50:	b009      	add	sp, #36	; 0x24
 8000b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
 8000b54:	2001      	movs	r0, #1
 8000b56:	4240      	negs	r0, r0
 8000b58:	e7fa      	b.n	8000b50 <adxl345_get_g_values+0x88>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	20000094 	.word	0x20000094
 8000b60:	200000a0 	.word	0x200000a0
 8000b64:	8e8a71de 	.word	0x8e8a71de
 8000b68:	3f6ff2e4 	.word	0x3f6ff2e4

08000b6c <adxl345_get_raw_values>:
	
int32_t adxl345_get_raw_values(int16_t *x, int16_t *y, int16_t *z)
{
	HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATAX0,1,i2c_buffer,6,2000);
 8000b6c:	23fa      	movs	r3, #250	; 0xfa
{
 8000b6e:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATAX0,1,i2c_buffer,6,2000);
 8000b70:	00db      	lsls	r3, r3, #3
{
 8000b72:	b085      	sub	sp, #20
	HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATAX0,1,i2c_buffer,6,2000);
 8000b74:	9302      	str	r3, [sp, #8]
 8000b76:	2306      	movs	r3, #6
{
 8000b78:	0007      	movs	r7, r0
 8000b7a:	000e      	movs	r6, r1
	HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATAX0,1,i2c_buffer,6,2000);
 8000b7c:	4c0d      	ldr	r4, [pc, #52]	; (8000bb4 <adxl345_get_raw_values+0x48>)
{
 8000b7e:	0015      	movs	r5, r2
	HAL_I2C_Mem_Read(&I2cHandle,ADXL345_ADDRESS,ADXL345_DATAX0,1,i2c_buffer,6,2000);
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	9400      	str	r4, [sp, #0]
 8000b84:	3b05      	subs	r3, #5
 8000b86:	2232      	movs	r2, #50	; 0x32
 8000b88:	21a6      	movs	r1, #166	; 0xa6
 8000b8a:	480b      	ldr	r0, [pc, #44]	; (8000bb8 <adxl345_get_raw_values+0x4c>)
 8000b8c:	f000 fd14 	bl	80015b8 <HAL_I2C_Mem_Read>
	*x = ((int16_t)((uint16_t)(i2c_buffer[1]<<8) | (uint16_t)i2c_buffer[0]));
	*y = ((int16_t)((uint16_t)(i2c_buffer[3]<<8) | (uint16_t)i2c_buffer[2]));
	*z = ((int16_t)((uint16_t)(i2c_buffer[5]<<8) | (uint16_t)i2c_buffer[4]));
	
	return 0;
}
 8000b90:	2000      	movs	r0, #0
	*x = ((int16_t)((uint16_t)(i2c_buffer[1]<<8) | (uint16_t)i2c_buffer[0]));
 8000b92:	7863      	ldrb	r3, [r4, #1]
 8000b94:	7822      	ldrb	r2, [r4, #0]
 8000b96:	021b      	lsls	r3, r3, #8
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	803b      	strh	r3, [r7, #0]
	*y = ((int16_t)((uint16_t)(i2c_buffer[3]<<8) | (uint16_t)i2c_buffer[2]));
 8000b9c:	78e3      	ldrb	r3, [r4, #3]
 8000b9e:	78a2      	ldrb	r2, [r4, #2]
 8000ba0:	021b      	lsls	r3, r3, #8
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	8033      	strh	r3, [r6, #0]
	*z = ((int16_t)((uint16_t)(i2c_buffer[5]<<8) | (uint16_t)i2c_buffer[4]));
 8000ba6:	7963      	ldrb	r3, [r4, #5]
 8000ba8:	7922      	ldrb	r2, [r4, #4]
 8000baa:	021b      	lsls	r3, r3, #8
 8000bac:	4313      	orrs	r3, r2
 8000bae:	802b      	strh	r3, [r5, #0]
}
 8000bb0:	b005      	add	sp, #20
 8000bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bb4:	20000094 	.word	0x20000094
 8000bb8:	200000a0 	.word	0x200000a0

08000bbc <SystemClock_Config>:
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* No HSE Oscillator on Nucleo, Activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 8000bbc:	2300      	movs	r3, #0
{
 8000bbe:	b530      	push	{r4, r5, lr}
 8000bc0:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
 8000bc2:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc4:	2380      	movs	r3, #128	; 0x80
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000bca:	23a0      	movs	r3, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bcc:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000bce:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000bd0:	039b      	lsls	r3, r3, #14
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8000bd2:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd4:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000bd6:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000bd8:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 8000bda:	f000 fdad 	bl	8001738 <HAL_RCC_OscConfig>
 8000bde:	2800      	cmp	r0, #0
 8000be0:	d000      	beq.n	8000be4 <SystemClock_Config+0x28>
 8000be2:	e7fe      	b.n	8000be2 <SystemClock_Config+0x26>
    /* Initialization Error */
    while(1); 
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000be4:	2307      	movs	r3, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be8:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 8000bea:	0021      	movs	r1, r4
 8000bec:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8000bee:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf0:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
 8000bf2:	f000 ffb9 	bl	8001b68 <HAL_RCC_ClockConfig>
 8000bf6:	2800      	cmp	r0, #0
 8000bf8:	d000      	beq.n	8000bfc <SystemClock_Config+0x40>
 8000bfa:	e7fe      	b.n	8000bfa <SystemClock_Config+0x3e>
  {
    /* Initialization Error */
    while(1); 
  }
}
 8000bfc:	b011      	add	sp, #68	; 0x44
 8000bfe:	bd30      	pop	{r4, r5, pc}

08000c00 <main>:
{
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	b085      	sub	sp, #20
  HAL_Init();
 8000c04:	f000 f954 	bl	8000eb0 <HAL_Init>
  SystemClock_Config();  
 8000c08:	f7ff ffd8 	bl	8000bbc <SystemClock_Config>
	UART_Init();
 8000c0c:	f000 f87e 	bl	8000d0c <UART_Init>
	adxl345_init();
 8000c10:	f7ff ff10 	bl	8000a34 <adxl345_init>
   adxl345_get_g_values(&x,&y,&z);
 8000c14:	4d16      	ldr	r5, [pc, #88]	; (8000c70 <main+0x70>)
 8000c16:	4c17      	ldr	r4, [pc, #92]	; (8000c74 <main+0x74>)
 8000c18:	002a      	movs	r2, r5
 8000c1a:	4917      	ldr	r1, [pc, #92]	; (8000c78 <main+0x78>)
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f7ff ff53 	bl	8000ac8 <adxl345_get_g_values>
	 adxl345_get_raw_values(&raw_x,&raw_y,&raw_z);
 8000c22:	4a16      	ldr	r2, [pc, #88]	; (8000c7c <main+0x7c>)
 8000c24:	4916      	ldr	r1, [pc, #88]	; (8000c80 <main+0x80>)
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <main+0x84>)
 8000c28:	f7ff ffa0 	bl	8000b6c <adxl345_get_raw_values>
		size = sprintf(string,"%f %f %f\n",x,y,z);
 8000c2c:	6820      	ldr	r0, [r4, #0]
 8000c2e:	f7ff fdc3 	bl	80007b8 <__aeabi_f2d>
 8000c32:	0006      	movs	r6, r0
 8000c34:	6828      	ldr	r0, [r5, #0]
 8000c36:	000f      	movs	r7, r1
 8000c38:	f7ff fdbe 	bl	80007b8 <__aeabi_f2d>
 8000c3c:	9002      	str	r0, [sp, #8]
 8000c3e:	9103      	str	r1, [sp, #12]
 8000c40:	4b0d      	ldr	r3, [pc, #52]	; (8000c78 <main+0x78>)
 8000c42:	4c11      	ldr	r4, [pc, #68]	; (8000c88 <main+0x88>)
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	f7ff fdb7 	bl	80007b8 <__aeabi_f2d>
 8000c4a:	0032      	movs	r2, r6
 8000c4c:	9000      	str	r0, [sp, #0]
 8000c4e:	9101      	str	r1, [sp, #4]
 8000c50:	003b      	movs	r3, r7
 8000c52:	490e      	ldr	r1, [pc, #56]	; (8000c8c <main+0x8c>)
 8000c54:	0020      	movs	r0, r4
 8000c56:	f001 f9cf 	bl	8001ff8 <siprintf>
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <main+0x90>)
 8000c5c:	0001      	movs	r1, r0
 8000c5e:	6018      	str	r0, [r3, #0]
    UART_send_byte_array(string,size);
 8000c60:	0020      	movs	r0, r4
 8000c62:	f000 f905 	bl	8000e70 <UART_send_byte_array>
		HAL_Delay(100);
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f000 f940 	bl	8000eec <HAL_Delay>
 8000c6c:	e7d2      	b.n	8000c14 <main+0x14>
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	20000128 	.word	0x20000128
 8000c74:	200000ec 	.word	0x200000ec
 8000c78:	20000130 	.word	0x20000130
 8000c7c:	20000124 	.word	0x20000124
 8000c80:	200000f0 	.word	0x200000f0
 8000c84:	2000012c 	.word	0x2000012c
 8000c88:	200000f2 	.word	0x200000f2
 8000c8c:	080028a0 	.word	0x080028a0
 8000c90:	20000088 	.word	0x20000088

08000c94 <NMI_Handler>:
 8000c94:	4770      	bx	lr

08000c96 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000c96:	e7fe      	b.n	8000c96 <HardFault_Handler>

08000c98 <SVC_Handler>:
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
}
 8000c9a:	4770      	bx	lr

08000c9c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000c9c:	b510      	push	{r4, lr}
  HAL_IncTick();
 8000c9e:	f000 f917 	bl	8000ed0 <HAL_IncTick>
}
 8000ca2:	bd10      	pop	{r4, pc}

08000ca4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4b13      	ldr	r3, [pc, #76]	; (8000cf4 <SystemInit+0x50>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000ca8:	4813      	ldr	r0, [pc, #76]	; (8000cf8 <SystemInit+0x54>)
  RCC->CR |= (uint32_t)0x00000001U;
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	430a      	orrs	r2, r1
 8000cae:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000cb0:	685a      	ldr	r2, [r3, #4]
 8000cb2:	4002      	ands	r2, r0
 8000cb4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4810      	ldr	r0, [pc, #64]	; (8000cfc <SystemInit+0x58>)
 8000cba:	4002      	ands	r2, r0
 8000cbc:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	480f      	ldr	r0, [pc, #60]	; (8000d00 <SystemInit+0x5c>)
 8000cc2:	4002      	ands	r2, r0
 8000cc4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000cc6:	685a      	ldr	r2, [r3, #4]
 8000cc8:	480e      	ldr	r0, [pc, #56]	; (8000d04 <SystemInit+0x60>)
 8000cca:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000ccc:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8000cce:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd2:	4382      	bics	r2, r0
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F042x6) || defined (STM32F048xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE2CU;
#elif defined (STM32F070x6) || defined (STM32F070xB)
  /* Reset USART1SW[1:0], I2C1SW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFE6CU;
 8000cd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <SystemInit+0x64>)
 8000cda:	4002      	ands	r2, r0
 8000cdc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set default USB clock to PLLCLK, since there is no HSI48 */
  RCC->CFGR3 |= (uint32_t)0x00000080U;  
 8000cde:	2280      	movs	r2, #128	; 0x80
 8000ce0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000ce2:	4302      	orrs	r2, r0
 8000ce4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce8:	438a      	bics	r2, r1
 8000cea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]

}
 8000cf0:	4770      	bx	lr
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	08ffb80c 	.word	0x08ffb80c
 8000cfc:	fef6ffff 	.word	0xfef6ffff
 8000d00:	fffbffff 	.word	0xfffbffff
 8000d04:	ffc0ffff 	.word	0xffc0ffff
 8000d08:	fffffe6c 	.word	0xfffffe6c

08000d0c <UART_Init>:
	
GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */  
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	2280      	movs	r2, #128	; 0x80
 8000d0e:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <UART_Init+0xa8>)
{
 8000d10:	b570      	push	{r4, r5, r6, lr}
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	6959      	ldr	r1, [r3, #20]
 8000d14:	0292      	lsls	r2, r2, #10
 8000d16:	4311      	orrs	r1, r2
 8000d18:	6159      	str	r1, [r3, #20]
 8000d1a:	6959      	ldr	r1, [r3, #20]
{
 8000d1c:	b088      	sub	sp, #32
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4011      	ands	r1, r2
 8000d20:	9101      	str	r1, [sp, #4]
 8000d22:	9901      	ldr	r1, [sp, #4]

  /* Enable USARTx clock */
  __HAL_RCC_USART2_CLK_ENABLE(); 
 8000d24:	69d9      	ldr	r1, [r3, #28]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
  
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d26:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_USART2_CLK_ENABLE(); 
 8000d28:	4311      	orrs	r1, r2
 8000d2a:	61d9      	str	r1, [r3, #28]
 8000d2c:	69db      	ldr	r3, [r3, #28]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000d2e:	2501      	movs	r5, #1
  __HAL_RCC_USART2_CLK_ENABLE(); 
 8000d30:	401a      	ands	r2, r3
 8000d32:	9202      	str	r2, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000d34:	2602      	movs	r6, #2
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d36:	2403      	movs	r4, #3
  __HAL_RCC_USART2_CLK_ENABLE(); 
 8000d38:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8000d3a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3c:	a903      	add	r1, sp, #12
 8000d3e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin       = GPIO_PIN_2;
 8000d40:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000d42:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d44:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000d46:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d48:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f000 f92f 	bl	8000fac <HAL_GPIO_Init>
	
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d50:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	05c0      	lsls	r0, r0, #23
 8000d54:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d56:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000d58:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000d5a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8000d5c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d5e:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f000 f924 	bl	8000fac <HAL_GPIO_Init>
      - Parity = None
      - BaudRate = 9600 baud
      - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USART2;
	
  UartHandle.Init.BaudRate   = 9600;
 8000d64:	2396      	movs	r3, #150	; 0x96
  UartHandle.Instance        = USART2;
 8000d66:	4c14      	ldr	r4, [pc, #80]	; (8000db8 <UART_Init+0xac>)
  UartHandle.Init.BaudRate   = 9600;
 8000d68:	019b      	lsls	r3, r3, #6
 8000d6a:	6063      	str	r3, [r4, #4]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
  UartHandle.Init.Parity     = UART_PARITY_NONE;
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000d6c:	220c      	movs	r2, #12
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	2300      	movs	r3, #0
  UartHandle.Instance        = USART2;
 8000d70:	4e12      	ldr	r6, [pc, #72]	; (8000dbc <UART_Init+0xb0>)
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; 
	
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8000d72:	0020      	movs	r0, r4
  UartHandle.Instance        = USART2;
 8000d74:	6026      	str	r6, [r4, #0]
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	60a3      	str	r3, [r4, #8]
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
 8000d78:	60e3      	str	r3, [r4, #12]
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 8000d7a:	6123      	str	r3, [r4, #16]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000d7c:	61a3      	str	r3, [r4, #24]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 8000d7e:	6162      	str	r2, [r4, #20]
  UartHandle.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT; 
 8000d80:	6263      	str	r3, [r4, #36]	; 0x24
  if(HAL_UART_DeInit(&UartHandle) != HAL_OK)
 8000d82:	f000 ff9f 	bl	8001cc4 <HAL_UART_DeInit>
 8000d86:	2800      	cmp	r0, #0
 8000d88:	d000      	beq.n	8000d8c <UART_Init+0x80>
 8000d8a:	e7fe      	b.n	8000d8a <UART_Init+0x7e>
  {
    //ERROR
		UART_Error_Handler();
  }  
	
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 8000d8c:	0020      	movs	r0, r4
 8000d8e:	f001 f8c3 	bl	8001f18 <HAL_UART_Init>
 8000d92:	1e01      	subs	r1, r0, #0
 8000d94:	d000      	beq.n	8000d98 <UART_Init+0x8c>
 8000d96:	e7fe      	b.n	8000d96 <UART_Init+0x8a>
		//ERROR
    UART_Error_Handler();
  }
	
/* 4- Enable UART Receive Data Register Not Empty */
   SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8000d98:	2320      	movs	r3, #32
 8000d9a:	6832      	ldr	r2, [r6, #0]

	
	/* 5 - Enable UART Interrupt in NVIC */
	
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8000d9c:	201c      	movs	r0, #28
   SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	6033      	str	r3, [r6, #0]
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 1);
 8000da2:	002a      	movs	r2, r5
 8000da4:	f000 f8ae 	bl	8000f04 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000da8:	201c      	movs	r0, #28
 8000daa:	f000 f8db 	bl	8000f64 <HAL_NVIC_EnableIRQ>
}
 8000dae:	b008      	add	sp, #32
 8000db0:	bd70      	pop	{r4, r5, r6, pc}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	40021000 	.word	0x40021000
 8000db8:	20000134 	.word	0x20000134
 8000dbc:	40004400 	.word	0x40004400

08000dc0 <USART2_IRQHandler>:
  uint32_t control_reg1 = USART2->CR1;
  uint32_t rx_data = 0;
	
	
    /* UART in mode Receiver */
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 8000dc0:	2120      	movs	r1, #32
  uint32_t isrflags = USART2->ISR;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <USART2_IRQHandler+0x6c>)
{  
 8000dc4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags = USART2->ISR;
 8000dc6:	69dc      	ldr	r4, [r3, #28]
 8000dc8:	0018      	movs	r0, r3
  uint32_t control_reg1 = USART2->CR1;
 8000dca:	681a      	ldr	r2, [r3, #0]
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((control_reg1 & USART_CR1_RXNEIE) != RESET))
 8000dcc:	420c      	tst	r4, r1
 8000dce:	d014      	beq.n	8000dfa <USART2_IRQHandler+0x3a>
 8000dd0:	420a      	tst	r2, r1
 8000dd2:	d012      	beq.n	8000dfa <USART2_IRQHandler+0x3a>
    {
			rx_data = (uint16_t) USART2->RDR;
			
			/* Read one byte from the receive data register */ 
			
			UART_BufferRX.buffer[UART_BufferRX.head_pointer] = rx_data;
 8000dd4:	2280      	movs	r2, #128	; 0x80
			rx_data = (uint16_t) USART2->RDR;
 8000dd6:	8c98      	ldrh	r0, [r3, #36]	; 0x24
			UART_BufferRX.buffer[UART_BufferRX.head_pointer] = rx_data;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <USART2_IRQHandler+0x70>)
 8000dda:	00d2      	lsls	r2, r2, #3
 8000ddc:	5899      	ldr	r1, [r3, r2]
			rx_data = (uint16_t) USART2->RDR;
 8000dde:	b280      	uxth	r0, r0
			UART_BufferRX.buffer[UART_BufferRX.head_pointer] = rx_data;
 8000de0:	0089      	lsls	r1, r1, #2
 8000de2:	50c8      	str	r0, [r1, r3]
			
			UART_BufferRX.head_pointer = UART_BufferRX.head_pointer + 1;
 8000de4:	5899      	ldr	r1, [r3, r2]
 8000de6:	3101      	adds	r1, #1
 8000de8:	5099      	str	r1, [r3, r2]
		if(UART_BufferTX.head_pointer != UART_BufferTX.tail_pointer)
		{
			// Send one byte from Transmit buffer
			USART2->TDR = UART_BufferTX.buffer[UART_BufferTX.tail_pointer++];
			
			if(UART_BufferTX.tail_pointer == BUFFER_SIZE)
 8000dea:	2180      	movs	r1, #128	; 0x80
 8000dec:	5898      	ldr	r0, [r3, r2]
 8000dee:	0049      	lsls	r1, r1, #1
 8000df0:	4288      	cmp	r0, r1
 8000df2:	d101      	bne.n	8000df8 <USART2_IRQHandler+0x38>
			{
				UART_BufferTX.tail_pointer = 0;
 8000df4:	2100      	movs	r1, #0
 8000df6:	5099      	str	r1, [r3, r2]
		}			
		
    return;
  }
	
}
 8000df8:	bd30      	pop	{r4, r5, pc}
  if(((isrflags & USART_ISR_TXE) != RESET) && ((control_reg1 & USART_CR1_TXEIE) != RESET))
 8000dfa:	2180      	movs	r1, #128	; 0x80
 8000dfc:	420c      	tst	r4, r1
 8000dfe:	d0fb      	beq.n	8000df8 <USART2_IRQHandler+0x38>
 8000e00:	420a      	tst	r2, r1
 8000e02:	d0f9      	beq.n	8000df8 <USART2_IRQHandler+0x38>
		if(UART_BufferTX.head_pointer != UART_BufferTX.tail_pointer)
 8000e04:	2280      	movs	r2, #128	; 0x80
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <USART2_IRQHandler+0x74>)
 8000e08:	00d2      	lsls	r2, r2, #3
 8000e0a:	589d      	ldr	r5, [r3, r2]
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <USART2_IRQHandler+0x78>)
 8000e0e:	589c      	ldr	r4, [r3, r2]
 8000e10:	42a5      	cmp	r5, r4
 8000e12:	d007      	beq.n	8000e24 <USART2_IRQHandler+0x64>
			USART2->TDR = UART_BufferTX.buffer[UART_BufferTX.tail_pointer++];
 8000e14:	5899      	ldr	r1, [r3, r2]
 8000e16:	1c4c      	adds	r4, r1, #1
 8000e18:	509c      	str	r4, [r3, r2]
 8000e1a:	0089      	lsls	r1, r1, #2
 8000e1c:	58c9      	ldr	r1, [r1, r3]
 8000e1e:	b289      	uxth	r1, r1
 8000e20:	8501      	strh	r1, [r0, #40]	; 0x28
 8000e22:	e7e2      	b.n	8000dea <USART2_IRQHandler+0x2a>
      CLEAR_BIT(USART2->CR1, USART_CR1_TXEIE);
 8000e24:	6803      	ldr	r3, [r0, #0]
 8000e26:	438b      	bics	r3, r1
 8000e28:	6003      	str	r3, [r0, #0]
 8000e2a:	e7e5      	b.n	8000df8 <USART2_IRQHandler+0x38>
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	200001a4 	.word	0x200001a4
 8000e34:	200005ac 	.word	0x200005ac
 8000e38:	00000404 	.word	0x00000404

08000e3c <UART_send_byte>:

void UART_send_byte(char data)
{
	UART_BufferTX.buffer[UART_BufferTX.head_pointer++] = data;
 8000e3c:	2280      	movs	r2, #128	; 0x80
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <UART_send_byte+0x2c>)
 8000e40:	00d2      	lsls	r2, r2, #3
 8000e42:	5899      	ldr	r1, [r3, r2]
{
 8000e44:	b510      	push	{r4, lr}
	UART_BufferTX.buffer[UART_BufferTX.head_pointer++] = data;
 8000e46:	1c4c      	adds	r4, r1, #1
 8000e48:	0089      	lsls	r1, r1, #2
 8000e4a:	509c      	str	r4, [r3, r2]
 8000e4c:	50c8      	str	r0, [r1, r3]
	if(UART_BufferTX.head_pointer == BUFFER_SIZE)
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	5898      	ldr	r0, [r3, r2]
 8000e52:	0049      	lsls	r1, r1, #1
 8000e54:	4288      	cmp	r0, r1
 8000e56:	d101      	bne.n	8000e5c <UART_send_byte+0x20>
	{
		UART_BufferTX.head_pointer = 0;
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5099      	str	r1, [r3, r2]
	}
  /* Enable the UART Transmit Data Register Empty Interrupt */
 SET_BIT(USART2->CR1, USART_CR1_TXEIE);
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	4a03      	ldr	r2, [pc, #12]	; (8000e6c <UART_send_byte+0x30>)
 8000e60:	6811      	ldr	r1, [r2, #0]
 8000e62:	430b      	orrs	r3, r1
 8000e64:	6013      	str	r3, [r2, #0]
}
 8000e66:	bd10      	pop	{r4, pc}
 8000e68:	200005ac 	.word	0x200005ac
 8000e6c:	40004400 	.word	0x40004400

08000e70 <UART_send_byte_array>:
	return kar;	
}


void UART_send_byte_array(char* buffer, int size)
{
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	0005      	movs	r5, r0
 8000e74:	000e      	movs	r6, r1
	int i;
	
	for(i=0;i<size;i++)
 8000e76:	0004      	movs	r4, r0
 8000e78:	1b63      	subs	r3, r4, r5
 8000e7a:	429e      	cmp	r6, r3
 8000e7c:	dc00      	bgt.n	8000e80 <UART_send_byte_array+0x10>
	{
		UART_send_byte(buffer[i]);
	}
}
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
		UART_send_byte(buffer[i]);
 8000e80:	7820      	ldrb	r0, [r4, #0]
 8000e82:	f7ff ffdb 	bl	8000e3c <UART_send_byte>
 8000e86:	3401      	adds	r4, #1
 8000e88:	e7f6      	b.n	8000e78 <UART_send_byte_array+0x8>

08000e8a <HAL_MspInit>:
 8000e8a:	4770      	bx	lr

08000e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e8c:	b510      	push	{r4, lr}
 8000e8e:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000e90:	f000 ff00 	bl	8001c94 <HAL_RCC_GetHCLKFreq>
 8000e94:	21fa      	movs	r1, #250	; 0xfa
 8000e96:	0089      	lsls	r1, r1, #2
 8000e98:	f7ff f940 	bl	800011c <__udivsi3>
 8000e9c:	f000 f86c 	bl	8000f78 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	0021      	movs	r1, r4
 8000ea6:	4240      	negs	r0, r0
 8000ea8:	f000 f82c 	bl	8000f04 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000eac:	2000      	movs	r0, #0
 8000eae:	bd10      	pop	{r4, pc}

08000eb0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb0:	2310      	movs	r3, #16
 8000eb2:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_Init+0x1c>)
{
 8000eb4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb6:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eba:	430b      	orrs	r3, r1
 8000ebc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	f7ff ffe5 	bl	8000e8c <HAL_InitTick>
  HAL_MspInit();
 8000ec2:	f7ff ffe2 	bl	8000e8a <HAL_MspInit>
}
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	bd10      	pop	{r4, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	40022000 	.word	0x40022000

08000ed0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ed0:	4a02      	ldr	r2, [pc, #8]	; (8000edc <HAL_IncTick+0xc>)
 8000ed2:	6813      	ldr	r3, [r2, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	4770      	bx	lr
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	200009b4 	.word	0x200009b4

08000ee0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ee0:	4b01      	ldr	r3, [pc, #4]	; (8000ee8 <HAL_GetTick+0x8>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
}
 8000ee4:	4770      	bx	lr
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	200009b4 	.word	0x200009b4

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000eec:	b513      	push	{r0, r1, r4, lr}
 8000eee:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000ef0:	f7ff fff6 	bl	8000ee0 <HAL_GetTick>
 8000ef4:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000ef6:	f7ff fff3 	bl	8000ee0 <HAL_GetTick>
 8000efa:	9b01      	ldr	r3, [sp, #4]
 8000efc:	1b00      	subs	r0, r0, r4
 8000efe:	4298      	cmp	r0, r3
 8000f00:	d3f9      	bcc.n	8000ef6 <HAL_Delay+0xa>
  {
  }
}
 8000f02:	bd13      	pop	{r0, r1, r4, pc}

08000f04 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000f08:	2800      	cmp	r0, #0
 8000f0a:	da14      	bge.n	8000f36 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f0c:	230f      	movs	r3, #15
 8000f0e:	b2c0      	uxtb	r0, r0
 8000f10:	4003      	ands	r3, r0
 8000f12:	3b08      	subs	r3, #8
 8000f14:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <HAL_NVIC_SetPriority+0x58>)
 8000f16:	089b      	lsrs	r3, r3, #2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	189b      	adds	r3, r3, r2
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	4010      	ands	r0, r2
 8000f20:	4090      	lsls	r0, r2
 8000f22:	32fc      	adds	r2, #252	; 0xfc
 8000f24:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f26:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f28:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f2a:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2c:	69dc      	ldr	r4, [r3, #28]
 8000f2e:	43ac      	bics	r4, r5
 8000f30:	4321      	orrs	r1, r4
 8000f32:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000f34:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f36:	2503      	movs	r5, #3
 8000f38:	0883      	lsrs	r3, r0, #2
 8000f3a:	4028      	ands	r0, r5
 8000f3c:	40a8      	lsls	r0, r5
 8000f3e:	35fc      	adds	r5, #252	; 0xfc
 8000f40:	002e      	movs	r6, r5
 8000f42:	4a07      	ldr	r2, [pc, #28]	; (8000f60 <HAL_NVIC_SetPriority+0x5c>)
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	189b      	adds	r3, r3, r2
 8000f48:	22c0      	movs	r2, #192	; 0xc0
 8000f4a:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f4c:	4029      	ands	r1, r5
 8000f4e:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	589c      	ldr	r4, [r3, r2]
 8000f54:	43b4      	bics	r4, r6
 8000f56:	4321      	orrs	r1, r4
 8000f58:	5099      	str	r1, [r3, r2]
 8000f5a:	e7eb      	b.n	8000f34 <HAL_NVIC_SetPriority+0x30>
 8000f5c:	e000ed00 	.word	0xe000ed00
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000f64:	231f      	movs	r3, #31
 8000f66:	4018      	ands	r0, r3
 8000f68:	3b1e      	subs	r3, #30
 8000f6a:	4083      	lsls	r3, r0
 8000f6c:	4a01      	ldr	r2, [pc, #4]	; (8000f74 <HAL_NVIC_EnableIRQ+0x10>)
 8000f6e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f70:	4770      	bx	lr
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <HAL_SYSTICK_Config+0x28>)
 8000f7a:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7c:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d80d      	bhi.n	8000f9e <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f82:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f84:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f86:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f88:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8a:	6a03      	ldr	r3, [r0, #32]
 8000f8c:	0609      	lsls	r1, r1, #24
 8000f8e:	021b      	lsls	r3, r3, #8
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	430b      	orrs	r3, r1
 8000f94:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f96:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f98:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9a:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f9e:	4770      	bx	lr
 8000fa0:	00ffffff 	.word	0x00ffffff
 8000fa4:	e000e010 	.word	0xe000e010
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000fac:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000fae:	680b      	ldr	r3, [r1, #0]
{ 
 8000fb0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000fb2:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000fb4:	2300      	movs	r3, #0
{ 
 8000fb6:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000fb8:	9a02      	ldr	r2, [sp, #8]
 8000fba:	40da      	lsrs	r2, r3
 8000fbc:	d101      	bne.n	8000fc2 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 8000fbe:	b007      	add	sp, #28
 8000fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	9203      	str	r2, [sp, #12]
 8000fc8:	9903      	ldr	r1, [sp, #12]
 8000fca:	9a02      	ldr	r2, [sp, #8]
 8000fcc:	400a      	ands	r2, r1
 8000fce:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000fd0:	d100      	bne.n	8000fd4 <HAL_GPIO_Init+0x28>
 8000fd2:	e08c      	b.n	80010ee <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000fd4:	9a01      	ldr	r2, [sp, #4]
 8000fd6:	2110      	movs	r1, #16
 8000fd8:	6852      	ldr	r2, [r2, #4]
 8000fda:	0016      	movs	r6, r2
 8000fdc:	438e      	bics	r6, r1
 8000fde:	2e02      	cmp	r6, #2
 8000fe0:	d10e      	bne.n	8001000 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000fe2:	2507      	movs	r5, #7
 8000fe4:	401d      	ands	r5, r3
 8000fe6:	00ad      	lsls	r5, r5, #2
 8000fe8:	3901      	subs	r1, #1
 8000fea:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000fec:	08dc      	lsrs	r4, r3, #3
 8000fee:	00a4      	lsls	r4, r4, #2
 8000ff0:	1904      	adds	r4, r0, r4
 8000ff2:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000ff4:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000ff6:	9901      	ldr	r1, [sp, #4]
 8000ff8:	6909      	ldr	r1, [r1, #16]
 8000ffa:	40a9      	lsls	r1, r5
 8000ffc:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000ffe:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001000:	2403      	movs	r4, #3
 8001002:	005f      	lsls	r7, r3, #1
 8001004:	40bc      	lsls	r4, r7
 8001006:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8001008:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800100a:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800100c:	4025      	ands	r5, r4
 800100e:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001010:	2503      	movs	r5, #3
 8001012:	4015      	ands	r5, r2
 8001014:	40bd      	lsls	r5, r7
 8001016:	4661      	mov	r1, ip
 8001018:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800101a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101c:	2e01      	cmp	r6, #1
 800101e:	d80f      	bhi.n	8001040 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001020:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8001022:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001024:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001026:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001028:	40bd      	lsls	r5, r7
 800102a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800102c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800102e:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001030:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001032:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001034:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001036:	2101      	movs	r1, #1
 8001038:	400d      	ands	r5, r1
 800103a:	409d      	lsls	r5, r3
 800103c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800103e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8001040:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001042:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001044:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001046:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001048:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800104a:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800104c:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800104e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001050:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001052:	420a      	tst	r2, r1
 8001054:	d04b      	beq.n	80010ee <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2101      	movs	r1, #1
 8001058:	4c26      	ldr	r4, [pc, #152]	; (80010f4 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800105a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800105e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001060:	430d      	orrs	r5, r1
 8001062:	61a5      	str	r5, [r4, #24]
 8001064:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8001066:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001068:	400c      	ands	r4, r1
 800106a:	9405      	str	r4, [sp, #20]
 800106c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800106e:	240f      	movs	r4, #15
 8001070:	4921      	ldr	r1, [pc, #132]	; (80010f8 <HAL_GPIO_Init+0x14c>)
 8001072:	00ad      	lsls	r5, r5, #2
 8001074:	00b6      	lsls	r6, r6, #2
 8001076:	186d      	adds	r5, r5, r1
 8001078:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800107c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800107e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001080:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001082:	2400      	movs	r4, #0
 8001084:	4288      	cmp	r0, r1
 8001086:	d00c      	beq.n	80010a2 <HAL_GPIO_Init+0xf6>
 8001088:	491c      	ldr	r1, [pc, #112]	; (80010fc <HAL_GPIO_Init+0x150>)
 800108a:	3401      	adds	r4, #1
 800108c:	4288      	cmp	r0, r1
 800108e:	d008      	beq.n	80010a2 <HAL_GPIO_Init+0xf6>
 8001090:	491b      	ldr	r1, [pc, #108]	; (8001100 <HAL_GPIO_Init+0x154>)
 8001092:	3401      	adds	r4, #1
 8001094:	4288      	cmp	r0, r1
 8001096:	d004      	beq.n	80010a2 <HAL_GPIO_Init+0xf6>
 8001098:	491a      	ldr	r1, [pc, #104]	; (8001104 <HAL_GPIO_Init+0x158>)
 800109a:	3403      	adds	r4, #3
 800109c:	4288      	cmp	r0, r1
 800109e:	d100      	bne.n	80010a2 <HAL_GPIO_Init+0xf6>
 80010a0:	3c02      	subs	r4, #2
 80010a2:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010a4:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010a6:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80010a8:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80010aa:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80010ac:	4c16      	ldr	r4, [pc, #88]	; (8001108 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010ae:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80010b0:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80010b2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010b4:	03d1      	lsls	r1, r2, #15
 80010b6:	d401      	bmi.n	80010bc <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010b8:	003e      	movs	r6, r7
 80010ba:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80010bc:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80010be:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80010c0:	9e00      	ldr	r6, [sp, #0]
 80010c2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c4:	0391      	lsls	r1, r2, #14
 80010c6:	d401      	bmi.n	80010cc <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80010c8:	003e      	movs	r6, r7
 80010ca:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80010cc:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80010ce:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80010d0:	9e00      	ldr	r6, [sp, #0]
 80010d2:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d4:	02d1      	lsls	r1, r2, #11
 80010d6:	d401      	bmi.n	80010dc <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010d8:	003e      	movs	r6, r7
 80010da:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80010dc:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80010de:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80010e0:	9f00      	ldr	r7, [sp, #0]
 80010e2:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e4:	0292      	lsls	r2, r2, #10
 80010e6:	d401      	bmi.n	80010ec <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80010e8:	402e      	ands	r6, r5
 80010ea:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 80010ec:	60e7      	str	r7, [r4, #12]
    position++;
 80010ee:	3301      	adds	r3, #1
 80010f0:	e762      	b.n	8000fb8 <HAL_GPIO_Init+0xc>
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40021000 	.word	0x40021000
 80010f8:	40010000 	.word	0x40010000
 80010fc:	48000400 	.word	0x48000400
 8001100:	48000800 	.word	0x48000800
 8001104:	48000c00 	.word	0x48000c00
 8001108:	40010400 	.word	0x40010400

0800110c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800110c:	6803      	ldr	r3, [r0, #0]
 800110e:	699a      	ldr	r2, [r3, #24]
 8001110:	0792      	lsls	r2, r2, #30
 8001112:	d501      	bpl.n	8001118 <I2C_Flush_TXDR+0xc>
  {
     hi2c->Instance->TXDR = 0x00U;
 8001114:	2200      	movs	r2, #0
 8001116:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001118:	2201      	movs	r2, #1
 800111a:	6999      	ldr	r1, [r3, #24]
 800111c:	4211      	tst	r1, r2
 800111e:	d102      	bne.n	8001126 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001120:	6999      	ldr	r1, [r3, #24]
 8001122:	430a      	orrs	r2, r1
 8001124:	619a      	str	r2, [r3, #24]
  }
}
 8001126:	4770      	bx	lr

08001128 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001128:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 800112a:	6804      	ldr	r4, [r0, #0]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <I2C_TransferConfig+0x20>)
  tmpreg = hi2c->Instance->CR2;
 800112e:	6865      	ldr	r5, [r4, #4]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8001130:	0589      	lsls	r1, r1, #22
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8001132:	4028      	ands	r0, r5
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8001134:	9d03      	ldr	r5, [sp, #12]
 8001136:	0d89      	lsrs	r1, r1, #22
 8001138:	432b      	orrs	r3, r5
 800113a:	4319      	orrs	r1, r3
 800113c:	0412      	lsls	r2, r2, #16
 800113e:	430a      	orrs	r2, r1
 8001140:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 8001142:	6062      	str	r2, [r4, #4]
}
 8001144:	bd30      	pop	{r4, r5, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	fc009800 	.word	0xfc009800

0800114c <I2C_WaitOnFlagUntilTimeout>:
{
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	0004      	movs	r4, r0
 8001150:	000e      	movs	r6, r1
 8001152:	0017      	movs	r7, r2
 8001154:	001d      	movs	r5, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001156:	6822      	ldr	r2, [r4, #0]
 8001158:	6993      	ldr	r3, [r2, #24]
 800115a:	4033      	ands	r3, r6
 800115c:	1b9b      	subs	r3, r3, r6
 800115e:	4259      	negs	r1, r3
 8001160:	414b      	adcs	r3, r1
 8001162:	42bb      	cmp	r3, r7
 8001164:	d001      	beq.n	800116a <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001166:	2000      	movs	r0, #0
 8001168:	e00e      	b.n	8001188 <I2C_WaitOnFlagUntilTimeout+0x3c>
    if(Timeout != HAL_MAX_DELAY)
 800116a:	1c6b      	adds	r3, r5, #1
 800116c:	d0f4      	beq.n	8001158 <I2C_WaitOnFlagUntilTimeout+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800116e:	2d00      	cmp	r5, #0
 8001170:	d10b      	bne.n	800118a <I2C_WaitOnFlagUntilTimeout+0x3e>
        hi2c->State= HAL_I2C_STATE_READY;
 8001172:	0023      	movs	r3, r4
 8001174:	2220      	movs	r2, #32
 8001176:	3341      	adds	r3, #65	; 0x41
 8001178:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800117a:	0022      	movs	r2, r4
 800117c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800117e:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001180:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8001182:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001184:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001186:	7023      	strb	r3, [r4, #0]
}
 8001188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800118a:	f7ff fea9 	bl	8000ee0 <HAL_GetTick>
 800118e:	9b06      	ldr	r3, [sp, #24]
 8001190:	1ac0      	subs	r0, r0, r3
 8001192:	4285      	cmp	r5, r0
 8001194:	d2df      	bcs.n	8001156 <I2C_WaitOnFlagUntilTimeout+0xa>
 8001196:	e7ec      	b.n	8001172 <I2C_WaitOnFlagUntilTimeout+0x26>

08001198 <I2C_IsAcknowledgeFailed>:
{
 8001198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800119a:	6803      	ldr	r3, [r0, #0]
{
 800119c:	0004      	movs	r4, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800119e:	6998      	ldr	r0, [r3, #24]
 80011a0:	2310      	movs	r3, #16
{
 80011a2:	000e      	movs	r6, r1
 80011a4:	0017      	movs	r7, r2
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011a6:	4018      	ands	r0, r3
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011a8:	2520      	movs	r5, #32
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011aa:	2800      	cmp	r0, #0
 80011ac:	d115      	bne.n	80011da <I2C_IsAcknowledgeFailed+0x42>
}
 80011ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(Timeout != HAL_MAX_DELAY)
 80011b0:	1c72      	adds	r2, r6, #1
 80011b2:	d013      	beq.n	80011dc <I2C_IsAcknowledgeFailed+0x44>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80011b4:	2e00      	cmp	r6, #0
 80011b6:	d10b      	bne.n	80011d0 <I2C_IsAcknowledgeFailed+0x38>
          hi2c->State= HAL_I2C_STATE_READY;
 80011b8:	0023      	movs	r3, r4
 80011ba:	2220      	movs	r2, #32
 80011bc:	3341      	adds	r3, #65	; 0x41
 80011be:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c0:	0022      	movs	r2, r4
 80011c2:	2300      	movs	r3, #0
 80011c4:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80011c6:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80011c8:	7013      	strb	r3, [r2, #0]
          return HAL_TIMEOUT;
 80011ca:	2003      	movs	r0, #3
          __HAL_UNLOCK(hi2c);
 80011cc:	7023      	strb	r3, [r4, #0]
 80011ce:	e7ee      	b.n	80011ae <I2C_IsAcknowledgeFailed+0x16>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 80011d0:	f7ff fe86 	bl	8000ee0 <HAL_GetTick>
 80011d4:	1bc0      	subs	r0, r0, r7
 80011d6:	4286      	cmp	r6, r0
 80011d8:	d3ee      	bcc.n	80011b8 <I2C_IsAcknowledgeFailed+0x20>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	699a      	ldr	r2, [r3, #24]
 80011de:	422a      	tst	r2, r5
 80011e0:	d0e6      	beq.n	80011b0 <I2C_IsAcknowledgeFailed+0x18>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011e2:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 80011e4:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011e6:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011e8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80011ea:	f7ff ff8f 	bl	800110c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80011ee:	6822      	ldr	r2, [r4, #0]
 80011f0:	4908      	ldr	r1, [pc, #32]	; (8001214 <I2C_IsAcknowledgeFailed+0x7c>)
 80011f2:	6853      	ldr	r3, [r2, #4]
    return HAL_ERROR;
 80011f4:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80011f6:	400b      	ands	r3, r1
 80011f8:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80011fa:	2304      	movs	r3, #4
 80011fc:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State= HAL_I2C_STATE_READY;
 80011fe:	0023      	movs	r3, r4
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001200:	0022      	movs	r2, r4
    hi2c->State= HAL_I2C_STATE_READY;
 8001202:	3341      	adds	r3, #65	; 0x41
 8001204:	701d      	strb	r5, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001206:	2300      	movs	r3, #0
 8001208:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 800120a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800120c:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800120e:	7023      	strb	r3, [r4, #0]
 8001210:	e7cd      	b.n	80011ae <I2C_IsAcknowledgeFailed+0x16>
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	fe00e800 	.word	0xfe00e800

08001218 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121a:	0004      	movs	r4, r0
 800121c:	000d      	movs	r5, r1
 800121e:	0016      	movs	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001220:	2702      	movs	r7, #2
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	423b      	tst	r3, r7
 8001228:	d001      	beq.n	800122e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800122a:	2000      	movs	r0, #0
 800122c:	e018      	b.n	8001260 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800122e:	0032      	movs	r2, r6
 8001230:	0029      	movs	r1, r5
 8001232:	0020      	movs	r0, r4
 8001234:	f7ff ffb0 	bl	8001198 <I2C_IsAcknowledgeFailed>
 8001238:	2800      	cmp	r0, #0
 800123a:	d118      	bne.n	800126e <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if(Timeout != HAL_MAX_DELAY)
 800123c:	1c6b      	adds	r3, r5, #1
 800123e:	d0f0      	beq.n	8001222 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001240:	2d00      	cmp	r5, #0
 8001242:	d10e      	bne.n	8001262 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001244:	2220      	movs	r2, #32
 8001246:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8001248:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800124a:	4313      	orrs	r3, r2
 800124c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 800124e:	0023      	movs	r3, r4
 8001250:	3341      	adds	r3, #65	; 0x41
 8001252:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001254:	0022      	movs	r2, r4
 8001256:	2300      	movs	r3, #0
 8001258:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800125a:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800125c:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 800125e:	7023      	strb	r3, [r4, #0]
}
 8001260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001262:	f7ff fe3d 	bl	8000ee0 <HAL_GetTick>
 8001266:	1b80      	subs	r0, r0, r6
 8001268:	4285      	cmp	r5, r0
 800126a:	d2da      	bcs.n	8001222 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
 800126c:	e7ea      	b.n	8001244 <I2C_WaitOnTXISFlagUntilTimeout+0x2c>
      return HAL_ERROR;
 800126e:	2001      	movs	r0, #1
 8001270:	e7f6      	b.n	8001260 <I2C_WaitOnTXISFlagUntilTimeout+0x48>

08001272 <I2C_RequestMemoryWrite>:
{
 8001272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001274:	0015      	movs	r5, r2
 8001276:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001278:	b2da      	uxtb	r2, r3
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	019b      	lsls	r3, r3, #6
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2380      	movs	r3, #128	; 0x80
{
 8001282:	0004      	movs	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001284:	045b      	lsls	r3, r3, #17
 8001286:	f7ff ff4f 	bl	8001128 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800128a:	9a07      	ldr	r2, [sp, #28]
 800128c:	9906      	ldr	r1, [sp, #24]
 800128e:	0020      	movs	r0, r4
 8001290:	f7ff ffc2 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 8001294:	2800      	cmp	r0, #0
 8001296:	d005      	beq.n	80012a4 <I2C_RequestMemoryWrite+0x32>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001298:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 800129a:	2001      	movs	r0, #1
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800129c:	2b04      	cmp	r3, #4
 800129e:	d000      	beq.n	80012a2 <I2C_RequestMemoryWrite+0x30>
      return HAL_TIMEOUT;
 80012a0:	2003      	movs	r0, #3
}
 80012a2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80012a4:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80012a6:	2e01      	cmp	r6, #1
 80012a8:	d10c      	bne.n	80012c4 <I2C_RequestMemoryWrite+0x52>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012aa:	b2ed      	uxtb	r5, r5
 80012ac:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80012ae:	9b07      	ldr	r3, [sp, #28]
 80012b0:	2200      	movs	r2, #0
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2180      	movs	r1, #128	; 0x80
 80012b6:	9b06      	ldr	r3, [sp, #24]
 80012b8:	0020      	movs	r0, r4
 80012ba:	f7ff ff47 	bl	800114c <I2C_WaitOnFlagUntilTimeout>
 80012be:	2800      	cmp	r0, #0
 80012c0:	d1ee      	bne.n	80012a0 <I2C_RequestMemoryWrite+0x2e>
 80012c2:	e7ee      	b.n	80012a2 <I2C_RequestMemoryWrite+0x30>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80012c4:	0a2a      	lsrs	r2, r5, #8
 80012c6:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012c8:	9906      	ldr	r1, [sp, #24]
 80012ca:	9a07      	ldr	r2, [sp, #28]
 80012cc:	0020      	movs	r0, r4
 80012ce:	f7ff ffa3 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 80012d2:	2800      	cmp	r0, #0
 80012d4:	d1e0      	bne.n	8001298 <I2C_RequestMemoryWrite+0x26>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	e7e7      	b.n	80012aa <I2C_RequestMemoryWrite+0x38>

080012da <I2C_RequestMemoryRead>:
{
 80012da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012dc:	0015      	movs	r5, r2
 80012de:	001e      	movs	r6, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	2380      	movs	r3, #128	; 0x80
{
 80012e4:	0004      	movs	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80012e6:	019b      	lsls	r3, r3, #6
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2300      	movs	r3, #0
 80012ec:	f7ff ff1c 	bl	8001128 <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80012f0:	9a07      	ldr	r2, [sp, #28]
 80012f2:	9906      	ldr	r1, [sp, #24]
 80012f4:	0020      	movs	r0, r4
 80012f6:	f7ff ff8f 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	d005      	beq.n	800130a <I2C_RequestMemoryRead+0x30>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80012fe:	6c63      	ldr	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8001300:	2001      	movs	r0, #1
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001302:	2b04      	cmp	r3, #4
 8001304:	d000      	beq.n	8001308 <I2C_RequestMemoryRead+0x2e>
      return HAL_TIMEOUT;
 8001306:	2003      	movs	r0, #3
}
 8001308:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800130a:	6823      	ldr	r3, [r4, #0]
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800130c:	2e01      	cmp	r6, #1
 800130e:	d10c      	bne.n	800132a <I2C_RequestMemoryRead+0x50>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001310:	b2ed      	uxtb	r5, r5
 8001312:	629d      	str	r5, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001314:	9b07      	ldr	r3, [sp, #28]
 8001316:	2200      	movs	r2, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	9b06      	ldr	r3, [sp, #24]
 800131e:	0020      	movs	r0, r4
 8001320:	f7ff ff14 	bl	800114c <I2C_WaitOnFlagUntilTimeout>
 8001324:	2800      	cmp	r0, #0
 8001326:	d1ee      	bne.n	8001306 <I2C_RequestMemoryRead+0x2c>
 8001328:	e7ee      	b.n	8001308 <I2C_RequestMemoryRead+0x2e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800132a:	0a2a      	lsrs	r2, r5, #8
 800132c:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800132e:	9906      	ldr	r1, [sp, #24]
 8001330:	9a07      	ldr	r2, [sp, #28]
 8001332:	0020      	movs	r0, r4
 8001334:	f7ff ff70 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 8001338:	2800      	cmp	r0, #0
 800133a:	d1e0      	bne.n	80012fe <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800133c:	6823      	ldr	r3, [r4, #0]
 800133e:	e7e7      	b.n	8001310 <I2C_RequestMemoryRead+0x36>

08001340 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001342:	0004      	movs	r4, r0
 8001344:	000d      	movs	r5, r1
 8001346:	0016      	movs	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001348:	2720      	movs	r7, #32
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	423b      	tst	r3, r7
 8001350:	d001      	beq.n	8001356 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001352:	2000      	movs	r0, #0
 8001354:	e016      	b.n	8001384 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001356:	0032      	movs	r2, r6
 8001358:	0029      	movs	r1, r5
 800135a:	0020      	movs	r0, r4
 800135c:	f7ff ff1c 	bl	8001198 <I2C_IsAcknowledgeFailed>
 8001360:	2800      	cmp	r0, #0
 8001362:	d116      	bne.n	8001392 <I2C_WaitOnSTOPFlagUntilTimeout+0x52>
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001364:	2d00      	cmp	r5, #0
 8001366:	d10e      	bne.n	8001386 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001368:	2220      	movs	r2, #32
 800136a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 800136c:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800136e:	4313      	orrs	r3, r2
 8001370:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State= HAL_I2C_STATE_READY;
 8001372:	0023      	movs	r3, r4
 8001374:	3341      	adds	r3, #65	; 0x41
 8001376:	701a      	strb	r2, [r3, #0]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001378:	0022      	movs	r2, r4
 800137a:	2300      	movs	r3, #0
 800137c:	3242      	adds	r2, #66	; 0x42
      __HAL_UNLOCK(hi2c);
 800137e:	3440      	adds	r4, #64	; 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001380:	7013      	strb	r3, [r2, #0]
      __HAL_UNLOCK(hi2c);
 8001382:	7023      	strb	r3, [r4, #0]
}
 8001384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((Timeout == 0U)||((HAL_GetTick() - Tickstart) > Timeout))
 8001386:	f7ff fdab 	bl	8000ee0 <HAL_GetTick>
 800138a:	1b80      	subs	r0, r0, r6
 800138c:	4285      	cmp	r5, r0
 800138e:	d2dc      	bcs.n	800134a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 8001390:	e7ea      	b.n	8001368 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
      return HAL_ERROR;
 8001392:	2001      	movs	r0, #1
 8001394:	e7f6      	b.n	8001384 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

08001396 <HAL_I2C_MspInit>:
 8001396:	4770      	bx	lr

08001398 <HAL_I2C_Init>:
{
 8001398:	b570      	push	{r4, r5, r6, lr}
 800139a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800139c:	2001      	movs	r0, #1
  if(hi2c == NULL)
 800139e:	2c00      	cmp	r4, #0
 80013a0:	d03f      	beq.n	8001422 <HAL_I2C_Init+0x8a>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80013a2:	0025      	movs	r5, r4
 80013a4:	3541      	adds	r5, #65	; 0x41
 80013a6:	782b      	ldrb	r3, [r5, #0]
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80013ae:	0022      	movs	r2, r4
 80013b0:	3240      	adds	r2, #64	; 0x40
 80013b2:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 80013b4:	0020      	movs	r0, r4
 80013b6:	f7ff ffee 	bl	8001396 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013ba:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80013bc:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013be:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80013c0:	6823      	ldr	r3, [r4, #0]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013c2:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	68a6      	ldr	r6, [r4, #8]
 80013c8:	438a      	bics	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013cc:	6861      	ldr	r1, [r4, #4]
 80013ce:	4a1a      	ldr	r2, [pc, #104]	; (8001438 <HAL_I2C_Init+0xa0>)
 80013d0:	400a      	ands	r2, r1
 80013d2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013d4:	6899      	ldr	r1, [r3, #8]
 80013d6:	4a19      	ldr	r2, [pc, #100]	; (800143c <HAL_I2C_Init+0xa4>)
 80013d8:	4011      	ands	r1, r2
 80013da:	6099      	str	r1, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013dc:	2801      	cmp	r0, #1
 80013de:	d121      	bne.n	8001424 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013e0:	2180      	movs	r1, #128	; 0x80
 80013e2:	0209      	lsls	r1, r1, #8
 80013e4:	4331      	orrs	r1, r6
 80013e6:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80013e8:	6858      	ldr	r0, [r3, #4]
 80013ea:	4915      	ldr	r1, [pc, #84]	; (8001440 <HAL_I2C_Init+0xa8>)
 80013ec:	4301      	orrs	r1, r0
 80013ee:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013f0:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f2:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013f4:	400a      	ands	r2, r1
 80013f6:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80013f8:	6961      	ldr	r1, [r4, #20]
 80013fa:	6922      	ldr	r2, [r4, #16]
 80013fc:	430a      	orrs	r2, r1
 80013fe:	69a1      	ldr	r1, [r4, #24]
 8001400:	0209      	lsls	r1, r1, #8
 8001402:	430a      	orrs	r2, r1
 8001404:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001406:	6a21      	ldr	r1, [r4, #32]
 8001408:	69e2      	ldr	r2, [r4, #28]
 800140a:	430a      	orrs	r2, r1
 800140c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800140e:	2201      	movs	r2, #1
 8001410:	6819      	ldr	r1, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001416:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001418:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800141a:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 800141c:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800141e:	3442      	adds	r4, #66	; 0x42
 8001420:	7020      	strb	r0, [r4, #0]
}
 8001422:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001424:	2184      	movs	r1, #132	; 0x84
 8001426:	0209      	lsls	r1, r1, #8
 8001428:	4331      	orrs	r1, r6
 800142a:	6099      	str	r1, [r3, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800142c:	2802      	cmp	r0, #2
 800142e:	d1db      	bne.n	80013e8 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	0109      	lsls	r1, r1, #4
 8001434:	6059      	str	r1, [r3, #4]
 8001436:	e7d7      	b.n	80013e8 <HAL_I2C_Init+0x50>
 8001438:	f0ffffff 	.word	0xf0ffffff
 800143c:	ffff7fff 	.word	0xffff7fff
 8001440:	02008000 	.word	0x02008000

08001444 <HAL_I2C_Mem_Write>:
{
 8001444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001446:	b089      	sub	sp, #36	; 0x24
 8001448:	9307      	str	r3, [sp, #28]
 800144a:	ab0e      	add	r3, sp, #56	; 0x38
 800144c:	9206      	str	r2, [sp, #24]
 800144e:	cb04      	ldmia	r3!, {r2}
 8001450:	0004      	movs	r4, r0
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	9203      	str	r2, [sp, #12]
 8001456:	9304      	str	r3, [sp, #16]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001458:	0003      	movs	r3, r0
 800145a:	3341      	adds	r3, #65	; 0x41
 800145c:	9305      	str	r3, [sp, #20]
 800145e:	781b      	ldrb	r3, [r3, #0]
{
 8001460:	000d      	movs	r5, r1
    return HAL_BUSY;
 8001462:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 8001464:	2b20      	cmp	r3, #32
 8001466:	d102      	bne.n	800146e <HAL_I2C_Mem_Write+0x2a>
    if((pData == NULL) || (Size == 0U))
 8001468:	2a00      	cmp	r2, #0
 800146a:	d102      	bne.n	8001472 <HAL_I2C_Mem_Write+0x2e>
        return HAL_ERROR;
 800146c:	2001      	movs	r0, #1
}
 800146e:	b009      	add	sp, #36	; 0x24
 8001470:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL) || (Size == 0U))
 8001472:	9b04      	ldr	r3, [sp, #16]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f9      	beq.n	800146c <HAL_I2C_Mem_Write+0x28>
    __HAL_LOCK(hi2c);
 8001478:	0027      	movs	r7, r4
 800147a:	3740      	adds	r7, #64	; 0x40
 800147c:	783b      	ldrb	r3, [r7, #0]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d0f5      	beq.n	800146e <HAL_I2C_Mem_Write+0x2a>
 8001482:	2301      	movs	r3, #1
 8001484:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8001486:	f7ff fd2b 	bl	8000ee0 <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800148a:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800148c:	9002      	str	r0, [sp, #8]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800148e:	9000      	str	r0, [sp, #0]
 8001490:	2319      	movs	r3, #25
 8001492:	2201      	movs	r2, #1
 8001494:	0209      	lsls	r1, r1, #8
 8001496:	0020      	movs	r0, r4
 8001498:	f7ff fe58 	bl	800114c <I2C_WaitOnFlagUntilTimeout>
 800149c:	1e06      	subs	r6, r0, #0
 800149e:	d11f      	bne.n	80014e0 <HAL_I2C_Mem_Write+0x9c>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014a0:	2321      	movs	r3, #33	; 0x21
 80014a2:	9a05      	ldr	r2, [sp, #20]
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014a4:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80014a6:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80014a8:	0023      	movs	r3, r4
 80014aa:	3342      	adds	r3, #66	; 0x42
 80014ac:	9305      	str	r3, [sp, #20]
 80014ae:	2340      	movs	r3, #64	; 0x40
 80014b0:	9a05      	ldr	r2, [sp, #20]
 80014b2:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 80014b4:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b6:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80014b8:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80014ba:	466b      	mov	r3, sp
 80014bc:	8a1b      	ldrh	r3, [r3, #16]
    hi2c->XferISR   = NULL;
 80014be:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80014c0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80014c2:	9b02      	ldr	r3, [sp, #8]
 80014c4:	9a06      	ldr	r2, [sp, #24]
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80014ca:	0020      	movs	r0, r4
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	9b07      	ldr	r3, [sp, #28]
 80014d0:	f7ff fecf 	bl	8001272 <I2C_RequestMemoryWrite>
 80014d4:	2800      	cmp	r0, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_I2C_Mem_Write+0xa0>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80014da:	703e      	strb	r6, [r7, #0]
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014dc:	2b04      	cmp	r3, #4
 80014de:	d0c5      	beq.n	800146c <HAL_I2C_Mem_Write+0x28>
          return HAL_TIMEOUT;
 80014e0:	2003      	movs	r0, #3
 80014e2:	e7c4      	b.n	800146e <HAL_I2C_Mem_Write+0x2a>
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80014e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80014e6:	2bff      	cmp	r3, #255	; 0xff
 80014e8:	d914      	bls.n	8001514 <HAL_I2C_Mem_Write+0xd0>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ea:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014ec:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014ee:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014f0:	045b      	lsls	r3, r3, #17
 80014f2:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014f4:	0029      	movs	r1, r5
 80014f6:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014f8:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014fa:	f7ff fe15 	bl	8001128 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80014fe:	27ff      	movs	r7, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001500:	04b6      	lsls	r6, r6, #18
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001502:	9a02      	ldr	r2, [sp, #8]
 8001504:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001506:	0020      	movs	r0, r4
 8001508:	f7ff fe86 	bl	8001218 <I2C_WaitOnTXISFlagUntilTimeout>
 800150c:	2800      	cmp	r0, #0
 800150e:	d009      	beq.n	8001524 <HAL_I2C_Mem_Write+0xe0>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001510:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001512:	e7e3      	b.n	80014dc <HAL_I2C_Mem_Write+0x98>
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001514:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 8001516:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001518:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 800151a:	b292      	uxth	r2, r2
 800151c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	9000      	str	r0, [sp, #0]
 8001522:	e7e7      	b.n	80014f4 <HAL_I2C_Mem_Write+0xb0>
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001526:	6822      	ldr	r2, [r4, #0]
 8001528:	1c59      	adds	r1, r3, #1
 800152a:	6261      	str	r1, [r4, #36]	; 0x24
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	6293      	str	r3, [r2, #40]	; 0x28
      hi2c->XferCount--;
 8001530:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001532:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001534:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8001536:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8001538:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 800153a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800153c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800153e:	8522      	strh	r2, [r4, #40]	; 0x28
      if((hi2c->XferSize == 0U) && (hi2c->XferCount!=0U))
 8001540:	2a00      	cmp	r2, #0
 8001542:	d117      	bne.n	8001574 <HAL_I2C_Mem_Write+0x130>
 8001544:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001546:	2b00      	cmp	r3, #0
 8001548:	d014      	beq.n	8001574 <HAL_I2C_Mem_Write+0x130>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800154a:	9b02      	ldr	r3, [sp, #8]
 800154c:	2180      	movs	r1, #128	; 0x80
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	0020      	movs	r0, r4
 8001552:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001554:	f7ff fdfa 	bl	800114c <I2C_WaitOnFlagUntilTimeout>
 8001558:	2800      	cmp	r0, #0
 800155a:	d1c1      	bne.n	80014e0 <HAL_I2C_Mem_Write+0x9c>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800155c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800155e:	2bff      	cmp	r3, #255	; 0xff
 8001560:	d921      	bls.n	80015a6 <HAL_I2C_Mem_Write+0x162>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001562:	2380      	movs	r3, #128	; 0x80
 8001564:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001566:	8527      	strh	r7, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001568:	045b      	lsls	r3, r3, #17
 800156a:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800156c:	0029      	movs	r1, r5
 800156e:	0020      	movs	r0, r4
 8001570:	f7ff fdda 	bl	8001128 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 8001574:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1c3      	bne.n	8001502 <HAL_I2C_Mem_Write+0xbe>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800157a:	9a02      	ldr	r2, [sp, #8]
 800157c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800157e:	0020      	movs	r0, r4
 8001580:	f7ff fede 	bl	8001340 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001584:	2800      	cmp	r0, #0
 8001586:	d1c3      	bne.n	8001510 <HAL_I2C_Mem_Write+0xcc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001588:	2120      	movs	r1, #32
 800158a:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800158c:	4d09      	ldr	r5, [pc, #36]	; (80015b4 <HAL_I2C_Mem_Write+0x170>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800158e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	402a      	ands	r2, r5
 8001594:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001596:	0023      	movs	r3, r4
 8001598:	3341      	adds	r3, #65	; 0x41
 800159a:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800159c:	9b05      	ldr	r3, [sp, #20]
    __HAL_UNLOCK(hi2c);
 800159e:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015a0:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80015a2:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 80015a4:	e763      	b.n	800146e <HAL_I2C_Mem_Write+0x2a>
          hi2c->XferSize = hi2c->XferCount;
 80015a6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015a8:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 80015aa:	b292      	uxth	r2, r2
 80015ac:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	9000      	str	r0, [sp, #0]
 80015b2:	e7db      	b.n	800156c <HAL_I2C_Mem_Write+0x128>
 80015b4:	fe00e800 	.word	0xfe00e800

080015b8 <HAL_I2C_Mem_Read>:
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	9307      	str	r3, [sp, #28]
 80015be:	ab0e      	add	r3, sp, #56	; 0x38
 80015c0:	9206      	str	r2, [sp, #24]
 80015c2:	cb04      	ldmia	r3!, {r2}
 80015c4:	0004      	movs	r4, r0
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	9203      	str	r2, [sp, #12]
 80015ca:	9304      	str	r3, [sp, #16]
  if(hi2c->State == HAL_I2C_STATE_READY)
 80015cc:	0003      	movs	r3, r0
 80015ce:	3341      	adds	r3, #65	; 0x41
 80015d0:	9305      	str	r3, [sp, #20]
 80015d2:	781b      	ldrb	r3, [r3, #0]
{
 80015d4:	000d      	movs	r5, r1
    return HAL_BUSY;
 80015d6:	2002      	movs	r0, #2
  if(hi2c->State == HAL_I2C_STATE_READY)
 80015d8:	2b20      	cmp	r3, #32
 80015da:	d102      	bne.n	80015e2 <HAL_I2C_Mem_Read+0x2a>
    if((pData == NULL) || (Size == 0U))
 80015dc:	2a00      	cmp	r2, #0
 80015de:	d102      	bne.n	80015e6 <HAL_I2C_Mem_Read+0x2e>
        return HAL_ERROR;
 80015e0:	2001      	movs	r0, #1
}
 80015e2:	b009      	add	sp, #36	; 0x24
 80015e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((pData == NULL) || (Size == 0U))
 80015e6:	9b04      	ldr	r3, [sp, #16]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f9      	beq.n	80015e0 <HAL_I2C_Mem_Read+0x28>
    __HAL_LOCK(hi2c);
 80015ec:	0027      	movs	r7, r4
 80015ee:	3740      	adds	r7, #64	; 0x40
 80015f0:	783b      	ldrb	r3, [r7, #0]
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d0f5      	beq.n	80015e2 <HAL_I2C_Mem_Read+0x2a>
 80015f6:	2301      	movs	r3, #1
 80015f8:	703b      	strb	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80015fa:	f7ff fc71 	bl	8000ee0 <HAL_GetTick>
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015fe:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8001600:	9002      	str	r0, [sp, #8]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001602:	9000      	str	r0, [sp, #0]
 8001604:	2319      	movs	r3, #25
 8001606:	2201      	movs	r2, #1
 8001608:	0209      	lsls	r1, r1, #8
 800160a:	0020      	movs	r0, r4
 800160c:	f7ff fd9e 	bl	800114c <I2C_WaitOnFlagUntilTimeout>
 8001610:	1e06      	subs	r6, r0, #0
 8001612:	d11f      	bne.n	8001654 <HAL_I2C_Mem_Read+0x9c>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001614:	2322      	movs	r3, #34	; 0x22
 8001616:	9a05      	ldr	r2, [sp, #20]
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001618:	0029      	movs	r1, r5
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800161a:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800161c:	0023      	movs	r3, r4
 800161e:	3342      	adds	r3, #66	; 0x42
 8001620:	9305      	str	r3, [sp, #20]
 8001622:	2340      	movs	r3, #64	; 0x40
 8001624:	9a05      	ldr	r2, [sp, #20]
 8001626:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 8001628:	9b03      	ldr	r3, [sp, #12]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800162c:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800162e:	466b      	mov	r3, sp
 8001630:	8a1b      	ldrh	r3, [r3, #16]
    hi2c->XferISR   = NULL;
 8001632:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8001634:	8563      	strh	r3, [r4, #42]	; 0x2a
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001636:	9b02      	ldr	r3, [sp, #8]
 8001638:	9a06      	ldr	r2, [sp, #24]
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800163e:	0020      	movs	r0, r4
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	9b07      	ldr	r3, [sp, #28]
 8001644:	f7ff fe49 	bl	80012da <I2C_RequestMemoryRead>
 8001648:	2800      	cmp	r0, #0
 800164a:	d005      	beq.n	8001658 <HAL_I2C_Mem_Read+0xa0>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164c:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800164e:	703e      	strb	r6, [r7, #0]
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001650:	2b04      	cmp	r3, #4
 8001652:	d0c5      	beq.n	80015e0 <HAL_I2C_Mem_Read+0x28>
        return HAL_TIMEOUT;
 8001654:	2003      	movs	r0, #3
 8001656:	e7c4      	b.n	80015e2 <HAL_I2C_Mem_Read+0x2a>
 8001658:	2390      	movs	r3, #144	; 0x90
    if(hi2c->XferCount > MAX_NBYTE_SIZE)
 800165a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800165c:	019b      	lsls	r3, r3, #6
 800165e:	2aff      	cmp	r2, #255	; 0xff
 8001660:	d949      	bls.n	80016f6 <HAL_I2C_Mem_Read+0x13e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001662:	22ff      	movs	r2, #255	; 0xff
 8001664:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001666:	9300      	str	r3, [sp, #0]
 8001668:	2380      	movs	r3, #128	; 0x80
 800166a:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800166c:	0029      	movs	r1, r5
 800166e:	0020      	movs	r0, r4
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001670:	2680      	movs	r6, #128	; 0x80
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001672:	f7ff fd59 	bl	8001128 <I2C_TransferConfig>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001676:	27ff      	movs	r7, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001678:	04b6      	lsls	r6, r6, #18
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800167a:	9b02      	ldr	r3, [sp, #8]
 800167c:	2200      	movs	r2, #0
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2104      	movs	r1, #4
 8001682:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001684:	0020      	movs	r0, r4
 8001686:	f7ff fd61 	bl	800114c <I2C_WaitOnFlagUntilTimeout>
 800168a:	2800      	cmp	r0, #0
 800168c:	d1e2      	bne.n	8001654 <HAL_I2C_Mem_Read+0x9c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 800168e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001690:	1c5a      	adds	r2, r3, #1
 8001692:	6262      	str	r2, [r4, #36]	; 0x24
 8001694:	6822      	ldr	r2, [r4, #0]
 8001696:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001698:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 800169a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800169c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800169e:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80016a0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80016a2:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80016a4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80016a6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80016a8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80016aa:	2a00      	cmp	r2, #0
 80016ac:	d117      	bne.n	80016de <HAL_I2C_Mem_Read+0x126>
 80016ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d014      	beq.n	80016de <HAL_I2C_Mem_Read+0x126>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016b4:	9b02      	ldr	r3, [sp, #8]
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	0020      	movs	r0, r4
 80016bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80016be:	f7ff fd45 	bl	800114c <I2C_WaitOnFlagUntilTimeout>
 80016c2:	2800      	cmp	r0, #0
 80016c4:	d1c6      	bne.n	8001654 <HAL_I2C_Mem_Read+0x9c>
        if(hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016c8:	2bff      	cmp	r3, #255	; 0xff
 80016ca:	d91c      	bls.n	8001706 <HAL_I2C_Mem_Read+0x14e>
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	22ff      	movs	r2, #255	; 0xff
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d0:	8527      	strh	r7, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80016d2:	045b      	lsls	r3, r3, #17
 80016d4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016d6:	0029      	movs	r1, r5
 80016d8:	0020      	movs	r0, r4
 80016da:	f7ff fd25 	bl	8001128 <I2C_TransferConfig>
    }while(hi2c->XferCount > 0U);
 80016de:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1ca      	bne.n	800167a <HAL_I2C_Mem_Read+0xc2>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016e4:	9a02      	ldr	r2, [sp, #8]
 80016e6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80016e8:	0020      	movs	r0, r4
 80016ea:	f7ff fe29 	bl	8001340 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016ee:	2800      	cmp	r0, #0
 80016f0:	d010      	beq.n	8001714 <HAL_I2C_Mem_Read+0x15c>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016f4:	e7ac      	b.n	8001650 <HAL_I2C_Mem_Read+0x98>
      hi2c->XferSize = hi2c->XferCount;
 80016f6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80016f8:	b292      	uxth	r2, r2
 80016fa:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	049b      	lsls	r3, r3, #18
 8001704:	e7b2      	b.n	800166c <HAL_I2C_Mem_Read+0xb4>
          hi2c->XferSize = hi2c->XferCount;
 8001706:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001708:	0033      	movs	r3, r6
          hi2c->XferSize = hi2c->XferCount;
 800170a:	b292      	uxth	r2, r2
 800170c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	9000      	str	r0, [sp, #0]
 8001712:	e7e0      	b.n	80016d6 <HAL_I2C_Mem_Read+0x11e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001714:	2120      	movs	r1, #32
 8001716:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8001718:	4d06      	ldr	r5, [pc, #24]	; (8001734 <HAL_I2C_Mem_Read+0x17c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800171a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	402a      	ands	r2, r5
 8001720:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001722:	0023      	movs	r3, r4
 8001724:	3341      	adds	r3, #65	; 0x41
 8001726:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001728:	9b05      	ldr	r3, [sp, #20]
    __HAL_UNLOCK(hi2c);
 800172a:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800172c:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800172e:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8001730:	e757      	b.n	80015e2 <HAL_I2C_Mem_Read+0x2a>
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	fe00e800 	.word	0xfe00e800

08001738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	6803      	ldr	r3, [r0, #0]
{
 800173c:	b085      	sub	sp, #20
 800173e:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001740:	07db      	lsls	r3, r3, #31
 8001742:	d42f      	bmi.n	80017a4 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001744:	682b      	ldr	r3, [r5, #0]
 8001746:	079b      	lsls	r3, r3, #30
 8001748:	d500      	bpl.n	800174c <HAL_RCC_OscConfig+0x14>
 800174a:	e086      	b.n	800185a <HAL_RCC_OscConfig+0x122>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	071b      	lsls	r3, r3, #28
 8001750:	d500      	bpl.n	8001754 <HAL_RCC_OscConfig+0x1c>
 8001752:	e0c6      	b.n	80018e2 <HAL_RCC_OscConfig+0x1aa>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	075b      	lsls	r3, r3, #29
 8001758:	d500      	bpl.n	800175c <HAL_RCC_OscConfig+0x24>
 800175a:	e0e9      	b.n	8001930 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800175c:	682b      	ldr	r3, [r5, #0]
 800175e:	06db      	lsls	r3, r3, #27
 8001760:	d51a      	bpl.n	8001798 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001762:	696a      	ldr	r2, [r5, #20]
 8001764:	4cba      	ldr	r4, [pc, #744]	; (8001a50 <HAL_RCC_OscConfig+0x318>)
 8001766:	2304      	movs	r3, #4
 8001768:	2a01      	cmp	r2, #1
 800176a:	d000      	beq.n	800176e <HAL_RCC_OscConfig+0x36>
 800176c:	e155      	b.n	8001a1a <HAL_RCC_OscConfig+0x2e2>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800176e:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001770:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001772:	430b      	orrs	r3, r1
 8001774:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001776:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001778:	431a      	orrs	r2, r3
 800177a:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800177c:	f7ff fbb0 	bl	8000ee0 <HAL_GetTick>
 8001780:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001782:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001784:	4233      	tst	r3, r6
 8001786:	d100      	bne.n	800178a <HAL_RCC_OscConfig+0x52>
 8001788:	e140      	b.n	8001a0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800178a:	21f8      	movs	r1, #248	; 0xf8
 800178c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800178e:	69ab      	ldr	r3, [r5, #24]
 8001790:	438a      	bics	r2, r1
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4313      	orrs	r3, r2
 8001796:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001798:	6a29      	ldr	r1, [r5, #32]
 800179a:	2900      	cmp	r1, #0
 800179c:	d000      	beq.n	80017a0 <HAL_RCC_OscConfig+0x68>
 800179e:	e163      	b.n	8001a68 <HAL_RCC_OscConfig+0x330>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80017a0:	2000      	movs	r0, #0
 80017a2:	e018      	b.n	80017d6 <HAL_RCC_OscConfig+0x9e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80017a4:	210c      	movs	r1, #12
 80017a6:	4caa      	ldr	r4, [pc, #680]	; (8001a50 <HAL_RCC_OscConfig+0x318>)
 80017a8:	6862      	ldr	r2, [r4, #4]
 80017aa:	400a      	ands	r2, r1
 80017ac:	2a04      	cmp	r2, #4
 80017ae:	d00b      	beq.n	80017c8 <HAL_RCC_OscConfig+0x90>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017b0:	6863      	ldr	r3, [r4, #4]
 80017b2:	400b      	ands	r3, r1
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d110      	bne.n	80017da <HAL_RCC_OscConfig+0xa2>
 80017b8:	22c0      	movs	r2, #192	; 0xc0
 80017ba:	6863      	ldr	r3, [r4, #4]
 80017bc:	0252      	lsls	r2, r2, #9
 80017be:	4013      	ands	r3, r2
 80017c0:	2280      	movs	r2, #128	; 0x80
 80017c2:	0252      	lsls	r2, r2, #9
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d108      	bne.n	80017da <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	6823      	ldr	r3, [r4, #0]
 80017ca:	039b      	lsls	r3, r3, #14
 80017cc:	d5ba      	bpl.n	8001744 <HAL_RCC_OscConfig+0xc>
 80017ce:	686b      	ldr	r3, [r5, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1b7      	bne.n	8001744 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80017d4:	2001      	movs	r0, #1
}
 80017d6:	b005      	add	sp, #20
 80017d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017da:	686b      	ldr	r3, [r5, #4]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d113      	bne.n	8001808 <HAL_RCC_OscConfig+0xd0>
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	6822      	ldr	r2, [r4, #0]
 80017e4:	025b      	lsls	r3, r3, #9
 80017e6:	4313      	orrs	r3, r2
 80017e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017ea:	f7ff fb79 	bl	8000ee0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80017f0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	02b6      	lsls	r6, r6, #10
 80017f4:	6823      	ldr	r3, [r4, #0]
 80017f6:	4233      	tst	r3, r6
 80017f8:	d1a4      	bne.n	8001744 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fa:	f7ff fb71 	bl	8000ee0 <HAL_GetTick>
 80017fe:	1bc0      	subs	r0, r0, r7
 8001800:	2864      	cmp	r0, #100	; 0x64
 8001802:	d9f7      	bls.n	80017f4 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8001804:	2003      	movs	r0, #3
 8001806:	e7e6      	b.n	80017d6 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001808:	2b00      	cmp	r3, #0
 800180a:	d116      	bne.n	800183a <HAL_RCC_OscConfig+0x102>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	4a91      	ldr	r2, [pc, #580]	; (8001a54 <HAL_RCC_OscConfig+0x31c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001810:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001812:	4013      	ands	r3, r2
 8001814:	6023      	str	r3, [r4, #0]
 8001816:	6823      	ldr	r3, [r4, #0]
 8001818:	4a8f      	ldr	r2, [pc, #572]	; (8001a58 <HAL_RCC_OscConfig+0x320>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	4013      	ands	r3, r2
 800181e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001820:	f7ff fb5e 	bl	8000ee0 <HAL_GetTick>
 8001824:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	4233      	tst	r3, r6
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0xf6>
 800182c:	e78a      	b.n	8001744 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182e:	f7ff fb57 	bl	8000ee0 <HAL_GetTick>
 8001832:	1bc0      	subs	r0, r0, r7
 8001834:	2864      	cmp	r0, #100	; 0x64
 8001836:	d9f6      	bls.n	8001826 <HAL_RCC_OscConfig+0xee>
 8001838:	e7e4      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	2b05      	cmp	r3, #5
 800183c:	d105      	bne.n	800184a <HAL_RCC_OscConfig+0x112>
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	02db      	lsls	r3, r3, #11
 8001844:	4313      	orrs	r3, r2
 8001846:	6023      	str	r3, [r4, #0]
 8001848:	e7ca      	b.n	80017e0 <HAL_RCC_OscConfig+0xa8>
 800184a:	6823      	ldr	r3, [r4, #0]
 800184c:	4a81      	ldr	r2, [pc, #516]	; (8001a54 <HAL_RCC_OscConfig+0x31c>)
 800184e:	4013      	ands	r3, r2
 8001850:	6023      	str	r3, [r4, #0]
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	4a80      	ldr	r2, [pc, #512]	; (8001a58 <HAL_RCC_OscConfig+0x320>)
 8001856:	4013      	ands	r3, r2
 8001858:	e7c6      	b.n	80017e8 <HAL_RCC_OscConfig+0xb0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800185a:	220c      	movs	r2, #12
 800185c:	4c7c      	ldr	r4, [pc, #496]	; (8001a50 <HAL_RCC_OscConfig+0x318>)
 800185e:	6863      	ldr	r3, [r4, #4]
 8001860:	4213      	tst	r3, r2
 8001862:	d00b      	beq.n	800187c <HAL_RCC_OscConfig+0x144>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001864:	6863      	ldr	r3, [r4, #4]
 8001866:	4013      	ands	r3, r2
 8001868:	2b08      	cmp	r3, #8
 800186a:	d115      	bne.n	8001898 <HAL_RCC_OscConfig+0x160>
 800186c:	22c0      	movs	r2, #192	; 0xc0
 800186e:	6863      	ldr	r3, [r4, #4]
 8001870:	0252      	lsls	r2, r2, #9
 8001872:	4013      	ands	r3, r2
 8001874:	2280      	movs	r2, #128	; 0x80
 8001876:	0212      	lsls	r2, r2, #8
 8001878:	4293      	cmp	r3, r2
 800187a:	d10d      	bne.n	8001898 <HAL_RCC_OscConfig+0x160>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187c:	6823      	ldr	r3, [r4, #0]
 800187e:	079b      	lsls	r3, r3, #30
 8001880:	d502      	bpl.n	8001888 <HAL_RCC_OscConfig+0x150>
 8001882:	68eb      	ldr	r3, [r5, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d1a5      	bne.n	80017d4 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	21f8      	movs	r1, #248	; 0xf8
 800188a:	6822      	ldr	r2, [r4, #0]
 800188c:	692b      	ldr	r3, [r5, #16]
 800188e:	438a      	bics	r2, r1
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4313      	orrs	r3, r2
 8001894:	6023      	str	r3, [r4, #0]
 8001896:	e759      	b.n	800174c <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001898:	68ea      	ldr	r2, [r5, #12]
 800189a:	2301      	movs	r3, #1
 800189c:	2a00      	cmp	r2, #0
 800189e:	d00f      	beq.n	80018c0 <HAL_RCC_OscConfig+0x188>
        __HAL_RCC_HSI_ENABLE();
 80018a0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80018a4:	4313      	orrs	r3, r2
 80018a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80018a8:	f7ff fb1a 	bl	8000ee0 <HAL_GetTick>
 80018ac:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	4233      	tst	r3, r6
 80018b2:	d1e9      	bne.n	8001888 <HAL_RCC_OscConfig+0x150>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b4:	f7ff fb14 	bl	8000ee0 <HAL_GetTick>
 80018b8:	1bc0      	subs	r0, r0, r7
 80018ba:	2802      	cmp	r0, #2
 80018bc:	d9f7      	bls.n	80018ae <HAL_RCC_OscConfig+0x176>
 80018be:	e7a1      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_DISABLE();
 80018c0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 80018c4:	439a      	bics	r2, r3
 80018c6:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 80018c8:	f7ff fb0a 	bl	8000ee0 <HAL_GetTick>
 80018cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	4233      	tst	r3, r6
 80018d2:	d100      	bne.n	80018d6 <HAL_RCC_OscConfig+0x19e>
 80018d4:	e73a      	b.n	800174c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d6:	f7ff fb03 	bl	8000ee0 <HAL_GetTick>
 80018da:	1bc0      	subs	r0, r0, r7
 80018dc:	2802      	cmp	r0, #2
 80018de:	d9f6      	bls.n	80018ce <HAL_RCC_OscConfig+0x196>
 80018e0:	e790      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e2:	69ea      	ldr	r2, [r5, #28]
 80018e4:	2301      	movs	r3, #1
 80018e6:	4c5a      	ldr	r4, [pc, #360]	; (8001a50 <HAL_RCC_OscConfig+0x318>)
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	d010      	beq.n	800190e <HAL_RCC_OscConfig+0x1d6>
      __HAL_RCC_LSI_ENABLE();
 80018ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 80018f0:	4313      	orrs	r3, r2
 80018f2:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 80018f4:	f7ff faf4 	bl	8000ee0 <HAL_GetTick>
 80018f8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018fc:	4233      	tst	r3, r6
 80018fe:	d000      	beq.n	8001902 <HAL_RCC_OscConfig+0x1ca>
 8001900:	e728      	b.n	8001754 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001902:	f7ff faed 	bl	8000ee0 <HAL_GetTick>
 8001906:	1bc0      	subs	r0, r0, r7
 8001908:	2802      	cmp	r0, #2
 800190a:	d9f6      	bls.n	80018fa <HAL_RCC_OscConfig+0x1c2>
 800190c:	e77a      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
      __HAL_RCC_LSI_DISABLE();
 800190e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8001912:	439a      	bics	r2, r3
 8001914:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001916:	f7ff fae3 	bl	8000ee0 <HAL_GetTick>
 800191a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800191e:	4233      	tst	r3, r6
 8001920:	d100      	bne.n	8001924 <HAL_RCC_OscConfig+0x1ec>
 8001922:	e717      	b.n	8001754 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fadc 	bl	8000ee0 <HAL_GetTick>
 8001928:	1bc0      	subs	r0, r0, r7
 800192a:	2802      	cmp	r0, #2
 800192c:	d9f6      	bls.n	800191c <HAL_RCC_OscConfig+0x1e4>
 800192e:	e769      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001930:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8001932:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001934:	4c46      	ldr	r4, [pc, #280]	; (8001a50 <HAL_RCC_OscConfig+0x318>)
 8001936:	0552      	lsls	r2, r2, #21
 8001938:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 800193a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800193c:	4213      	tst	r3, r2
 800193e:	d108      	bne.n	8001952 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001940:	69e3      	ldr	r3, [r4, #28]
 8001942:	4313      	orrs	r3, r2
 8001944:	61e3      	str	r3, [r4, #28]
 8001946:	69e3      	ldr	r3, [r4, #28]
 8001948:	4013      	ands	r3, r2
 800194a:	9303      	str	r3, [sp, #12]
 800194c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 800194e:	2301      	movs	r3, #1
 8001950:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001952:	2780      	movs	r7, #128	; 0x80
 8001954:	4e41      	ldr	r6, [pc, #260]	; (8001a5c <HAL_RCC_OscConfig+0x324>)
 8001956:	007f      	lsls	r7, r7, #1
 8001958:	6833      	ldr	r3, [r6, #0]
 800195a:	423b      	tst	r3, r7
 800195c:	d006      	beq.n	800196c <HAL_RCC_OscConfig+0x234>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800195e:	68ab      	ldr	r3, [r5, #8]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d113      	bne.n	800198c <HAL_RCC_OscConfig+0x254>
 8001964:	6a22      	ldr	r2, [r4, #32]
 8001966:	4313      	orrs	r3, r2
 8001968:	6223      	str	r3, [r4, #32]
 800196a:	e030      	b.n	80019ce <HAL_RCC_OscConfig+0x296>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800196c:	6833      	ldr	r3, [r6, #0]
 800196e:	433b      	orrs	r3, r7
 8001970:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001972:	f7ff fab5 	bl	8000ee0 <HAL_GetTick>
 8001976:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001978:	6833      	ldr	r3, [r6, #0]
 800197a:	423b      	tst	r3, r7
 800197c:	d1ef      	bne.n	800195e <HAL_RCC_OscConfig+0x226>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800197e:	f7ff faaf 	bl	8000ee0 <HAL_GetTick>
 8001982:	9b01      	ldr	r3, [sp, #4]
 8001984:	1ac0      	subs	r0, r0, r3
 8001986:	2864      	cmp	r0, #100	; 0x64
 8001988:	d9f6      	bls.n	8001978 <HAL_RCC_OscConfig+0x240>
 800198a:	e73b      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
 800198c:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198e:	2b00      	cmp	r3, #0
 8001990:	d114      	bne.n	80019bc <HAL_RCC_OscConfig+0x284>
 8001992:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001994:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001996:	4393      	bics	r3, r2
 8001998:	6223      	str	r3, [r4, #32]
 800199a:	6a23      	ldr	r3, [r4, #32]
 800199c:	3203      	adds	r2, #3
 800199e:	4393      	bics	r3, r2
 80019a0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80019a2:	f7ff fa9d 	bl	8000ee0 <HAL_GetTick>
 80019a6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a8:	6a23      	ldr	r3, [r4, #32]
 80019aa:	423b      	tst	r3, r7
 80019ac:	d025      	beq.n	80019fa <HAL_RCC_OscConfig+0x2c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ae:	f7ff fa97 	bl	8000ee0 <HAL_GetTick>
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_RCC_OscConfig+0x328>)
 80019b4:	1b80      	subs	r0, r0, r6
 80019b6:	4298      	cmp	r0, r3
 80019b8:	d9f6      	bls.n	80019a8 <HAL_RCC_OscConfig+0x270>
 80019ba:	e723      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d10b      	bne.n	80019d8 <HAL_RCC_OscConfig+0x2a0>
 80019c0:	6a21      	ldr	r1, [r4, #32]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	430b      	orrs	r3, r1
 80019c6:	6223      	str	r3, [r4, #32]
 80019c8:	6a23      	ldr	r3, [r4, #32]
 80019ca:	431a      	orrs	r2, r3
 80019cc:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 80019ce:	f7ff fa87 	bl	8000ee0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d2:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80019d4:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d6:	e00d      	b.n	80019f4 <HAL_RCC_OscConfig+0x2bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d8:	6a23      	ldr	r3, [r4, #32]
 80019da:	4393      	bics	r3, r2
 80019dc:	2204      	movs	r2, #4
 80019de:	6223      	str	r3, [r4, #32]
 80019e0:	6a23      	ldr	r3, [r4, #32]
 80019e2:	4393      	bics	r3, r2
 80019e4:	e7c0      	b.n	8001968 <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7ff fa7b 	bl	8000ee0 <HAL_GetTick>
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_RCC_OscConfig+0x328>)
 80019ec:	1b80      	subs	r0, r0, r6
 80019ee:	4298      	cmp	r0, r3
 80019f0:	d900      	bls.n	80019f4 <HAL_RCC_OscConfig+0x2bc>
 80019f2:	e707      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f4:	6a23      	ldr	r3, [r4, #32]
 80019f6:	423b      	tst	r3, r7
 80019f8:	d0f5      	beq.n	80019e6 <HAL_RCC_OscConfig+0x2ae>
    if(pwrclkchanged == SET)
 80019fa:	9b00      	ldr	r3, [sp, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d000      	beq.n	8001a02 <HAL_RCC_OscConfig+0x2ca>
 8001a00:	e6ac      	b.n	800175c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a02:	69e3      	ldr	r3, [r4, #28]
 8001a04:	4a17      	ldr	r2, [pc, #92]	; (8001a64 <HAL_RCC_OscConfig+0x32c>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	61e3      	str	r3, [r4, #28]
 8001a0a:	e6a7      	b.n	800175c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a0c:	f7ff fa68 	bl	8000ee0 <HAL_GetTick>
 8001a10:	1bc0      	subs	r0, r0, r7
 8001a12:	2802      	cmp	r0, #2
 8001a14:	d800      	bhi.n	8001a18 <HAL_RCC_OscConfig+0x2e0>
 8001a16:	e6b4      	b.n	8001782 <HAL_RCC_OscConfig+0x4a>
 8001a18:	e6f4      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001a1a:	3205      	adds	r2, #5
 8001a1c:	d103      	bne.n	8001a26 <HAL_RCC_OscConfig+0x2ee>
      __HAL_RCC_HSI14ADC_ENABLE();
 8001a1e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001a20:	439a      	bics	r2, r3
 8001a22:	6362      	str	r2, [r4, #52]	; 0x34
 8001a24:	e6b1      	b.n	800178a <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a26:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a28:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a2a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8001a2c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a2e:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8001a30:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a32:	4393      	bics	r3, r2
 8001a34:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8001a36:	f7ff fa53 	bl	8000ee0 <HAL_GetTick>
 8001a3a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a3e:	4233      	tst	r3, r6
 8001a40:	d100      	bne.n	8001a44 <HAL_RCC_OscConfig+0x30c>
 8001a42:	e6a9      	b.n	8001798 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a44:	f7ff fa4c 	bl	8000ee0 <HAL_GetTick>
 8001a48:	1bc0      	subs	r0, r0, r7
 8001a4a:	2802      	cmp	r0, #2
 8001a4c:	d9f6      	bls.n	8001a3c <HAL_RCC_OscConfig+0x304>
 8001a4e:	e6d9      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
 8001a50:	40021000 	.word	0x40021000
 8001a54:	fffeffff 	.word	0xfffeffff
 8001a58:	fffbffff 	.word	0xfffbffff
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	00001388 	.word	0x00001388
 8001a64:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a68:	220c      	movs	r2, #12
 8001a6a:	4c26      	ldr	r4, [pc, #152]	; (8001b04 <HAL_RCC_OscConfig+0x3cc>)
      return HAL_ERROR;
 8001a6c:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6e:	6863      	ldr	r3, [r4, #4]
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d100      	bne.n	8001a78 <HAL_RCC_OscConfig+0x340>
 8001a76:	e6ae      	b.n	80017d6 <HAL_RCC_OscConfig+0x9e>
        __HAL_RCC_PLL_DISABLE();
 8001a78:	6823      	ldr	r3, [r4, #0]
 8001a7a:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_RCC_OscConfig+0x3d0>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a80:	2902      	cmp	r1, #2
 8001a82:	d12f      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3ac>
        tickstart = HAL_GetTick();
 8001a84:	f7ff fa2c 	bl	8000ee0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a88:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8001a8a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	04b6      	lsls	r6, r6, #18
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	4233      	tst	r3, r6
 8001a92:	d121      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x3a0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a94:	220f      	movs	r2, #15
 8001a96:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a98:	4393      	bics	r3, r2
 8001a9a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001aa0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001aa2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001aa4:	6862      	ldr	r2, [r4, #4]
 8001aa6:	430b      	orrs	r3, r1
 8001aa8:	4918      	ldr	r1, [pc, #96]	; (8001b0c <HAL_RCC_OscConfig+0x3d4>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aaa:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aac:	400a      	ands	r2, r1
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ab2:	2380      	movs	r3, #128	; 0x80
 8001ab4:	6822      	ldr	r2, [r4, #0]
 8001ab6:	045b      	lsls	r3, r3, #17
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001abc:	f7ff fa10 	bl	8000ee0 <HAL_GetTick>
 8001ac0:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac2:	04ad      	lsls	r5, r5, #18
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	422b      	tst	r3, r5
 8001ac8:	d000      	beq.n	8001acc <HAL_RCC_OscConfig+0x394>
 8001aca:	e669      	b.n	80017a0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001acc:	f7ff fa08 	bl	8000ee0 <HAL_GetTick>
 8001ad0:	1b80      	subs	r0, r0, r6
 8001ad2:	2802      	cmp	r0, #2
 8001ad4:	d9f6      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x38c>
 8001ad6:	e695      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad8:	f7ff fa02 	bl	8000ee0 <HAL_GetTick>
 8001adc:	1bc0      	subs	r0, r0, r7
 8001ade:	2802      	cmp	r0, #2
 8001ae0:	d9d5      	bls.n	8001a8e <HAL_RCC_OscConfig+0x356>
 8001ae2:	e68f      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 8001ae4:	f7ff f9fc 	bl	8000ee0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae8:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001aea:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aec:	04ad      	lsls	r5, r5, #18
 8001aee:	6823      	ldr	r3, [r4, #0]
 8001af0:	422b      	tst	r3, r5
 8001af2:	d100      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3be>
 8001af4:	e654      	b.n	80017a0 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff f9f3 	bl	8000ee0 <HAL_GetTick>
 8001afa:	1b80      	subs	r0, r0, r6
 8001afc:	2802      	cmp	r0, #2
 8001afe:	d9f6      	bls.n	8001aee <HAL_RCC_OscConfig+0x3b6>
 8001b00:	e680      	b.n	8001804 <HAL_RCC_OscConfig+0xcc>
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40021000 	.word	0x40021000
 8001b08:	feffffff 	.word	0xfeffffff
 8001b0c:	ffc27fff 	.word	0xffc27fff

08001b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b12:	4d12      	ldr	r5, [pc, #72]	; (8001b5c <HAL_RCC_GetSysClockFreq+0x4c>)
{
 8001b14:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b16:	2210      	movs	r2, #16
 8001b18:	0029      	movs	r1, r5
 8001b1a:	4668      	mov	r0, sp
 8001b1c:	f000 fa62 	bl	8001fe4 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b20:	0029      	movs	r1, r5
 8001b22:	ac04      	add	r4, sp, #16
 8001b24:	3110      	adds	r1, #16
 8001b26:	2210      	movs	r2, #16
 8001b28:	0020      	movs	r0, r4
 8001b2a:	f000 fa5b 	bl	8001fe4 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b2e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8001b30:	490b      	ldr	r1, [pc, #44]	; (8001b60 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b32:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001b34:	401a      	ands	r2, r3
 8001b36:	2a08      	cmp	r2, #8
 8001b38:	d10d      	bne.n	8001b56 <HAL_RCC_GetSysClockFreq+0x46>
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b3a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b3c:	210f      	movs	r1, #15
 8001b3e:	4668      	mov	r0, sp
 8001b40:	0c9b      	lsrs	r3, r3, #18
 8001b42:	400b      	ands	r3, r1
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b44:	400a      	ands	r2, r1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b46:	5cc5      	ldrb	r5, [r0, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b48:	5ca1      	ldrb	r1, [r4, r2]
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x54>)
 8001b4c:	f7fe fae6 	bl	800011c <__udivsi3>
 8001b50:	4368      	muls	r0, r5
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b52:	b009      	add	sp, #36	; 0x24
 8001b54:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 8001b56:	4803      	ldr	r0, [pc, #12]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x54>)
  return sysclockfreq;
 8001b58:	e7fb      	b.n	8001b52 <HAL_RCC_GetSysClockFreq+0x42>
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	08002840 	.word	0x08002840
 8001b60:	40021000 	.word	0x40021000
 8001b64:	007a1200 	.word	0x007a1200

08001b68 <HAL_RCC_ClockConfig>:
{
 8001b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	4c43      	ldr	r4, [pc, #268]	; (8001c7c <HAL_RCC_ClockConfig+0x114>)
{
 8001b6e:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b70:	6823      	ldr	r3, [r4, #0]
{
 8001b72:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b74:	4013      	ands	r3, r2
 8001b76:	428b      	cmp	r3, r1
 8001b78:	d31c      	bcc.n	8001bb4 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b7a:	6832      	ldr	r2, [r6, #0]
 8001b7c:	0793      	lsls	r3, r2, #30
 8001b7e:	d423      	bmi.n	8001bc8 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b80:	07d3      	lsls	r3, r2, #31
 8001b82:	d429      	bmi.n	8001bd8 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b84:	2301      	movs	r3, #1
 8001b86:	6822      	ldr	r2, [r4, #0]
 8001b88:	401a      	ands	r2, r3
 8001b8a:	4297      	cmp	r7, r2
 8001b8c:	d367      	bcc.n	8001c5e <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b8e:	6833      	ldr	r3, [r6, #0]
 8001b90:	4c3b      	ldr	r4, [pc, #236]	; (8001c80 <HAL_RCC_ClockConfig+0x118>)
 8001b92:	075b      	lsls	r3, r3, #29
 8001b94:	d46a      	bmi.n	8001c6c <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b96:	f7ff ffbb 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001b9a:	6863      	ldr	r3, [r4, #4]
 8001b9c:	4a39      	ldr	r2, [pc, #228]	; (8001c84 <HAL_RCC_ClockConfig+0x11c>)
 8001b9e:	061b      	lsls	r3, r3, #24
 8001ba0:	0f1b      	lsrs	r3, r3, #28
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	40d8      	lsrs	r0, r3
 8001ba6:	4b38      	ldr	r3, [pc, #224]	; (8001c88 <HAL_RCC_ClockConfig+0x120>)
 8001ba8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001baa:	2003      	movs	r0, #3
 8001bac:	f7ff f96e 	bl	8000e8c <HAL_InitTick>
  return HAL_OK;
 8001bb0:	2000      	movs	r0, #0
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	4393      	bics	r3, r2
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	4299      	cmp	r1, r3
 8001bc2:	d0da      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8001bc4:	2001      	movs	r0, #1
}
 8001bc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	20f0      	movs	r0, #240	; 0xf0
 8001bca:	492d      	ldr	r1, [pc, #180]	; (8001c80 <HAL_RCC_ClockConfig+0x118>)
 8001bcc:	684b      	ldr	r3, [r1, #4]
 8001bce:	4383      	bics	r3, r0
 8001bd0:	68b0      	ldr	r0, [r6, #8]
 8001bd2:	4303      	orrs	r3, r0
 8001bd4:	604b      	str	r3, [r1, #4]
 8001bd6:	e7d3      	b.n	8001b80 <HAL_RCC_ClockConfig+0x18>
 8001bd8:	4d29      	ldr	r5, [pc, #164]	; (8001c80 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bda:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bdc:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bde:	2a01      	cmp	r2, #1
 8001be0:	d11a      	bne.n	8001c18 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	039b      	lsls	r3, r3, #14
 8001be4:	d5ee      	bpl.n	8001bc4 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be6:	2103      	movs	r1, #3
 8001be8:	686b      	ldr	r3, [r5, #4]
 8001bea:	438b      	bics	r3, r1
 8001bec:	4313      	orrs	r3, r2
 8001bee:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001bf0:	f7ff f976 	bl	8000ee0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf4:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001bf6:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d115      	bne.n	8001c28 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	686b      	ldr	r3, [r5, #4]
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d0be      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c06:	f7ff f96b 	bl	8000ee0 <HAL_GetTick>
 8001c0a:	9b01      	ldr	r3, [sp, #4]
 8001c0c:	1ac0      	subs	r0, r0, r3
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <HAL_RCC_ClockConfig+0x124>)
 8001c10:	4298      	cmp	r0, r3
 8001c12:	d9f3      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8001c14:	2003      	movs	r0, #3
 8001c16:	e7d6      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c18:	2a02      	cmp	r2, #2
 8001c1a:	d102      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1c:	019b      	lsls	r3, r3, #6
 8001c1e:	d4e2      	bmi.n	8001be6 <HAL_RCC_ClockConfig+0x7e>
 8001c20:	e7d0      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	079b      	lsls	r3, r3, #30
 8001c24:	d4df      	bmi.n	8001be6 <HAL_RCC_ClockConfig+0x7e>
 8001c26:	e7cd      	b.n	8001bc4 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d012      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	686b      	ldr	r3, [r5, #4]
 8001c30:	4213      	tst	r3, r2
 8001c32:	d0a7      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c34:	f7ff f954 	bl	8000ee0 <HAL_GetTick>
 8001c38:	9b01      	ldr	r3, [sp, #4]
 8001c3a:	1ac0      	subs	r0, r0, r3
 8001c3c:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <HAL_RCC_ClockConfig+0x124>)
 8001c3e:	4298      	cmp	r0, r3
 8001c40:	d9f4      	bls.n	8001c2c <HAL_RCC_ClockConfig+0xc4>
 8001c42:	e7e7      	b.n	8001c14 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c44:	f7ff f94c 	bl	8000ee0 <HAL_GetTick>
 8001c48:	9b01      	ldr	r3, [sp, #4]
 8001c4a:	1ac0      	subs	r0, r0, r3
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <HAL_RCC_ClockConfig+0x124>)
 8001c4e:	4298      	cmp	r0, r3
 8001c50:	d8e0      	bhi.n	8001c14 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c52:	220c      	movs	r2, #12
 8001c54:	686b      	ldr	r3, [r5, #4]
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d1f3      	bne.n	8001c44 <HAL_RCC_ClockConfig+0xdc>
 8001c5c:	e792      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	6822      	ldr	r2, [r4, #0]
 8001c60:	439a      	bics	r2, r3
 8001c62:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c64:	6822      	ldr	r2, [r4, #0]
 8001c66:	421a      	tst	r2, r3
 8001c68:	d1ac      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x5c>
 8001c6a:	e790      	b.n	8001b8e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c6c:	6863      	ldr	r3, [r4, #4]
 8001c6e:	4a08      	ldr	r2, [pc, #32]	; (8001c90 <HAL_RCC_ClockConfig+0x128>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	68f2      	ldr	r2, [r6, #12]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	6063      	str	r3, [r4, #4]
 8001c78:	e78d      	b.n	8001b96 <HAL_RCC_ClockConfig+0x2e>
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	080028aa 	.word	0x080028aa
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	00001388 	.word	0x00001388
 8001c90:	fffff8ff 	.word	0xfffff8ff

08001c94 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001c94:	4b01      	ldr	r3, [pc, #4]	; (8001c9c <HAL_RCC_GetHCLKFreq+0x8>)
 8001c96:	6818      	ldr	r0, [r3, #0]
}
 8001c98:	4770      	bx	lr
 8001c9a:	46c0      	nop			; (mov r8, r8)
 8001c9c:	20000000 	.word	0x20000000

08001ca0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ca0:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001ca2:	4a05      	ldr	r2, [pc, #20]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	055b      	lsls	r3, r3, #21
 8001ca8:	0f5b      	lsrs	r3, r3, #29
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	4a03      	ldr	r2, [pc, #12]	; (8001cbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001cae:	6810      	ldr	r0, [r2, #0]
 8001cb0:	40d8      	lsrs	r0, r3
}    
 8001cb2:	4770      	bx	lr
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	080028ba 	.word	0x080028ba
 8001cbc:	20000000 	.word	0x20000000

08001cc0 <HAL_UART_MspInit>:
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_UART_MspDeInit>:
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001cc4:	b570      	push	{r4, r5, r6, lr}
 8001cc6:	0005      	movs	r5, r0
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001cc8:	2001      	movs	r0, #1
  if(huart == NULL)
 8001cca:	2d00      	cmp	r5, #0
 8001ccc:	d016      	beq.n	8001cfc <HAL_UART_DeInit+0x38>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8001cce:	002e      	movs	r6, r5
 8001cd0:	2324      	movs	r3, #36	; 0x24

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);

  huart->Instance->CR1 = 0x0U;
 8001cd2:	2400      	movs	r4, #0
  huart->gState = HAL_UART_STATE_BUSY;
 8001cd4:	3669      	adds	r6, #105	; 0x69
 8001cd6:	7033      	strb	r3, [r6, #0]
  __HAL_UART_DISABLE(huart);
 8001cd8:	682b      	ldr	r3, [r5, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4382      	bics	r2, r0
 8001cde:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
  huart->Instance->CR3 = 0x0U;

  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8001ce0:	0028      	movs	r0, r5
  huart->Instance->CR1 = 0x0U;
 8001ce2:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8001ce4:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8001ce6:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 8001ce8:	f7ff ffeb 	bl	8001cc2 <HAL_UART_MspDeInit>

  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState    = HAL_UART_STATE_RESET;
  huart->RxState   = HAL_UART_STATE_RESET;
 8001cec:	002b      	movs	r3, r5

  /* Process Unlock */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8001cee:	0020      	movs	r0, r4
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cf0:	66ec      	str	r4, [r5, #108]	; 0x6c
  huart->RxState   = HAL_UART_STATE_RESET;
 8001cf2:	336a      	adds	r3, #106	; 0x6a
  __HAL_UNLOCK(huart);
 8001cf4:	3568      	adds	r5, #104	; 0x68
  huart->gState    = HAL_UART_STATE_RESET;
 8001cf6:	7034      	strb	r4, [r6, #0]
  huart->RxState   = HAL_UART_STATE_RESET;
 8001cf8:	701c      	strb	r4, [r3, #0]
  __HAL_UNLOCK(huart);
 8001cfa:	702c      	strb	r4, [r5, #0]
}
 8001cfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d00:	b570      	push	{r4, r5, r6, lr}
 8001d02:	0004      	movs	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d04:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d06:	69c2      	ldr	r2, [r0, #28]
 8001d08:	6883      	ldr	r3, [r0, #8]
 8001d0a:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d0c:	6829      	ldr	r1, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d0e:	4303      	orrs	r3, r0
 8001d10:	6960      	ldr	r0, [r4, #20]
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d12:	4e42      	ldr	r6, [pc, #264]	; (8001e1c <UART_SetConfig+0x11c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d14:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d16:	4842      	ldr	r0, [pc, #264]	; (8001e20 <UART_SetConfig+0x120>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d18:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001d1a:	4001      	ands	r1, r0
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d20:	686b      	ldr	r3, [r5, #4]
 8001d22:	4940      	ldr	r1, [pc, #256]	; (8001e24 <UART_SetConfig+0x124>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001d24:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d26:	400b      	ands	r3, r1
 8001d28:	68e1      	ldr	r1, [r4, #12]
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	606b      	str	r3, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001d2e:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001d30:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001d32:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001d34:	483c      	ldr	r0, [pc, #240]	; (8001e28 <UART_SetConfig+0x128>)
 8001d36:	4001      	ands	r1, r0
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	60ab      	str	r3, [r5, #8]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	021b      	lsls	r3, r3, #8
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d40:	42b5      	cmp	r5, r6
 8001d42:	d110      	bne.n	8001d66 <UART_SetConfig+0x66>
 8001d44:	2003      	movs	r0, #3
 8001d46:	4939      	ldr	r1, [pc, #228]	; (8001e2c <UART_SetConfig+0x12c>)
 8001d48:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001d4a:	4001      	ands	r1, r0
 8001d4c:	4838      	ldr	r0, [pc, #224]	; (8001e30 <UART_SetConfig+0x130>)
 8001d4e:	5c40      	ldrb	r0, [r0, r1]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d137      	bne.n	8001dc4 <UART_SetConfig+0xc4>
  {
    switch (clocksource)
 8001d54:	2808      	cmp	r0, #8
 8001d56:	d832      	bhi.n	8001dbe <UART_SetConfig+0xbe>
 8001d58:	f7fe f9d6 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001d5c:	31163110 	.word	0x31163110
 8001d60:	31313129 	.word	0x31313129
 8001d64:	2c          	.byte	0x2c
 8001d65:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d66:	4933      	ldr	r1, [pc, #204]	; (8001e34 <UART_SetConfig+0x134>)
 8001d68:	428d      	cmp	r5, r1
 8001d6a:	d005      	beq.n	8001d78 <UART_SetConfig+0x78>
 8001d6c:	4932      	ldr	r1, [pc, #200]	; (8001e38 <UART_SetConfig+0x138>)
 8001d6e:	428d      	cmp	r5, r1
 8001d70:	d002      	beq.n	8001d78 <UART_SetConfig+0x78>
 8001d72:	4932      	ldr	r1, [pc, #200]	; (8001e3c <UART_SetConfig+0x13c>)
 8001d74:	428d      	cmp	r5, r1
 8001d76:	d14c      	bne.n	8001e12 <UART_SetConfig+0x112>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d12c      	bne.n	8001dd6 <UART_SetConfig+0xd6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d7c:	f7ff ff90 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d80:	6863      	ldr	r3, [r4, #4]
 8001d82:	0040      	lsls	r0, r0, #1
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	e002      	b.n	8001d8e <UART_SetConfig+0x8e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	0858      	lsrs	r0, r3, #1
 8001d8c:	4b2c      	ldr	r3, [pc, #176]	; (8001e40 <UART_SetConfig+0x140>)
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d8e:	18c0      	adds	r0, r0, r3
 8001d90:	6861      	ldr	r1, [r4, #4]
 8001d92:	f7fe f9c3 	bl	800011c <__udivsi3>
 8001d96:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d98:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001d9a:	220f      	movs	r2, #15
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	4391      	bics	r1, r2
 8001da0:	000a      	movs	r2, r1
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001da2:	071b      	lsls	r3, r3, #28
    huart->Instance->BRR = brrtemp;
 8001da4:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001da6:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001da8:	4313      	orrs	r3, r2
 8001daa:	60cb      	str	r3, [r1, #12]
    }
  }

  return ret;

}
 8001dac:	bd70      	pop	{r4, r5, r6, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dae:	f7ff feaf 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001db2:	e7e5      	b.n	8001d80 <UART_SetConfig+0x80>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001db4:	6863      	ldr	r3, [r4, #4]
 8001db6:	0858      	lsrs	r0, r3, #1
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	025b      	lsls	r3, r3, #9
 8001dbc:	e7e7      	b.n	8001d8e <UART_SetConfig+0x8e>
        ret = HAL_ERROR;
 8001dbe:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e7ea      	b.n	8001d9a <UART_SetConfig+0x9a>
    switch (clocksource)
 8001dc4:	2808      	cmp	r0, #8
 8001dc6:	d826      	bhi.n	8001e16 <UART_SetConfig+0x116>
 8001dc8:	f7fe f99e 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001dcc:	25102505 	.word	0x25102505
 8001dd0:	25252519 	.word	0x25252519
 8001dd4:	1e          	.byte	0x1e
 8001dd5:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001dd6:	f7ff ff63 	bl	8001ca0 <HAL_RCC_GetPCLK1Freq>
 8001dda:	6861      	ldr	r1, [r4, #4]
 8001ddc:	084b      	lsrs	r3, r1, #1
 8001dde:	1818      	adds	r0, r3, r0
 8001de0:	f7fe f99c 	bl	800011c <__udivsi3>
 8001de4:	b280      	uxth	r0, r0
 8001de6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001de8:	2000      	movs	r0, #0
        break;
 8001dea:	e7df      	b.n	8001dac <UART_SetConfig+0xac>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001dec:	6861      	ldr	r1, [r4, #4]
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <UART_SetConfig+0x144>)
 8001df0:	0848      	lsrs	r0, r1, #1
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001df2:	18c0      	adds	r0, r0, r3
 8001df4:	f7fe f992 	bl	800011c <__udivsi3>
 8001df8:	b280      	uxth	r0, r0
 8001dfa:	60f0      	str	r0, [r6, #12]
 8001dfc:	e7f4      	b.n	8001de8 <UART_SetConfig+0xe8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dfe:	f7ff fe87 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001e02:	6861      	ldr	r1, [r4, #4]
 8001e04:	084b      	lsrs	r3, r1, #1
 8001e06:	e7f4      	b.n	8001df2 <UART_SetConfig+0xf2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	6861      	ldr	r1, [r4, #4]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	0848      	lsrs	r0, r1, #1
 8001e10:	e7ef      	b.n	8001df2 <UART_SetConfig+0xf2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d0d3      	beq.n	8001dbe <UART_SetConfig+0xbe>
        ret = HAL_ERROR;
 8001e16:	2001      	movs	r0, #1
  return ret;
 8001e18:	e7c8      	b.n	8001dac <UART_SetConfig+0xac>
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40013800 	.word	0x40013800
 8001e20:	efff69f3 	.word	0xefff69f3
 8001e24:	ffffcfff 	.word	0xffffcfff
 8001e28:	fffff4ff 	.word	0xfffff4ff
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	080028c2 	.word	0x080028c2
 8001e34:	40004400 	.word	0x40004400
 8001e38:	40004800 	.word	0x40004800
 8001e3c:	40004c00 	.word	0x40004c00
 8001e40:	00f42400 	.word	0x00f42400
 8001e44:	007a1200 	.word	0x007a1200

08001e48 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e48:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8001e4a:	b530      	push	{r4, r5, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001e4c:	07da      	lsls	r2, r3, #31
 8001e4e:	d506      	bpl.n	8001e5e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001e50:	6801      	ldr	r1, [r0, #0]
 8001e52:	4c28      	ldr	r4, [pc, #160]	; (8001ef4 <UART_AdvFeatureConfig+0xac>)
 8001e54:	684a      	ldr	r2, [r1, #4]
 8001e56:	4022      	ands	r2, r4
 8001e58:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001e5a:	4322      	orrs	r2, r4
 8001e5c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001e5e:	079a      	lsls	r2, r3, #30
 8001e60:	d506      	bpl.n	8001e70 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001e62:	6801      	ldr	r1, [r0, #0]
 8001e64:	4c24      	ldr	r4, [pc, #144]	; (8001ef8 <UART_AdvFeatureConfig+0xb0>)
 8001e66:	684a      	ldr	r2, [r1, #4]
 8001e68:	4022      	ands	r2, r4
 8001e6a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001e6c:	4322      	orrs	r2, r4
 8001e6e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e70:	075a      	lsls	r2, r3, #29
 8001e72:	d506      	bpl.n	8001e82 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e74:	6801      	ldr	r1, [r0, #0]
 8001e76:	4c21      	ldr	r4, [pc, #132]	; (8001efc <UART_AdvFeatureConfig+0xb4>)
 8001e78:	684a      	ldr	r2, [r1, #4]
 8001e7a:	4022      	ands	r2, r4
 8001e7c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001e7e:	4322      	orrs	r2, r4
 8001e80:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e82:	071a      	lsls	r2, r3, #28
 8001e84:	d506      	bpl.n	8001e94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e86:	6801      	ldr	r1, [r0, #0]
 8001e88:	4c1d      	ldr	r4, [pc, #116]	; (8001f00 <UART_AdvFeatureConfig+0xb8>)
 8001e8a:	684a      	ldr	r2, [r1, #4]
 8001e8c:	4022      	ands	r2, r4
 8001e8e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001e90:	4322      	orrs	r2, r4
 8001e92:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e94:	06da      	lsls	r2, r3, #27
 8001e96:	d506      	bpl.n	8001ea6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e98:	6801      	ldr	r1, [r0, #0]
 8001e9a:	4c1a      	ldr	r4, [pc, #104]	; (8001f04 <UART_AdvFeatureConfig+0xbc>)
 8001e9c:	688a      	ldr	r2, [r1, #8]
 8001e9e:	4022      	ands	r2, r4
 8001ea0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ea2:	4322      	orrs	r2, r4
 8001ea4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001ea6:	069a      	lsls	r2, r3, #26
 8001ea8:	d506      	bpl.n	8001eb8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001eaa:	6801      	ldr	r1, [r0, #0]
 8001eac:	4c16      	ldr	r4, [pc, #88]	; (8001f08 <UART_AdvFeatureConfig+0xc0>)
 8001eae:	688a      	ldr	r2, [r1, #8]
 8001eb0:	4022      	ands	r2, r4
 8001eb2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001eb4:	4322      	orrs	r2, r4
 8001eb6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001eb8:	065a      	lsls	r2, r3, #25
 8001eba:	d510      	bpl.n	8001ede <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001ebc:	6801      	ldr	r1, [r0, #0]
 8001ebe:	4d13      	ldr	r5, [pc, #76]	; (8001f0c <UART_AdvFeatureConfig+0xc4>)
 8001ec0:	684a      	ldr	r2, [r1, #4]
 8001ec2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001ec4:	402a      	ands	r2, r5
 8001ec6:	4322      	orrs	r2, r4
 8001ec8:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	0352      	lsls	r2, r2, #13
 8001ece:	4294      	cmp	r4, r2
 8001ed0:	d105      	bne.n	8001ede <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001ed2:	684a      	ldr	r2, [r1, #4]
 8001ed4:	4c0e      	ldr	r4, [pc, #56]	; (8001f10 <UART_AdvFeatureConfig+0xc8>)
 8001ed6:	4022      	ands	r2, r4
 8001ed8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001eda:	4322      	orrs	r2, r4
 8001edc:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001ede:	061b      	lsls	r3, r3, #24
 8001ee0:	d506      	bpl.n	8001ef0 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ee2:	6802      	ldr	r2, [r0, #0]
 8001ee4:	490b      	ldr	r1, [pc, #44]	; (8001f14 <UART_AdvFeatureConfig+0xcc>)
 8001ee6:	6853      	ldr	r3, [r2, #4]
 8001ee8:	400b      	ands	r3, r1
 8001eea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6053      	str	r3, [r2, #4]
  }
}
 8001ef0:	bd30      	pop	{r4, r5, pc}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	fffdffff 	.word	0xfffdffff
 8001ef8:	fffeffff 	.word	0xfffeffff
 8001efc:	fffbffff 	.word	0xfffbffff
 8001f00:	ffff7fff 	.word	0xffff7fff
 8001f04:	ffffefff 	.word	0xffffefff
 8001f08:	ffffdfff 	.word	0xffffdfff
 8001f0c:	ffefffff 	.word	0xffefffff
 8001f10:	ff9fffff 	.word	0xff9fffff
 8001f14:	fff7ffff 	.word	0xfff7ffff

08001f18 <HAL_UART_Init>:
{
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8001f1c:	d101      	bne.n	8001f22 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8001f1e:	2001      	movs	r0, #1
}
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
  if(huart->gState == HAL_UART_STATE_RESET)
 8001f22:	0005      	movs	r5, r0
 8001f24:	3569      	adds	r5, #105	; 0x69
 8001f26:	782b      	ldrb	r3, [r5, #0]
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d104      	bne.n	8001f38 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8001f2e:	0002      	movs	r2, r0
 8001f30:	3268      	adds	r2, #104	; 0x68
 8001f32:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8001f34:	f7ff fec4 	bl	8001cc0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8001f38:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001f3e:	702b      	strb	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 8001f40:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f42:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8001f44:	438b      	bics	r3, r1
 8001f46:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f48:	f7ff feda 	bl	8001d00 <UART_SetConfig>
 8001f4c:	2801      	cmp	r0, #1
 8001f4e:	d0e6      	beq.n	8001f1e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d002      	beq.n	8001f5c <HAL_UART_Init+0x44>
    UART_AdvFeatureConfig(huart);
 8001f56:	0020      	movs	r0, r4
 8001f58:	f7ff ff76 	bl	8001e48 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	490b      	ldr	r1, [pc, #44]	; (8001f8c <HAL_UART_Init+0x74>)
 8001f60:	685a      	ldr	r2, [r3, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f62:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f64:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001f66:	2108      	movs	r1, #8
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001f68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001f70:	2201      	movs	r2, #1
 8001f72:	6819      	ldr	r1, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001f78:	0022      	movs	r2, r4
  huart->gState  = HAL_UART_STATE_READY;
 8001f7a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7c:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxState = HAL_UART_STATE_READY;
 8001f7e:	326a      	adds	r2, #106	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f80:	3468      	adds	r4, #104	; 0x68
  huart->gState  = HAL_UART_STATE_READY;
 8001f82:	702b      	strb	r3, [r5, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8001f84:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8001f86:	7020      	strb	r0, [r4, #0]
  return (UART_CheckIdleState(huart));
 8001f88:	e7ca      	b.n	8001f20 <HAL_UART_Init+0x8>
 8001f8a:	46c0      	nop			; (mov r8, r8)
 8001f8c:	fffff7ff 	.word	0xfffff7ff

08001f90 <__errno>:
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <__errno+0x8>)
 8001f92:	6818      	ldr	r0, [r3, #0]
 8001f94:	4770      	bx	lr
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	20000004 	.word	0x20000004

08001f9c <__libc_init_array>:
 8001f9c:	b570      	push	{r4, r5, r6, lr}
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	4d0c      	ldr	r5, [pc, #48]	; (8001fd4 <__libc_init_array+0x38>)
 8001fa2:	4c0d      	ldr	r4, [pc, #52]	; (8001fd8 <__libc_init_array+0x3c>)
 8001fa4:	1b64      	subs	r4, r4, r5
 8001fa6:	10a4      	asrs	r4, r4, #2
 8001fa8:	42a6      	cmp	r6, r4
 8001faa:	d109      	bne.n	8001fc0 <__libc_init_array+0x24>
 8001fac:	2600      	movs	r6, #0
 8001fae:	f000 fc3b 	bl	8002828 <_init>
 8001fb2:	4d0a      	ldr	r5, [pc, #40]	; (8001fdc <__libc_init_array+0x40>)
 8001fb4:	4c0a      	ldr	r4, [pc, #40]	; (8001fe0 <__libc_init_array+0x44>)
 8001fb6:	1b64      	subs	r4, r4, r5
 8001fb8:	10a4      	asrs	r4, r4, #2
 8001fba:	42a6      	cmp	r6, r4
 8001fbc:	d105      	bne.n	8001fca <__libc_init_array+0x2e>
 8001fbe:	bd70      	pop	{r4, r5, r6, pc}
 8001fc0:	00b3      	lsls	r3, r6, #2
 8001fc2:	58eb      	ldr	r3, [r5, r3]
 8001fc4:	4798      	blx	r3
 8001fc6:	3601      	adds	r6, #1
 8001fc8:	e7ee      	b.n	8001fa8 <__libc_init_array+0xc>
 8001fca:	00b3      	lsls	r3, r6, #2
 8001fcc:	58eb      	ldr	r3, [r5, r3]
 8001fce:	4798      	blx	r3
 8001fd0:	3601      	adds	r6, #1
 8001fd2:	e7f2      	b.n	8001fba <__libc_init_array+0x1e>
 8001fd4:	080028fc 	.word	0x080028fc
 8001fd8:	080028fc 	.word	0x080028fc
 8001fdc:	080028fc 	.word	0x080028fc
 8001fe0:	08002900 	.word	0x08002900

08001fe4 <memcpy>:
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	b510      	push	{r4, lr}
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d100      	bne.n	8001fee <memcpy+0xa>
 8001fec:	bd10      	pop	{r4, pc}
 8001fee:	5ccc      	ldrb	r4, [r1, r3]
 8001ff0:	54c4      	strb	r4, [r0, r3]
 8001ff2:	3301      	adds	r3, #1
 8001ff4:	e7f8      	b.n	8001fe8 <memcpy+0x4>
	...

08001ff8 <siprintf>:
 8001ff8:	b40e      	push	{r1, r2, r3}
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	b09d      	sub	sp, #116	; 0x74
 8001ffe:	a902      	add	r1, sp, #8
 8002000:	9002      	str	r0, [sp, #8]
 8002002:	6108      	str	r0, [r1, #16]
 8002004:	480b      	ldr	r0, [pc, #44]	; (8002034 <siprintf+0x3c>)
 8002006:	2482      	movs	r4, #130	; 0x82
 8002008:	6088      	str	r0, [r1, #8]
 800200a:	6148      	str	r0, [r1, #20]
 800200c:	2001      	movs	r0, #1
 800200e:	4240      	negs	r0, r0
 8002010:	ab1f      	add	r3, sp, #124	; 0x7c
 8002012:	81c8      	strh	r0, [r1, #14]
 8002014:	4808      	ldr	r0, [pc, #32]	; (8002038 <siprintf+0x40>)
 8002016:	cb04      	ldmia	r3!, {r2}
 8002018:	00a4      	lsls	r4, r4, #2
 800201a:	6800      	ldr	r0, [r0, #0]
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	818c      	strh	r4, [r1, #12]
 8002020:	f000 f86e 	bl	8002100 <_svfiprintf_r>
 8002024:	2300      	movs	r3, #0
 8002026:	9a02      	ldr	r2, [sp, #8]
 8002028:	7013      	strb	r3, [r2, #0]
 800202a:	b01d      	add	sp, #116	; 0x74
 800202c:	bc10      	pop	{r4}
 800202e:	bc08      	pop	{r3}
 8002030:	b003      	add	sp, #12
 8002032:	4718      	bx	r3
 8002034:	7fffffff 	.word	0x7fffffff
 8002038:	20000004 	.word	0x20000004

0800203c <__ssputs_r>:
 800203c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800203e:	688e      	ldr	r6, [r1, #8]
 8002040:	b085      	sub	sp, #20
 8002042:	0007      	movs	r7, r0
 8002044:	000c      	movs	r4, r1
 8002046:	9203      	str	r2, [sp, #12]
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	429e      	cmp	r6, r3
 800204c:	d839      	bhi.n	80020c2 <__ssputs_r+0x86>
 800204e:	2390      	movs	r3, #144	; 0x90
 8002050:	898a      	ldrh	r2, [r1, #12]
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	421a      	tst	r2, r3
 8002056:	d034      	beq.n	80020c2 <__ssputs_r+0x86>
 8002058:	2503      	movs	r5, #3
 800205a:	6909      	ldr	r1, [r1, #16]
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	1a5b      	subs	r3, r3, r1
 8002060:	9302      	str	r3, [sp, #8]
 8002062:	6963      	ldr	r3, [r4, #20]
 8002064:	9802      	ldr	r0, [sp, #8]
 8002066:	435d      	muls	r5, r3
 8002068:	0feb      	lsrs	r3, r5, #31
 800206a:	195d      	adds	r5, r3, r5
 800206c:	9b01      	ldr	r3, [sp, #4]
 800206e:	106d      	asrs	r5, r5, #1
 8002070:	3301      	adds	r3, #1
 8002072:	181b      	adds	r3, r3, r0
 8002074:	42ab      	cmp	r3, r5
 8002076:	d900      	bls.n	800207a <__ssputs_r+0x3e>
 8002078:	001d      	movs	r5, r3
 800207a:	0553      	lsls	r3, r2, #21
 800207c:	d532      	bpl.n	80020e4 <__ssputs_r+0xa8>
 800207e:	0029      	movs	r1, r5
 8002080:	0038      	movs	r0, r7
 8002082:	f000 fb31 	bl	80026e8 <_malloc_r>
 8002086:	1e06      	subs	r6, r0, #0
 8002088:	d109      	bne.n	800209e <__ssputs_r+0x62>
 800208a:	230c      	movs	r3, #12
 800208c:	603b      	str	r3, [r7, #0]
 800208e:	2340      	movs	r3, #64	; 0x40
 8002090:	2001      	movs	r0, #1
 8002092:	89a2      	ldrh	r2, [r4, #12]
 8002094:	4240      	negs	r0, r0
 8002096:	4313      	orrs	r3, r2
 8002098:	81a3      	strh	r3, [r4, #12]
 800209a:	b005      	add	sp, #20
 800209c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209e:	9a02      	ldr	r2, [sp, #8]
 80020a0:	6921      	ldr	r1, [r4, #16]
 80020a2:	f7ff ff9f 	bl	8001fe4 <memcpy>
 80020a6:	89a3      	ldrh	r3, [r4, #12]
 80020a8:	4a14      	ldr	r2, [pc, #80]	; (80020fc <__ssputs_r+0xc0>)
 80020aa:	401a      	ands	r2, r3
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	4313      	orrs	r3, r2
 80020b0:	81a3      	strh	r3, [r4, #12]
 80020b2:	9b02      	ldr	r3, [sp, #8]
 80020b4:	6126      	str	r6, [r4, #16]
 80020b6:	18f6      	adds	r6, r6, r3
 80020b8:	6026      	str	r6, [r4, #0]
 80020ba:	6165      	str	r5, [r4, #20]
 80020bc:	9e01      	ldr	r6, [sp, #4]
 80020be:	1aed      	subs	r5, r5, r3
 80020c0:	60a5      	str	r5, [r4, #8]
 80020c2:	9b01      	ldr	r3, [sp, #4]
 80020c4:	42b3      	cmp	r3, r6
 80020c6:	d200      	bcs.n	80020ca <__ssputs_r+0x8e>
 80020c8:	001e      	movs	r6, r3
 80020ca:	0032      	movs	r2, r6
 80020cc:	9903      	ldr	r1, [sp, #12]
 80020ce:	6820      	ldr	r0, [r4, #0]
 80020d0:	f000 faad 	bl	800262e <memmove>
 80020d4:	68a3      	ldr	r3, [r4, #8]
 80020d6:	2000      	movs	r0, #0
 80020d8:	1b9b      	subs	r3, r3, r6
 80020da:	60a3      	str	r3, [r4, #8]
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	199e      	adds	r6, r3, r6
 80020e0:	6026      	str	r6, [r4, #0]
 80020e2:	e7da      	b.n	800209a <__ssputs_r+0x5e>
 80020e4:	002a      	movs	r2, r5
 80020e6:	0038      	movs	r0, r7
 80020e8:	f000 fb5c 	bl	80027a4 <_realloc_r>
 80020ec:	1e06      	subs	r6, r0, #0
 80020ee:	d1e0      	bne.n	80020b2 <__ssputs_r+0x76>
 80020f0:	6921      	ldr	r1, [r4, #16]
 80020f2:	0038      	movs	r0, r7
 80020f4:	f000 faae 	bl	8002654 <_free_r>
 80020f8:	e7c7      	b.n	800208a <__ssputs_r+0x4e>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	fffffb7f 	.word	0xfffffb7f

08002100 <_svfiprintf_r>:
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	b09f      	sub	sp, #124	; 0x7c
 8002104:	9002      	str	r0, [sp, #8]
 8002106:	9305      	str	r3, [sp, #20]
 8002108:	898b      	ldrh	r3, [r1, #12]
 800210a:	000f      	movs	r7, r1
 800210c:	0016      	movs	r6, r2
 800210e:	061b      	lsls	r3, r3, #24
 8002110:	d511      	bpl.n	8002136 <_svfiprintf_r+0x36>
 8002112:	690b      	ldr	r3, [r1, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10e      	bne.n	8002136 <_svfiprintf_r+0x36>
 8002118:	2140      	movs	r1, #64	; 0x40
 800211a:	f000 fae5 	bl	80026e8 <_malloc_r>
 800211e:	6038      	str	r0, [r7, #0]
 8002120:	6138      	str	r0, [r7, #16]
 8002122:	2800      	cmp	r0, #0
 8002124:	d105      	bne.n	8002132 <_svfiprintf_r+0x32>
 8002126:	230c      	movs	r3, #12
 8002128:	9a02      	ldr	r2, [sp, #8]
 800212a:	3801      	subs	r0, #1
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	b01f      	add	sp, #124	; 0x7c
 8002130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	617b      	str	r3, [r7, #20]
 8002136:	2300      	movs	r3, #0
 8002138:	ad06      	add	r5, sp, #24
 800213a:	616b      	str	r3, [r5, #20]
 800213c:	3320      	adds	r3, #32
 800213e:	766b      	strb	r3, [r5, #25]
 8002140:	3310      	adds	r3, #16
 8002142:	76ab      	strb	r3, [r5, #26]
 8002144:	0034      	movs	r4, r6
 8002146:	7823      	ldrb	r3, [r4, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d147      	bne.n	80021dc <_svfiprintf_r+0xdc>
 800214c:	1ba3      	subs	r3, r4, r6
 800214e:	9304      	str	r3, [sp, #16]
 8002150:	d00d      	beq.n	800216e <_svfiprintf_r+0x6e>
 8002152:	1ba3      	subs	r3, r4, r6
 8002154:	0032      	movs	r2, r6
 8002156:	0039      	movs	r1, r7
 8002158:	9802      	ldr	r0, [sp, #8]
 800215a:	f7ff ff6f 	bl	800203c <__ssputs_r>
 800215e:	1c43      	adds	r3, r0, #1
 8002160:	d100      	bne.n	8002164 <_svfiprintf_r+0x64>
 8002162:	e0b5      	b.n	80022d0 <_svfiprintf_r+0x1d0>
 8002164:	696a      	ldr	r2, [r5, #20]
 8002166:	9b04      	ldr	r3, [sp, #16]
 8002168:	4694      	mov	ip, r2
 800216a:	4463      	add	r3, ip
 800216c:	616b      	str	r3, [r5, #20]
 800216e:	7823      	ldrb	r3, [r4, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d100      	bne.n	8002176 <_svfiprintf_r+0x76>
 8002174:	e0ac      	b.n	80022d0 <_svfiprintf_r+0x1d0>
 8002176:	2201      	movs	r2, #1
 8002178:	2300      	movs	r3, #0
 800217a:	4252      	negs	r2, r2
 800217c:	606a      	str	r2, [r5, #4]
 800217e:	a902      	add	r1, sp, #8
 8002180:	3254      	adds	r2, #84	; 0x54
 8002182:	1852      	adds	r2, r2, r1
 8002184:	3401      	adds	r4, #1
 8002186:	602b      	str	r3, [r5, #0]
 8002188:	60eb      	str	r3, [r5, #12]
 800218a:	60ab      	str	r3, [r5, #8]
 800218c:	7013      	strb	r3, [r2, #0]
 800218e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002190:	4e58      	ldr	r6, [pc, #352]	; (80022f4 <_svfiprintf_r+0x1f4>)
 8002192:	2205      	movs	r2, #5
 8002194:	7821      	ldrb	r1, [r4, #0]
 8002196:	0030      	movs	r0, r6
 8002198:	f000 fa3e 	bl	8002618 <memchr>
 800219c:	1c62      	adds	r2, r4, #1
 800219e:	2800      	cmp	r0, #0
 80021a0:	d120      	bne.n	80021e4 <_svfiprintf_r+0xe4>
 80021a2:	6829      	ldr	r1, [r5, #0]
 80021a4:	06cb      	lsls	r3, r1, #27
 80021a6:	d504      	bpl.n	80021b2 <_svfiprintf_r+0xb2>
 80021a8:	2353      	movs	r3, #83	; 0x53
 80021aa:	ae02      	add	r6, sp, #8
 80021ac:	3020      	adds	r0, #32
 80021ae:	199b      	adds	r3, r3, r6
 80021b0:	7018      	strb	r0, [r3, #0]
 80021b2:	070b      	lsls	r3, r1, #28
 80021b4:	d504      	bpl.n	80021c0 <_svfiprintf_r+0xc0>
 80021b6:	2353      	movs	r3, #83	; 0x53
 80021b8:	202b      	movs	r0, #43	; 0x2b
 80021ba:	ae02      	add	r6, sp, #8
 80021bc:	199b      	adds	r3, r3, r6
 80021be:	7018      	strb	r0, [r3, #0]
 80021c0:	7823      	ldrb	r3, [r4, #0]
 80021c2:	2b2a      	cmp	r3, #42	; 0x2a
 80021c4:	d016      	beq.n	80021f4 <_svfiprintf_r+0xf4>
 80021c6:	2000      	movs	r0, #0
 80021c8:	210a      	movs	r1, #10
 80021ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021cc:	7822      	ldrb	r2, [r4, #0]
 80021ce:	3a30      	subs	r2, #48	; 0x30
 80021d0:	2a09      	cmp	r2, #9
 80021d2:	d955      	bls.n	8002280 <_svfiprintf_r+0x180>
 80021d4:	2800      	cmp	r0, #0
 80021d6:	d015      	beq.n	8002204 <_svfiprintf_r+0x104>
 80021d8:	9309      	str	r3, [sp, #36]	; 0x24
 80021da:	e013      	b.n	8002204 <_svfiprintf_r+0x104>
 80021dc:	2b25      	cmp	r3, #37	; 0x25
 80021de:	d0b5      	beq.n	800214c <_svfiprintf_r+0x4c>
 80021e0:	3401      	adds	r4, #1
 80021e2:	e7b0      	b.n	8002146 <_svfiprintf_r+0x46>
 80021e4:	2301      	movs	r3, #1
 80021e6:	1b80      	subs	r0, r0, r6
 80021e8:	4083      	lsls	r3, r0
 80021ea:	6829      	ldr	r1, [r5, #0]
 80021ec:	0014      	movs	r4, r2
 80021ee:	430b      	orrs	r3, r1
 80021f0:	602b      	str	r3, [r5, #0]
 80021f2:	e7cd      	b.n	8002190 <_svfiprintf_r+0x90>
 80021f4:	9b05      	ldr	r3, [sp, #20]
 80021f6:	1d18      	adds	r0, r3, #4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	9005      	str	r0, [sp, #20]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db39      	blt.n	8002274 <_svfiprintf_r+0x174>
 8002200:	9309      	str	r3, [sp, #36]	; 0x24
 8002202:	0014      	movs	r4, r2
 8002204:	7823      	ldrb	r3, [r4, #0]
 8002206:	2b2e      	cmp	r3, #46	; 0x2e
 8002208:	d10b      	bne.n	8002222 <_svfiprintf_r+0x122>
 800220a:	7863      	ldrb	r3, [r4, #1]
 800220c:	1c62      	adds	r2, r4, #1
 800220e:	2b2a      	cmp	r3, #42	; 0x2a
 8002210:	d13e      	bne.n	8002290 <_svfiprintf_r+0x190>
 8002212:	9b05      	ldr	r3, [sp, #20]
 8002214:	3402      	adds	r4, #2
 8002216:	1d1a      	adds	r2, r3, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	9205      	str	r2, [sp, #20]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db34      	blt.n	800228a <_svfiprintf_r+0x18a>
 8002220:	9307      	str	r3, [sp, #28]
 8002222:	4e35      	ldr	r6, [pc, #212]	; (80022f8 <_svfiprintf_r+0x1f8>)
 8002224:	7821      	ldrb	r1, [r4, #0]
 8002226:	2203      	movs	r2, #3
 8002228:	0030      	movs	r0, r6
 800222a:	f000 f9f5 	bl	8002618 <memchr>
 800222e:	2800      	cmp	r0, #0
 8002230:	d006      	beq.n	8002240 <_svfiprintf_r+0x140>
 8002232:	2340      	movs	r3, #64	; 0x40
 8002234:	1b80      	subs	r0, r0, r6
 8002236:	4083      	lsls	r3, r0
 8002238:	682a      	ldr	r2, [r5, #0]
 800223a:	3401      	adds	r4, #1
 800223c:	4313      	orrs	r3, r2
 800223e:	602b      	str	r3, [r5, #0]
 8002240:	7821      	ldrb	r1, [r4, #0]
 8002242:	2206      	movs	r2, #6
 8002244:	482d      	ldr	r0, [pc, #180]	; (80022fc <_svfiprintf_r+0x1fc>)
 8002246:	1c66      	adds	r6, r4, #1
 8002248:	7629      	strb	r1, [r5, #24]
 800224a:	f000 f9e5 	bl	8002618 <memchr>
 800224e:	2800      	cmp	r0, #0
 8002250:	d046      	beq.n	80022e0 <_svfiprintf_r+0x1e0>
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <_svfiprintf_r+0x200>)
 8002254:	2b00      	cmp	r3, #0
 8002256:	d12f      	bne.n	80022b8 <_svfiprintf_r+0x1b8>
 8002258:	6829      	ldr	r1, [r5, #0]
 800225a:	9b05      	ldr	r3, [sp, #20]
 800225c:	2207      	movs	r2, #7
 800225e:	05c9      	lsls	r1, r1, #23
 8002260:	d528      	bpl.n	80022b4 <_svfiprintf_r+0x1b4>
 8002262:	189b      	adds	r3, r3, r2
 8002264:	4393      	bics	r3, r2
 8002266:	3308      	adds	r3, #8
 8002268:	9305      	str	r3, [sp, #20]
 800226a:	696b      	ldr	r3, [r5, #20]
 800226c:	9a03      	ldr	r2, [sp, #12]
 800226e:	189b      	adds	r3, r3, r2
 8002270:	616b      	str	r3, [r5, #20]
 8002272:	e767      	b.n	8002144 <_svfiprintf_r+0x44>
 8002274:	425b      	negs	r3, r3
 8002276:	60eb      	str	r3, [r5, #12]
 8002278:	2302      	movs	r3, #2
 800227a:	430b      	orrs	r3, r1
 800227c:	602b      	str	r3, [r5, #0]
 800227e:	e7c0      	b.n	8002202 <_svfiprintf_r+0x102>
 8002280:	434b      	muls	r3, r1
 8002282:	3401      	adds	r4, #1
 8002284:	189b      	adds	r3, r3, r2
 8002286:	2001      	movs	r0, #1
 8002288:	e7a0      	b.n	80021cc <_svfiprintf_r+0xcc>
 800228a:	2301      	movs	r3, #1
 800228c:	425b      	negs	r3, r3
 800228e:	e7c7      	b.n	8002220 <_svfiprintf_r+0x120>
 8002290:	2300      	movs	r3, #0
 8002292:	0014      	movs	r4, r2
 8002294:	200a      	movs	r0, #10
 8002296:	001a      	movs	r2, r3
 8002298:	606b      	str	r3, [r5, #4]
 800229a:	7821      	ldrb	r1, [r4, #0]
 800229c:	3930      	subs	r1, #48	; 0x30
 800229e:	2909      	cmp	r1, #9
 80022a0:	d903      	bls.n	80022aa <_svfiprintf_r+0x1aa>
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0bd      	beq.n	8002222 <_svfiprintf_r+0x122>
 80022a6:	9207      	str	r2, [sp, #28]
 80022a8:	e7bb      	b.n	8002222 <_svfiprintf_r+0x122>
 80022aa:	4342      	muls	r2, r0
 80022ac:	3401      	adds	r4, #1
 80022ae:	1852      	adds	r2, r2, r1
 80022b0:	2301      	movs	r3, #1
 80022b2:	e7f2      	b.n	800229a <_svfiprintf_r+0x19a>
 80022b4:	3307      	adds	r3, #7
 80022b6:	e7d5      	b.n	8002264 <_svfiprintf_r+0x164>
 80022b8:	ab05      	add	r3, sp, #20
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	003a      	movs	r2, r7
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <_svfiprintf_r+0x204>)
 80022c0:	0029      	movs	r1, r5
 80022c2:	9802      	ldr	r0, [sp, #8]
 80022c4:	e000      	b.n	80022c8 <_svfiprintf_r+0x1c8>
 80022c6:	bf00      	nop
 80022c8:	9003      	str	r0, [sp, #12]
 80022ca:	9b03      	ldr	r3, [sp, #12]
 80022cc:	3301      	adds	r3, #1
 80022ce:	d1cc      	bne.n	800226a <_svfiprintf_r+0x16a>
 80022d0:	89bb      	ldrh	r3, [r7, #12]
 80022d2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80022d4:	065b      	lsls	r3, r3, #25
 80022d6:	d400      	bmi.n	80022da <_svfiprintf_r+0x1da>
 80022d8:	e729      	b.n	800212e <_svfiprintf_r+0x2e>
 80022da:	2001      	movs	r0, #1
 80022dc:	4240      	negs	r0, r0
 80022de:	e726      	b.n	800212e <_svfiprintf_r+0x2e>
 80022e0:	ab05      	add	r3, sp, #20
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	003a      	movs	r2, r7
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <_svfiprintf_r+0x204>)
 80022e8:	0029      	movs	r1, r5
 80022ea:	9802      	ldr	r0, [sp, #8]
 80022ec:	f000 f87a 	bl	80023e4 <_printf_i>
 80022f0:	e7ea      	b.n	80022c8 <_svfiprintf_r+0x1c8>
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	080028c6 	.word	0x080028c6
 80022f8:	080028cc 	.word	0x080028cc
 80022fc:	080028d0 	.word	0x080028d0
 8002300:	00000000 	.word	0x00000000
 8002304:	0800203d 	.word	0x0800203d

08002308 <_printf_common>:
 8002308:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800230a:	0015      	movs	r5, r2
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	688a      	ldr	r2, [r1, #8]
 8002310:	690b      	ldr	r3, [r1, #16]
 8002312:	9000      	str	r0, [sp, #0]
 8002314:	000c      	movs	r4, r1
 8002316:	4293      	cmp	r3, r2
 8002318:	da00      	bge.n	800231c <_printf_common+0x14>
 800231a:	0013      	movs	r3, r2
 800231c:	0022      	movs	r2, r4
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	3243      	adds	r2, #67	; 0x43
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	2a00      	cmp	r2, #0
 8002326:	d001      	beq.n	800232c <_printf_common+0x24>
 8002328:	3301      	adds	r3, #1
 800232a:	602b      	str	r3, [r5, #0]
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	d502      	bpl.n	8002338 <_printf_common+0x30>
 8002332:	682b      	ldr	r3, [r5, #0]
 8002334:	3302      	adds	r3, #2
 8002336:	602b      	str	r3, [r5, #0]
 8002338:	2706      	movs	r7, #6
 800233a:	6823      	ldr	r3, [r4, #0]
 800233c:	401f      	ands	r7, r3
 800233e:	d027      	beq.n	8002390 <_printf_common+0x88>
 8002340:	0023      	movs	r3, r4
 8002342:	3343      	adds	r3, #67	; 0x43
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	4193      	sbcs	r3, r2
 800234a:	6822      	ldr	r2, [r4, #0]
 800234c:	0692      	lsls	r2, r2, #26
 800234e:	d430      	bmi.n	80023b2 <_printf_common+0xaa>
 8002350:	0022      	movs	r2, r4
 8002352:	9901      	ldr	r1, [sp, #4]
 8002354:	3243      	adds	r2, #67	; 0x43
 8002356:	9800      	ldr	r0, [sp, #0]
 8002358:	9e08      	ldr	r6, [sp, #32]
 800235a:	47b0      	blx	r6
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d025      	beq.n	80023ac <_printf_common+0xa4>
 8002360:	2306      	movs	r3, #6
 8002362:	6820      	ldr	r0, [r4, #0]
 8002364:	682a      	ldr	r2, [r5, #0]
 8002366:	68e1      	ldr	r1, [r4, #12]
 8002368:	4003      	ands	r3, r0
 800236a:	2500      	movs	r5, #0
 800236c:	2b04      	cmp	r3, #4
 800236e:	d103      	bne.n	8002378 <_printf_common+0x70>
 8002370:	1a8d      	subs	r5, r1, r2
 8002372:	43eb      	mvns	r3, r5
 8002374:	17db      	asrs	r3, r3, #31
 8002376:	401d      	ands	r5, r3
 8002378:	68a3      	ldr	r3, [r4, #8]
 800237a:	6922      	ldr	r2, [r4, #16]
 800237c:	4293      	cmp	r3, r2
 800237e:	dd01      	ble.n	8002384 <_printf_common+0x7c>
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	18ed      	adds	r5, r5, r3
 8002384:	2700      	movs	r7, #0
 8002386:	42bd      	cmp	r5, r7
 8002388:	d120      	bne.n	80023cc <_printf_common+0xc4>
 800238a:	2000      	movs	r0, #0
 800238c:	e010      	b.n	80023b0 <_printf_common+0xa8>
 800238e:	3701      	adds	r7, #1
 8002390:	68e3      	ldr	r3, [r4, #12]
 8002392:	682a      	ldr	r2, [r5, #0]
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	429f      	cmp	r7, r3
 8002398:	dad2      	bge.n	8002340 <_printf_common+0x38>
 800239a:	0022      	movs	r2, r4
 800239c:	2301      	movs	r3, #1
 800239e:	3219      	adds	r2, #25
 80023a0:	9901      	ldr	r1, [sp, #4]
 80023a2:	9800      	ldr	r0, [sp, #0]
 80023a4:	9e08      	ldr	r6, [sp, #32]
 80023a6:	47b0      	blx	r6
 80023a8:	1c43      	adds	r3, r0, #1
 80023aa:	d1f0      	bne.n	800238e <_printf_common+0x86>
 80023ac:	2001      	movs	r0, #1
 80023ae:	4240      	negs	r0, r0
 80023b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023b2:	2030      	movs	r0, #48	; 0x30
 80023b4:	18e1      	adds	r1, r4, r3
 80023b6:	3143      	adds	r1, #67	; 0x43
 80023b8:	7008      	strb	r0, [r1, #0]
 80023ba:	0021      	movs	r1, r4
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	3145      	adds	r1, #69	; 0x45
 80023c0:	7809      	ldrb	r1, [r1, #0]
 80023c2:	18a2      	adds	r2, r4, r2
 80023c4:	3243      	adds	r2, #67	; 0x43
 80023c6:	3302      	adds	r3, #2
 80023c8:	7011      	strb	r1, [r2, #0]
 80023ca:	e7c1      	b.n	8002350 <_printf_common+0x48>
 80023cc:	0022      	movs	r2, r4
 80023ce:	2301      	movs	r3, #1
 80023d0:	321a      	adds	r2, #26
 80023d2:	9901      	ldr	r1, [sp, #4]
 80023d4:	9800      	ldr	r0, [sp, #0]
 80023d6:	9e08      	ldr	r6, [sp, #32]
 80023d8:	47b0      	blx	r6
 80023da:	1c43      	adds	r3, r0, #1
 80023dc:	d0e6      	beq.n	80023ac <_printf_common+0xa4>
 80023de:	3701      	adds	r7, #1
 80023e0:	e7d1      	b.n	8002386 <_printf_common+0x7e>
	...

080023e4 <_printf_i>:
 80023e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023e6:	b08b      	sub	sp, #44	; 0x2c
 80023e8:	9206      	str	r2, [sp, #24]
 80023ea:	000a      	movs	r2, r1
 80023ec:	3243      	adds	r2, #67	; 0x43
 80023ee:	9307      	str	r3, [sp, #28]
 80023f0:	9005      	str	r0, [sp, #20]
 80023f2:	9204      	str	r2, [sp, #16]
 80023f4:	7e0a      	ldrb	r2, [r1, #24]
 80023f6:	000c      	movs	r4, r1
 80023f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80023fa:	2a6e      	cmp	r2, #110	; 0x6e
 80023fc:	d100      	bne.n	8002400 <_printf_i+0x1c>
 80023fe:	e08f      	b.n	8002520 <_printf_i+0x13c>
 8002400:	d817      	bhi.n	8002432 <_printf_i+0x4e>
 8002402:	2a63      	cmp	r2, #99	; 0x63
 8002404:	d02c      	beq.n	8002460 <_printf_i+0x7c>
 8002406:	d808      	bhi.n	800241a <_printf_i+0x36>
 8002408:	2a00      	cmp	r2, #0
 800240a:	d100      	bne.n	800240e <_printf_i+0x2a>
 800240c:	e099      	b.n	8002542 <_printf_i+0x15e>
 800240e:	2a58      	cmp	r2, #88	; 0x58
 8002410:	d054      	beq.n	80024bc <_printf_i+0xd8>
 8002412:	0026      	movs	r6, r4
 8002414:	3642      	adds	r6, #66	; 0x42
 8002416:	7032      	strb	r2, [r6, #0]
 8002418:	e029      	b.n	800246e <_printf_i+0x8a>
 800241a:	2a64      	cmp	r2, #100	; 0x64
 800241c:	d001      	beq.n	8002422 <_printf_i+0x3e>
 800241e:	2a69      	cmp	r2, #105	; 0x69
 8002420:	d1f7      	bne.n	8002412 <_printf_i+0x2e>
 8002422:	6821      	ldr	r1, [r4, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	0608      	lsls	r0, r1, #24
 8002428:	d523      	bpl.n	8002472 <_printf_i+0x8e>
 800242a:	1d11      	adds	r1, r2, #4
 800242c:	6019      	str	r1, [r3, #0]
 800242e:	6815      	ldr	r5, [r2, #0]
 8002430:	e025      	b.n	800247e <_printf_i+0x9a>
 8002432:	2a73      	cmp	r2, #115	; 0x73
 8002434:	d100      	bne.n	8002438 <_printf_i+0x54>
 8002436:	e088      	b.n	800254a <_printf_i+0x166>
 8002438:	d808      	bhi.n	800244c <_printf_i+0x68>
 800243a:	2a6f      	cmp	r2, #111	; 0x6f
 800243c:	d029      	beq.n	8002492 <_printf_i+0xae>
 800243e:	2a70      	cmp	r2, #112	; 0x70
 8002440:	d1e7      	bne.n	8002412 <_printf_i+0x2e>
 8002442:	2220      	movs	r2, #32
 8002444:	6809      	ldr	r1, [r1, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	6022      	str	r2, [r4, #0]
 800244a:	e003      	b.n	8002454 <_printf_i+0x70>
 800244c:	2a75      	cmp	r2, #117	; 0x75
 800244e:	d020      	beq.n	8002492 <_printf_i+0xae>
 8002450:	2a78      	cmp	r2, #120	; 0x78
 8002452:	d1de      	bne.n	8002412 <_printf_i+0x2e>
 8002454:	0022      	movs	r2, r4
 8002456:	2178      	movs	r1, #120	; 0x78
 8002458:	3245      	adds	r2, #69	; 0x45
 800245a:	7011      	strb	r1, [r2, #0]
 800245c:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <_printf_i+0x22c>)
 800245e:	e030      	b.n	80024c2 <_printf_i+0xde>
 8002460:	000e      	movs	r6, r1
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	3642      	adds	r6, #66	; 0x42
 8002466:	1d11      	adds	r1, r2, #4
 8002468:	6019      	str	r1, [r3, #0]
 800246a:	6813      	ldr	r3, [r2, #0]
 800246c:	7033      	strb	r3, [r6, #0]
 800246e:	2301      	movs	r3, #1
 8002470:	e079      	b.n	8002566 <_printf_i+0x182>
 8002472:	0649      	lsls	r1, r1, #25
 8002474:	d5d9      	bpl.n	800242a <_printf_i+0x46>
 8002476:	1d11      	adds	r1, r2, #4
 8002478:	6019      	str	r1, [r3, #0]
 800247a:	2300      	movs	r3, #0
 800247c:	5ed5      	ldrsh	r5, [r2, r3]
 800247e:	2d00      	cmp	r5, #0
 8002480:	da03      	bge.n	800248a <_printf_i+0xa6>
 8002482:	232d      	movs	r3, #45	; 0x2d
 8002484:	9a04      	ldr	r2, [sp, #16]
 8002486:	426d      	negs	r5, r5
 8002488:	7013      	strb	r3, [r2, #0]
 800248a:	4b62      	ldr	r3, [pc, #392]	; (8002614 <_printf_i+0x230>)
 800248c:	270a      	movs	r7, #10
 800248e:	9303      	str	r3, [sp, #12]
 8002490:	e02f      	b.n	80024f2 <_printf_i+0x10e>
 8002492:	6820      	ldr	r0, [r4, #0]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	0605      	lsls	r5, r0, #24
 8002498:	d503      	bpl.n	80024a2 <_printf_i+0xbe>
 800249a:	1d08      	adds	r0, r1, #4
 800249c:	6018      	str	r0, [r3, #0]
 800249e:	680d      	ldr	r5, [r1, #0]
 80024a0:	e005      	b.n	80024ae <_printf_i+0xca>
 80024a2:	0640      	lsls	r0, r0, #25
 80024a4:	d5f9      	bpl.n	800249a <_printf_i+0xb6>
 80024a6:	680d      	ldr	r5, [r1, #0]
 80024a8:	1d08      	adds	r0, r1, #4
 80024aa:	6018      	str	r0, [r3, #0]
 80024ac:	b2ad      	uxth	r5, r5
 80024ae:	4b59      	ldr	r3, [pc, #356]	; (8002614 <_printf_i+0x230>)
 80024b0:	2708      	movs	r7, #8
 80024b2:	9303      	str	r3, [sp, #12]
 80024b4:	2a6f      	cmp	r2, #111	; 0x6f
 80024b6:	d018      	beq.n	80024ea <_printf_i+0x106>
 80024b8:	270a      	movs	r7, #10
 80024ba:	e016      	b.n	80024ea <_printf_i+0x106>
 80024bc:	3145      	adds	r1, #69	; 0x45
 80024be:	700a      	strb	r2, [r1, #0]
 80024c0:	4a54      	ldr	r2, [pc, #336]	; (8002614 <_printf_i+0x230>)
 80024c2:	9203      	str	r2, [sp, #12]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	6821      	ldr	r1, [r4, #0]
 80024c8:	1d10      	adds	r0, r2, #4
 80024ca:	6018      	str	r0, [r3, #0]
 80024cc:	6815      	ldr	r5, [r2, #0]
 80024ce:	0608      	lsls	r0, r1, #24
 80024d0:	d522      	bpl.n	8002518 <_printf_i+0x134>
 80024d2:	07cb      	lsls	r3, r1, #31
 80024d4:	d502      	bpl.n	80024dc <_printf_i+0xf8>
 80024d6:	2320      	movs	r3, #32
 80024d8:	4319      	orrs	r1, r3
 80024da:	6021      	str	r1, [r4, #0]
 80024dc:	2710      	movs	r7, #16
 80024de:	2d00      	cmp	r5, #0
 80024e0:	d103      	bne.n	80024ea <_printf_i+0x106>
 80024e2:	2320      	movs	r3, #32
 80024e4:	6822      	ldr	r2, [r4, #0]
 80024e6:	439a      	bics	r2, r3
 80024e8:	6022      	str	r2, [r4, #0]
 80024ea:	0023      	movs	r3, r4
 80024ec:	2200      	movs	r2, #0
 80024ee:	3343      	adds	r3, #67	; 0x43
 80024f0:	701a      	strb	r2, [r3, #0]
 80024f2:	6863      	ldr	r3, [r4, #4]
 80024f4:	60a3      	str	r3, [r4, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db5c      	blt.n	80025b4 <_printf_i+0x1d0>
 80024fa:	2204      	movs	r2, #4
 80024fc:	6821      	ldr	r1, [r4, #0]
 80024fe:	4391      	bics	r1, r2
 8002500:	6021      	str	r1, [r4, #0]
 8002502:	2d00      	cmp	r5, #0
 8002504:	d158      	bne.n	80025b8 <_printf_i+0x1d4>
 8002506:	9e04      	ldr	r6, [sp, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d064      	beq.n	80025d6 <_printf_i+0x1f2>
 800250c:	0026      	movs	r6, r4
 800250e:	9b03      	ldr	r3, [sp, #12]
 8002510:	3642      	adds	r6, #66	; 0x42
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	7033      	strb	r3, [r6, #0]
 8002516:	e05e      	b.n	80025d6 <_printf_i+0x1f2>
 8002518:	0648      	lsls	r0, r1, #25
 800251a:	d5da      	bpl.n	80024d2 <_printf_i+0xee>
 800251c:	b2ad      	uxth	r5, r5
 800251e:	e7d8      	b.n	80024d2 <_printf_i+0xee>
 8002520:	6809      	ldr	r1, [r1, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	0608      	lsls	r0, r1, #24
 8002526:	d505      	bpl.n	8002534 <_printf_i+0x150>
 8002528:	1d11      	adds	r1, r2, #4
 800252a:	6019      	str	r1, [r3, #0]
 800252c:	6813      	ldr	r3, [r2, #0]
 800252e:	6962      	ldr	r2, [r4, #20]
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	e006      	b.n	8002542 <_printf_i+0x15e>
 8002534:	0649      	lsls	r1, r1, #25
 8002536:	d5f7      	bpl.n	8002528 <_printf_i+0x144>
 8002538:	1d11      	adds	r1, r2, #4
 800253a:	6019      	str	r1, [r3, #0]
 800253c:	6813      	ldr	r3, [r2, #0]
 800253e:	8aa2      	ldrh	r2, [r4, #20]
 8002540:	801a      	strh	r2, [r3, #0]
 8002542:	2300      	movs	r3, #0
 8002544:	9e04      	ldr	r6, [sp, #16]
 8002546:	6123      	str	r3, [r4, #16]
 8002548:	e054      	b.n	80025f4 <_printf_i+0x210>
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	1d11      	adds	r1, r2, #4
 800254e:	6019      	str	r1, [r3, #0]
 8002550:	6816      	ldr	r6, [r2, #0]
 8002552:	2100      	movs	r1, #0
 8002554:	6862      	ldr	r2, [r4, #4]
 8002556:	0030      	movs	r0, r6
 8002558:	f000 f85e 	bl	8002618 <memchr>
 800255c:	2800      	cmp	r0, #0
 800255e:	d001      	beq.n	8002564 <_printf_i+0x180>
 8002560:	1b80      	subs	r0, r0, r6
 8002562:	6060      	str	r0, [r4, #4]
 8002564:	6863      	ldr	r3, [r4, #4]
 8002566:	6123      	str	r3, [r4, #16]
 8002568:	2300      	movs	r3, #0
 800256a:	9a04      	ldr	r2, [sp, #16]
 800256c:	7013      	strb	r3, [r2, #0]
 800256e:	e041      	b.n	80025f4 <_printf_i+0x210>
 8002570:	6923      	ldr	r3, [r4, #16]
 8002572:	0032      	movs	r2, r6
 8002574:	9906      	ldr	r1, [sp, #24]
 8002576:	9805      	ldr	r0, [sp, #20]
 8002578:	9d07      	ldr	r5, [sp, #28]
 800257a:	47a8      	blx	r5
 800257c:	1c43      	adds	r3, r0, #1
 800257e:	d043      	beq.n	8002608 <_printf_i+0x224>
 8002580:	6823      	ldr	r3, [r4, #0]
 8002582:	2500      	movs	r5, #0
 8002584:	079b      	lsls	r3, r3, #30
 8002586:	d40f      	bmi.n	80025a8 <_printf_i+0x1c4>
 8002588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800258a:	68e0      	ldr	r0, [r4, #12]
 800258c:	4298      	cmp	r0, r3
 800258e:	da3d      	bge.n	800260c <_printf_i+0x228>
 8002590:	0018      	movs	r0, r3
 8002592:	e03b      	b.n	800260c <_printf_i+0x228>
 8002594:	0022      	movs	r2, r4
 8002596:	2301      	movs	r3, #1
 8002598:	3219      	adds	r2, #25
 800259a:	9906      	ldr	r1, [sp, #24]
 800259c:	9805      	ldr	r0, [sp, #20]
 800259e:	9e07      	ldr	r6, [sp, #28]
 80025a0:	47b0      	blx	r6
 80025a2:	1c43      	adds	r3, r0, #1
 80025a4:	d030      	beq.n	8002608 <_printf_i+0x224>
 80025a6:	3501      	adds	r5, #1
 80025a8:	68e3      	ldr	r3, [r4, #12]
 80025aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	429d      	cmp	r5, r3
 80025b0:	dbf0      	blt.n	8002594 <_printf_i+0x1b0>
 80025b2:	e7e9      	b.n	8002588 <_printf_i+0x1a4>
 80025b4:	2d00      	cmp	r5, #0
 80025b6:	d0a9      	beq.n	800250c <_printf_i+0x128>
 80025b8:	9e04      	ldr	r6, [sp, #16]
 80025ba:	0028      	movs	r0, r5
 80025bc:	0039      	movs	r1, r7
 80025be:	f7fd fe33 	bl	8000228 <__aeabi_uidivmod>
 80025c2:	9b03      	ldr	r3, [sp, #12]
 80025c4:	3e01      	subs	r6, #1
 80025c6:	5c5b      	ldrb	r3, [r3, r1]
 80025c8:	0028      	movs	r0, r5
 80025ca:	7033      	strb	r3, [r6, #0]
 80025cc:	0039      	movs	r1, r7
 80025ce:	f7fd fda5 	bl	800011c <__udivsi3>
 80025d2:	1e05      	subs	r5, r0, #0
 80025d4:	d1f1      	bne.n	80025ba <_printf_i+0x1d6>
 80025d6:	2f08      	cmp	r7, #8
 80025d8:	d109      	bne.n	80025ee <_printf_i+0x20a>
 80025da:	6823      	ldr	r3, [r4, #0]
 80025dc:	07db      	lsls	r3, r3, #31
 80025de:	d506      	bpl.n	80025ee <_printf_i+0x20a>
 80025e0:	6863      	ldr	r3, [r4, #4]
 80025e2:	6922      	ldr	r2, [r4, #16]
 80025e4:	4293      	cmp	r3, r2
 80025e6:	dc02      	bgt.n	80025ee <_printf_i+0x20a>
 80025e8:	2330      	movs	r3, #48	; 0x30
 80025ea:	3e01      	subs	r6, #1
 80025ec:	7033      	strb	r3, [r6, #0]
 80025ee:	9b04      	ldr	r3, [sp, #16]
 80025f0:	1b9b      	subs	r3, r3, r6
 80025f2:	6123      	str	r3, [r4, #16]
 80025f4:	9b07      	ldr	r3, [sp, #28]
 80025f6:	aa09      	add	r2, sp, #36	; 0x24
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	0021      	movs	r1, r4
 80025fc:	9b06      	ldr	r3, [sp, #24]
 80025fe:	9805      	ldr	r0, [sp, #20]
 8002600:	f7ff fe82 	bl	8002308 <_printf_common>
 8002604:	1c43      	adds	r3, r0, #1
 8002606:	d1b3      	bne.n	8002570 <_printf_i+0x18c>
 8002608:	2001      	movs	r0, #1
 800260a:	4240      	negs	r0, r0
 800260c:	b00b      	add	sp, #44	; 0x2c
 800260e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002610:	080028e8 	.word	0x080028e8
 8002614:	080028d7 	.word	0x080028d7

08002618 <memchr>:
 8002618:	b2c9      	uxtb	r1, r1
 800261a:	1882      	adds	r2, r0, r2
 800261c:	4290      	cmp	r0, r2
 800261e:	d101      	bne.n	8002624 <memchr+0xc>
 8002620:	2000      	movs	r0, #0
 8002622:	4770      	bx	lr
 8002624:	7803      	ldrb	r3, [r0, #0]
 8002626:	428b      	cmp	r3, r1
 8002628:	d0fb      	beq.n	8002622 <memchr+0xa>
 800262a:	3001      	adds	r0, #1
 800262c:	e7f6      	b.n	800261c <memchr+0x4>

0800262e <memmove>:
 800262e:	b510      	push	{r4, lr}
 8002630:	4288      	cmp	r0, r1
 8002632:	d902      	bls.n	800263a <memmove+0xc>
 8002634:	188b      	adds	r3, r1, r2
 8002636:	4298      	cmp	r0, r3
 8002638:	d308      	bcc.n	800264c <memmove+0x1e>
 800263a:	2300      	movs	r3, #0
 800263c:	429a      	cmp	r2, r3
 800263e:	d007      	beq.n	8002650 <memmove+0x22>
 8002640:	5ccc      	ldrb	r4, [r1, r3]
 8002642:	54c4      	strb	r4, [r0, r3]
 8002644:	3301      	adds	r3, #1
 8002646:	e7f9      	b.n	800263c <memmove+0xe>
 8002648:	5c8b      	ldrb	r3, [r1, r2]
 800264a:	5483      	strb	r3, [r0, r2]
 800264c:	3a01      	subs	r2, #1
 800264e:	d2fb      	bcs.n	8002648 <memmove+0x1a>
 8002650:	bd10      	pop	{r4, pc}
	...

08002654 <_free_r>:
 8002654:	b570      	push	{r4, r5, r6, lr}
 8002656:	0005      	movs	r5, r0
 8002658:	2900      	cmp	r1, #0
 800265a:	d010      	beq.n	800267e <_free_r+0x2a>
 800265c:	1f0c      	subs	r4, r1, #4
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	da00      	bge.n	8002666 <_free_r+0x12>
 8002664:	18e4      	adds	r4, r4, r3
 8002666:	0028      	movs	r0, r5
 8002668:	f000 f8d4 	bl	8002814 <__malloc_lock>
 800266c:	4a1d      	ldr	r2, [pc, #116]	; (80026e4 <_free_r+0x90>)
 800266e:	6813      	ldr	r3, [r2, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d105      	bne.n	8002680 <_free_r+0x2c>
 8002674:	6063      	str	r3, [r4, #4]
 8002676:	6014      	str	r4, [r2, #0]
 8002678:	0028      	movs	r0, r5
 800267a:	f000 f8cc 	bl	8002816 <__malloc_unlock>
 800267e:	bd70      	pop	{r4, r5, r6, pc}
 8002680:	42a3      	cmp	r3, r4
 8002682:	d909      	bls.n	8002698 <_free_r+0x44>
 8002684:	6821      	ldr	r1, [r4, #0]
 8002686:	1860      	adds	r0, r4, r1
 8002688:	4283      	cmp	r3, r0
 800268a:	d1f3      	bne.n	8002674 <_free_r+0x20>
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	1841      	adds	r1, r0, r1
 8002692:	6021      	str	r1, [r4, #0]
 8002694:	e7ee      	b.n	8002674 <_free_r+0x20>
 8002696:	0013      	movs	r3, r2
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	2a00      	cmp	r2, #0
 800269c:	d001      	beq.n	80026a2 <_free_r+0x4e>
 800269e:	42a2      	cmp	r2, r4
 80026a0:	d9f9      	bls.n	8002696 <_free_r+0x42>
 80026a2:	6819      	ldr	r1, [r3, #0]
 80026a4:	1858      	adds	r0, r3, r1
 80026a6:	42a0      	cmp	r0, r4
 80026a8:	d10b      	bne.n	80026c2 <_free_r+0x6e>
 80026aa:	6820      	ldr	r0, [r4, #0]
 80026ac:	1809      	adds	r1, r1, r0
 80026ae:	1858      	adds	r0, r3, r1
 80026b0:	6019      	str	r1, [r3, #0]
 80026b2:	4282      	cmp	r2, r0
 80026b4:	d1e0      	bne.n	8002678 <_free_r+0x24>
 80026b6:	6810      	ldr	r0, [r2, #0]
 80026b8:	6852      	ldr	r2, [r2, #4]
 80026ba:	1841      	adds	r1, r0, r1
 80026bc:	6019      	str	r1, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
 80026c0:	e7da      	b.n	8002678 <_free_r+0x24>
 80026c2:	42a0      	cmp	r0, r4
 80026c4:	d902      	bls.n	80026cc <_free_r+0x78>
 80026c6:	230c      	movs	r3, #12
 80026c8:	602b      	str	r3, [r5, #0]
 80026ca:	e7d5      	b.n	8002678 <_free_r+0x24>
 80026cc:	6821      	ldr	r1, [r4, #0]
 80026ce:	1860      	adds	r0, r4, r1
 80026d0:	4282      	cmp	r2, r0
 80026d2:	d103      	bne.n	80026dc <_free_r+0x88>
 80026d4:	6810      	ldr	r0, [r2, #0]
 80026d6:	6852      	ldr	r2, [r2, #4]
 80026d8:	1841      	adds	r1, r0, r1
 80026da:	6021      	str	r1, [r4, #0]
 80026dc:	6062      	str	r2, [r4, #4]
 80026de:	605c      	str	r4, [r3, #4]
 80026e0:	e7ca      	b.n	8002678 <_free_r+0x24>
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	2000008c 	.word	0x2000008c

080026e8 <_malloc_r>:
 80026e8:	2303      	movs	r3, #3
 80026ea:	b570      	push	{r4, r5, r6, lr}
 80026ec:	1ccd      	adds	r5, r1, #3
 80026ee:	439d      	bics	r5, r3
 80026f0:	3508      	adds	r5, #8
 80026f2:	0006      	movs	r6, r0
 80026f4:	2d0c      	cmp	r5, #12
 80026f6:	d21e      	bcs.n	8002736 <_malloc_r+0x4e>
 80026f8:	250c      	movs	r5, #12
 80026fa:	42a9      	cmp	r1, r5
 80026fc:	d81d      	bhi.n	800273a <_malloc_r+0x52>
 80026fe:	0030      	movs	r0, r6
 8002700:	f000 f888 	bl	8002814 <__malloc_lock>
 8002704:	4a25      	ldr	r2, [pc, #148]	; (800279c <_malloc_r+0xb4>)
 8002706:	6814      	ldr	r4, [r2, #0]
 8002708:	0021      	movs	r1, r4
 800270a:	2900      	cmp	r1, #0
 800270c:	d119      	bne.n	8002742 <_malloc_r+0x5a>
 800270e:	4c24      	ldr	r4, [pc, #144]	; (80027a0 <_malloc_r+0xb8>)
 8002710:	6823      	ldr	r3, [r4, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <_malloc_r+0x36>
 8002716:	0030      	movs	r0, r6
 8002718:	f000 f86a 	bl	80027f0 <_sbrk_r>
 800271c:	6020      	str	r0, [r4, #0]
 800271e:	0029      	movs	r1, r5
 8002720:	0030      	movs	r0, r6
 8002722:	f000 f865 	bl	80027f0 <_sbrk_r>
 8002726:	1c43      	adds	r3, r0, #1
 8002728:	d12c      	bne.n	8002784 <_malloc_r+0x9c>
 800272a:	230c      	movs	r3, #12
 800272c:	0030      	movs	r0, r6
 800272e:	6033      	str	r3, [r6, #0]
 8002730:	f000 f871 	bl	8002816 <__malloc_unlock>
 8002734:	e003      	b.n	800273e <_malloc_r+0x56>
 8002736:	2d00      	cmp	r5, #0
 8002738:	dadf      	bge.n	80026fa <_malloc_r+0x12>
 800273a:	230c      	movs	r3, #12
 800273c:	6033      	str	r3, [r6, #0]
 800273e:	2000      	movs	r0, #0
 8002740:	bd70      	pop	{r4, r5, r6, pc}
 8002742:	680b      	ldr	r3, [r1, #0]
 8002744:	1b5b      	subs	r3, r3, r5
 8002746:	d41a      	bmi.n	800277e <_malloc_r+0x96>
 8002748:	2b0b      	cmp	r3, #11
 800274a:	d903      	bls.n	8002754 <_malloc_r+0x6c>
 800274c:	600b      	str	r3, [r1, #0]
 800274e:	18cc      	adds	r4, r1, r3
 8002750:	6025      	str	r5, [r4, #0]
 8002752:	e003      	b.n	800275c <_malloc_r+0x74>
 8002754:	428c      	cmp	r4, r1
 8002756:	d10e      	bne.n	8002776 <_malloc_r+0x8e>
 8002758:	6863      	ldr	r3, [r4, #4]
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	0030      	movs	r0, r6
 800275e:	f000 f85a 	bl	8002816 <__malloc_unlock>
 8002762:	0020      	movs	r0, r4
 8002764:	2207      	movs	r2, #7
 8002766:	300b      	adds	r0, #11
 8002768:	1d23      	adds	r3, r4, #4
 800276a:	4390      	bics	r0, r2
 800276c:	1ac3      	subs	r3, r0, r3
 800276e:	d0e7      	beq.n	8002740 <_malloc_r+0x58>
 8002770:	425a      	negs	r2, r3
 8002772:	50e2      	str	r2, [r4, r3]
 8002774:	e7e4      	b.n	8002740 <_malloc_r+0x58>
 8002776:	684b      	ldr	r3, [r1, #4]
 8002778:	6063      	str	r3, [r4, #4]
 800277a:	000c      	movs	r4, r1
 800277c:	e7ee      	b.n	800275c <_malloc_r+0x74>
 800277e:	000c      	movs	r4, r1
 8002780:	6849      	ldr	r1, [r1, #4]
 8002782:	e7c2      	b.n	800270a <_malloc_r+0x22>
 8002784:	2303      	movs	r3, #3
 8002786:	1cc4      	adds	r4, r0, #3
 8002788:	439c      	bics	r4, r3
 800278a:	42a0      	cmp	r0, r4
 800278c:	d0e0      	beq.n	8002750 <_malloc_r+0x68>
 800278e:	1a21      	subs	r1, r4, r0
 8002790:	0030      	movs	r0, r6
 8002792:	f000 f82d 	bl	80027f0 <_sbrk_r>
 8002796:	1c43      	adds	r3, r0, #1
 8002798:	d1da      	bne.n	8002750 <_malloc_r+0x68>
 800279a:	e7c6      	b.n	800272a <_malloc_r+0x42>
 800279c:	2000008c 	.word	0x2000008c
 80027a0:	20000090 	.word	0x20000090

080027a4 <_realloc_r>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	0007      	movs	r7, r0
 80027a8:	000d      	movs	r5, r1
 80027aa:	0016      	movs	r6, r2
 80027ac:	2900      	cmp	r1, #0
 80027ae:	d105      	bne.n	80027bc <_realloc_r+0x18>
 80027b0:	0011      	movs	r1, r2
 80027b2:	f7ff ff99 	bl	80026e8 <_malloc_r>
 80027b6:	0004      	movs	r4, r0
 80027b8:	0020      	movs	r0, r4
 80027ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d103      	bne.n	80027c8 <_realloc_r+0x24>
 80027c0:	f7ff ff48 	bl	8002654 <_free_r>
 80027c4:	0034      	movs	r4, r6
 80027c6:	e7f7      	b.n	80027b8 <_realloc_r+0x14>
 80027c8:	f000 f826 	bl	8002818 <_malloc_usable_size_r>
 80027cc:	002c      	movs	r4, r5
 80027ce:	4286      	cmp	r6, r0
 80027d0:	d9f2      	bls.n	80027b8 <_realloc_r+0x14>
 80027d2:	0031      	movs	r1, r6
 80027d4:	0038      	movs	r0, r7
 80027d6:	f7ff ff87 	bl	80026e8 <_malloc_r>
 80027da:	1e04      	subs	r4, r0, #0
 80027dc:	d0ec      	beq.n	80027b8 <_realloc_r+0x14>
 80027de:	0029      	movs	r1, r5
 80027e0:	0032      	movs	r2, r6
 80027e2:	f7ff fbff 	bl	8001fe4 <memcpy>
 80027e6:	0029      	movs	r1, r5
 80027e8:	0038      	movs	r0, r7
 80027ea:	f7ff ff33 	bl	8002654 <_free_r>
 80027ee:	e7e3      	b.n	80027b8 <_realloc_r+0x14>

080027f0 <_sbrk_r>:
 80027f0:	2300      	movs	r3, #0
 80027f2:	b570      	push	{r4, r5, r6, lr}
 80027f4:	4c06      	ldr	r4, [pc, #24]	; (8002810 <_sbrk_r+0x20>)
 80027f6:	0005      	movs	r5, r0
 80027f8:	0008      	movs	r0, r1
 80027fa:	6023      	str	r3, [r4, #0]
 80027fc:	f7fe f900 	bl	8000a00 <_sbrk>
 8002800:	1c43      	adds	r3, r0, #1
 8002802:	d103      	bne.n	800280c <_sbrk_r+0x1c>
 8002804:	6823      	ldr	r3, [r4, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d000      	beq.n	800280c <_sbrk_r+0x1c>
 800280a:	602b      	str	r3, [r5, #0]
 800280c:	bd70      	pop	{r4, r5, r6, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	200009b8 	.word	0x200009b8

08002814 <__malloc_lock>:
 8002814:	4770      	bx	lr

08002816 <__malloc_unlock>:
 8002816:	4770      	bx	lr

08002818 <_malloc_usable_size_r>:
 8002818:	1f0b      	subs	r3, r1, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1f18      	subs	r0, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	da01      	bge.n	8002826 <_malloc_usable_size_r+0xe>
 8002822:	580b      	ldr	r3, [r1, r0]
 8002824:	18c0      	adds	r0, r0, r3
 8002826:	4770      	bx	lr

08002828 <_init>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800282e:	bc08      	pop	{r3}
 8002830:	469e      	mov	lr, r3
 8002832:	4770      	bx	lr

08002834 <_fini>:
 8002834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283a:	bc08      	pop	{r3}
 800283c:	469e      	mov	lr, r3
 800283e:	4770      	bx	lr
